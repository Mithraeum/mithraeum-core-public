{
  "address": "0xb89F74908132f9737303bcc58116d71C117eD53C",
  "abi": [
    {
      "inputs": [],
      "name": "OnlyMightyCreator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownInputParameter",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "variation",
          "type": "uint8"
        }
      ],
      "name": "getAdvancedProductionTileBonusByVariation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArmyStunDurationByJoiningBattleAtAttackingSide",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArmyStunDurationPerRobberyMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseBattleDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "buildingTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getBasicProductionBuildingCoefficient",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBattleDurationLosingArmyStunMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBattleDurationWinningArmyStunMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBuildingTokenTransferThresholdPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBuildingTypeIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCaptureTileDurationPerTile",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "regionTier",
          "type": "uint256"
        }
      ],
      "name": "getChanceForTileWithBonusByRegionTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "resourceTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getCorruptionIndexByResource",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCultistUnitTypeId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCultistsNoDestructionDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCultistsPerRegionMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCultistsSummonDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameResources",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "resourceTypeId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IRegistry.GameResource[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameUnits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "unitTypeId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IRegistry.GameUnit[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialCaptureProsperityBasicValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialCaptureProsperityPerTileValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialCorruptionIndexAmountPerRegionTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialCultistsAmountPerRegionTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getManeuverDurationStunMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxAdvancedProductionTileBuff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxAllowedRobberyMultiplierIncreaseValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxAllowedUnitsToBuyPerTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxAllowedWorkersToBuyPerTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tileBonusType",
          "type": "uint8"
        }
      ],
      "name": "getMaxCapturedTilesForSettlement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxCultistsPerRegion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxRegionTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxSettlementsPerRegion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimumBattleDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimumUserSettlementsCountInNeighboringRegionRequiredToIncludeRegion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNecessaryProsperityPercentForClaimingTileCapture",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNewSettlementPriceIncreaseMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNewSettlementStartingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextCaptureProsperityBasicThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextCaptureProsperityPerTileThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProductionTicksInSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "unitTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getProsperityForUnitLiquidation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "regionTier",
          "type": "uint256"
        }
      ],
      "name": "getRegionInclusionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "regionTier",
          "type": "uint256"
        }
      ],
      "name": "getRegionOwnerSettlementPurchasePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "resourceTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getResourceWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRobberyPointsPerDamageMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "resourceTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getRobberyPointsToResourceMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSettlementPayToDecreaseCorruptionIndexPenaltyMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSettlementPriceMultiplierPerIncreasedRegionTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStunDurationMultiplierOfCancelledSecretManeuver",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTileCaptureCancellationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToTreasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "variation",
          "type": "uint8"
        }
      ],
      "name": "getUnitBattleMultiplierTileBonusByVariation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnitHiringFortHpMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "unitTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getUnitPoolType",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "unitTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getUnitPriceDropByUnitTypeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnitPriceIncreaseForEachUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "unitTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getUnitResourceUsagePer1SecondOfDecreasedManeuverDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "unitTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getUnitStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "offenseStage1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defenceStage1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "offenseStage2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defenceStage2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "siegePower",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "siegeSupport",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRegistry.UnitStats",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnitTypeIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "buildingTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getWorkerCapacityCoefficient",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWorkerPriceDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWorkerPriceIncreaseForEachWorker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "unitTypeId",
          "type": "bytes32"
        }
      ],
      "name": "getWorkersForUnitLiquidation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_globalMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settlementStartingPrice",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mightyCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMightyCreator",
          "type": "address"
        }
      ],
      "name": "setMightyCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "worldAssetFactoryAddress",
          "type": "address"
        }
      ],
      "name": "setWorldAssetFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementStartingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "worldAssetFactory",
      "outputs": [
        {
          "internalType": "contract IWorldAssetFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1167653fff0f141c1fc0291838b8ad18f6325e17afb97a60eedcb5ff6d4b5427",
  "receipt": {
    "to": null,
    "from": "0xA2F2078006658594Fa058Ee8dBD08f3AA2Bb6C9c",
    "contractAddress": "0xb89F74908132f9737303bcc58116d71C117eD53C",
    "transactionIndex": 1,
    "gasUsed": "2217553",
    "logsBloom": "0x
    "blockHash": "0x8edd0aab763337a634c48a5dfb0317b4a6c1446e385a816f03622df5228c8a76",
    "transactionHash": "0x1167653fff0f141c1fc0291838b8ad18f6325e17afb97a60eedcb5ff6d4b5427",
    "logs": [],
    "blockNumber": 34678519,
    "cumulativeGasUsed": "2292505",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2627c9fa14fa5cb6e37bf26f5785fa8b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlyMightyCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownInputParameter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"variation\",\"type\":\"uint8\"}],\"name\":\"getAdvancedProductionTileBonusByVariation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArmyStunDurationByJoiningBattleAtAttackingSide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArmyStunDurationPerRobberyMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBattleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"buildingTypeId\",\"type\":\"bytes32\"}],\"name\":\"getBasicProductionBuildingCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBattleDurationLosingArmyStunMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBattleDurationWinningArmyStunMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuildingTokenTransferThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuildingTypeIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCaptureTileDurationPerTile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"regionTier\",\"type\":\"uint256\"}],\"name\":\"getChanceForTileWithBonusByRegionTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceTypeId\",\"type\":\"bytes32\"}],\"name\":\"getCorruptionIndexByResource\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCultistUnitTypeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCultistsNoDestructionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCultistsPerRegionMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCultistsSummonDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameResources\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"resourceTypeId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRegistry.GameResource[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameUnits\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"unitTypeId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRegistry.GameUnit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialCaptureProsperityBasicValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialCaptureProsperityPerTileValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialCorruptionIndexAmountPerRegionTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialCultistsAmountPerRegionTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManeuverDurationStunMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxAdvancedProductionTileBuff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxAllowedRobberyMultiplierIncreaseValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxAllowedUnitsToBuyPerTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxAllowedWorkersToBuyPerTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tileBonusType\",\"type\":\"uint8\"}],\"name\":\"getMaxCapturedTilesForSettlement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCultistsPerRegion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxRegionTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSettlementsPerRegion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBattleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumUserSettlementsCountInNeighboringRegionRequiredToIncludeRegion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNecessaryProsperityPercentForClaimingTileCapture\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewSettlementPriceIncreaseMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewSettlementStartingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextCaptureProsperityBasicThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextCaptureProsperityPerTileThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProductionTicksInSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"unitTypeId\",\"type\":\"bytes32\"}],\"name\":\"getProsperityForUnitLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"regionTier\",\"type\":\"uint256\"}],\"name\":\"getRegionInclusionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"regionTier\",\"type\":\"uint256\"}],\"name\":\"getRegionOwnerSettlementPurchasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceTypeId\",\"type\":\"bytes32\"}],\"name\":\"getResourceWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRobberyPointsPerDamageMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceTypeId\",\"type\":\"bytes32\"}],\"name\":\"getRobberyPointsToResourceMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettlementPayToDecreaseCorruptionIndexPenaltyMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettlementPriceMultiplierPerIncreasedRegionTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStunDurationMultiplierOfCancelledSecretManeuver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTileCaptureCancellationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToTreasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"variation\",\"type\":\"uint8\"}],\"name\":\"getUnitBattleMultiplierTileBonusByVariation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnitHiringFortHpMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"unitTypeId\",\"type\":\"bytes32\"}],\"name\":\"getUnitPoolType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"unitTypeId\",\"type\":\"bytes32\"}],\"name\":\"getUnitPriceDropByUnitTypeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnitPriceIncreaseForEachUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"unitTypeId\",\"type\":\"bytes32\"}],\"name\":\"getUnitResourceUsagePer1SecondOfDecreasedManeuverDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"unitTypeId\",\"type\":\"bytes32\"}],\"name\":\"getUnitStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offenseStage1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defenceStage1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offenseStage2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defenceStage2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"siegePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"siegeSupport\",\"type\":\"uint256\"}],\"internalType\":\"struct IRegistry.UnitStats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnitTypeIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"buildingTypeId\",\"type\":\"bytes32\"}],\"name\":\"getWorkerCapacityCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorkerPriceDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorkerPriceIncreaseForEachWorker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"unitTypeId\",\"type\":\"bytes32\"}],\"name\":\"getWorkersForUnitLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_globalMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settlementStartingPrice\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mightyCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMightyCreator\",\"type\":\"address\"}],\"name\":\"setMightyCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worldAssetFactoryAddress\",\"type\":\"address\"}],\"name\":\"setWorldAssetFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementStartingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldAssetFactory\",\"outputs\":[{\"internalType\":\"contract IWorldAssetFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"getAdvancedProductionTileBonusByVariation(uint8)\":{\"details\":\"Used to determine tile bonus by tile bonus variation\",\"params\":{\"tileBonusVariation\":\"Tile bonus variation\"},\"returns\":{\"_0\":\"Building type id\",\"_1\":\"Capacity amount multiplier\"}},\"getArmyStunDurationByJoiningBattleAtAttackingSide()\":{\"details\":\"Used to determine stun duration army will receive by joining battle at attacking side\",\"returns\":{\"_0\":\"Stun duration\"}},\"getArmyStunDurationPerRobberyMultiplier()\":{\"details\":\"Used in army siege modification\",\"returns\":{\"_0\":\"Army stun duration per robbery multiplier\"}},\"getBaseBattleDuration()\":{\"details\":\"Used internally to determine how long battle will last\",\"returns\":{\"_0\":\"Base battle duration\"}},\"getBasicProductionBuildingCoefficient(bytes32)\":{\"details\":\"used for internal calculation of production result\",\"params\":{\"buildingTypeId\":\"Building type id\"},\"returns\":{\"_0\":\"Basic production building coefficient\"}},\"getBattleDurationLosingArmyStunMultiplier()\":{\"details\":\"Used internally to determine how long stun will last after army lost the battle\",\"returns\":{\"_0\":\"Battle duration losing army stun multiplier\"}},\"getBattleDurationWinningArmyStunMultiplier()\":{\"details\":\"Used internally to determine how long stun will last after army won the battle\",\"returns\":{\"_0\":\"Battle duration winning army stun multiplier\"}},\"getBuildingTokenTransferThresholdPercent()\":{\"details\":\"Used to determine is building token transfer allowed based on treasury percent\",\"returns\":{\"_0\":\"Building token transfer threshold percent\"}},\"getBuildingTypeIds()\":{\"details\":\"Used internally to determine which buildings will be created on placing settlement\",\"returns\":{\"_0\":\"Building type ids\"}},\"getCaptureTileDurationPerTile()\":{\"details\":\"Used to capture tile duration calculation\",\"returns\":{\"_0\":\"Capture tile duration per tile\"}},\"getChanceForTileWithBonusByRegionTier(uint256)\":{\"details\":\"Used to determine whether tile has bonus or not\",\"params\":{\"regionTier\":\"Region tier\"},\"returns\":{\"_0\":\"Chance for tile with bonus (in 1e18 precision)\"}},\"getCorruptionIndexByResource(bytes32)\":{\"details\":\"Used for calculation of how much corruptionIndex increased/decreased\",\"params\":{\"resourceTypeId\":\"Resource type id\"},\"returns\":{\"_0\":\"Amount of corruptionIndex per 1 resource (both are in 1e18 precision)\"}},\"getCultistUnitTypeId()\":{\"details\":\"Determines type of unit in cultists army\",\"returns\":{\"_0\":\"Cultists unit type id\"}},\"getCultistsNoDestructionDelay()\":{\"details\":\"Used to determine if destruction is available or not\",\"returns\":{\"_0\":\"No destruction interval duration (in seconds)\"}},\"getCultistsPerRegionMultiplier()\":{\"details\":\"Used to determine amount of cultists that have to be present for world destruction\",\"returns\":{\"_0\":\"Value of cultists per region\"}},\"getCultistsSummonDelay()\":{\"details\":\"Used to determine is cultists can be re-summoned\",\"returns\":{\"_0\":\"Cultists summon delay (in seconds)\"}},\"getGameResources()\":{\"details\":\"Used internally to determine upgrade costs and providing initial resources for settlement owner based on his tier\",\"params\":{\"resources\":\"Game resources\"}},\"getGameUnits()\":{\"details\":\"Used internally in many places where interaction with units is necessary\",\"returns\":{\"_0\":\"Game units\"}},\"getGlobalMultiplier()\":{\"details\":\"Used everywhere, where time is involved. Essentially determines game speed\",\"returns\":{\"_0\":\"Global multiplier\"}},\"getInitialCaptureProsperityBasicValue()\":{\"details\":\"Used to determine if new bid on captured tile is possible\",\"returns\":{\"_0\":\"Initial capture prosperity basic value\"}},\"getInitialCaptureProsperityPerTileValue()\":{\"details\":\"Used to determine if new bid on captured tile is possible\",\"returns\":{\"_0\":\"Initial capture prosperity per tile value\"}},\"getInitialCorruptionIndexAmountPerRegionTier()\":{\"details\":\"Used in region activation and region tier increase handler\",\"returns\":{\"_0\":\"Initial corruptionIndex amount\"}},\"getInitialCultistsAmountPerRegionTier()\":{\"details\":\"Used in region activation\",\"returns\":{\"_0\":\"Initial cultists amount\"}},\"getManeuverDurationStunMultiplier()\":{\"details\":\"Used internally to determine how long stun will last after armies' maneuver\",\"returns\":{\"_0\":\"Maneuver duration stun multiplier\"}},\"getMaxAdvancedProductionTileBuff()\":{\"details\":\"Used for determination advanced production multiplier\",\"returns\":{\"_0\":\"Max potential advanced production from tile buff\"}},\"getMaxAllowedRobberyMultiplierIncreaseValue()\":{\"details\":\"Used in army siege modification\",\"returns\":{\"_0\":\"Max allowed robbery multiplier increase value\"}},\"getMaxAllowedUnitsToBuyPerTransaction()\":{\"details\":\"Limit specified in order to limit potential price overflows (value is returned in 1e18 precision)\",\"returns\":{\"_0\":\"Max allowed units to buy\"}},\"getMaxAllowedWorkersToBuyPerTransaction()\":{\"details\":\"Limit specified in order to limit potential price overflows (value is returned in 1e18 precision)\",\"returns\":{\"_0\":\"Max allowed workers to buy\"}},\"getMaxCapturedTilesForSettlement(uint8)\":{\"details\":\"Used to determine whether settlement can initiate tile capture\",\"params\":{\"tileBonusType\":\"Tile bonus type\"},\"returns\":{\"_0\":\"Max captured tiles for settlement with this bonus type\"}},\"getMaxCultistsPerRegion()\":{\"details\":\"Used to determine how many cultists will be summoned\",\"returns\":{\"_0\":\"Maximum amount of cultists\"}},\"getMaxRegionTier()\":{\"details\":\"Used in validation in region tier increase\",\"returns\":{\"_0\":\"Max region tier\"}},\"getMaxSettlementsPerRegion()\":{\"details\":\"Cultists does not count (so +1 with cultists)\",\"returns\":{\"_0\":\"Max settlements that can be placed in one region\"}},\"getMinimumBattleDuration()\":{\"details\":\"Used to determine battle duration ignoring current world multiplier\",\"returns\":{\"_0\":\"Minimum battle duration\"}},\"getMinimumUserSettlementsCountInNeighboringRegionRequiredToIncludeRegion()\":{\"details\":\"Used to determine whether region can be included or not\",\"returns\":{\"_0\":\"Minimum user settlements count\"}},\"getNecessaryProsperityPercentForClaimingTileCapture()\":{\"details\":\"Used to determine if tile claim is possible\",\"returns\":{\"_0\":\"Necessary prosperity percent for claiming tile capture\"}},\"getNewSettlementPriceIncreaseMultiplier()\":{\"details\":\"Used to determine new settlement purchase price (in 1e18 precision)\",\"returns\":{\"_0\":\"New settlement price increase multiplier\"}},\"getNewSettlementStartingPrice()\":{\"details\":\"Used to determine how much base price for first settlement will be\",\"returns\":{\"_0\":\"New settlement starting price\"}},\"getNextCaptureProsperityBasicThreshold()\":{\"details\":\"Used to determine if new bid on captured tile is possible\",\"returns\":{\"_0\":\"Next capture prosperity basic threshold\"}},\"getNextCaptureProsperityPerTileThreshold()\":{\"details\":\"Used to determine if new bid on captured tile is possible\",\"returns\":{\"_0\":\"Next capture prosperity per tile threshold\"}},\"getProductionTicksInSecond()\":{\"details\":\"Used for production calculation\",\"returns\":{\"_0\":\"Amount of production ticks\"}},\"getProsperityForUnitLiquidation(bytes32)\":{\"details\":\"Used internally to calculate how much prosperity will be given\",\"returns\":{\"_0\":\"Prosperity amount per one unit (in 1e18 precision)\"}},\"getRegionInclusionPrice(uint256)\":{\"details\":\"Used to determine amount of token to be taken from msg.sender in order to include region\",\"params\":{\"regionTier\":\"Region tier\"},\"returns\":{\"_0\":\"Region inclusion price\"}},\"getRegionOwnerSettlementPurchasePercent(uint256)\":{\"details\":\"Used to determine amount of tokens to be sent to region owner when another user buys settlement in his region\",\"params\":{\"regionTier\":\"Region tier\"},\"returns\":{\"_0\":\"Percent (in 1e18 precision)\"}},\"getResourceWeight(bytes32)\":{\"details\":\"Used for calculation how much prosperity will be produced by resource in treasury\",\"params\":{\"resourceTypeId\":\"Resource type id\"},\"returns\":{\"_0\":\"Resource weight (in 1e0 precision)\"}},\"getRobberyPointsPerDamageMultiplier()\":{\"details\":\"Used for determination how much robbery points will be given\",\"returns\":{\"_0\":\"Robbery points per damage multiplier (in 1e18 precision)\"}},\"getRobberyPointsToResourceMultiplier(bytes32)\":{\"details\":\"Used in calculation how many resources can be exchanged for robbery points\",\"params\":{\"resourceTypeId\":\"Resource type id\"},\"returns\":{\"_0\":\"Robbery point multiplier (in 1e18 precision)\"}},\"getSettlementPayToDecreaseCorruptionIndexPenaltyMultiplier()\":{\"details\":\"Used to determine how much corruptionIndex penalty settlement will endure whenever its corruptionIndex is lowered by paying to reward pool\",\"returns\":{\"_0\":\"Penalty multiplier\"}},\"getSettlementPriceMultiplierPerIncreasedRegionTier()\":{\"details\":\"Used in calculation of new settlement price\",\"returns\":{\"_0\":\"Settlement price multiplier per increased region tier\"}},\"getStunDurationMultiplierOfCancelledSecretManeuver()\":{\"details\":\"Used in calculation of stun duration during cancelling secret maneuver\",\"returns\":{\"_0\":\"Stun multiplier of cancelled secret maneuver\"}},\"getTileCaptureCancellationFee()\":{\"details\":\"Used to determine how much prosperity has to be given in order to cancel tile capture\",\"returns\":{\"_0\":\"Tile capture cancellation fee\"}},\"getToTreasuryPercent()\":{\"details\":\"Determines how much of buildings production will go to treasury (if not full)\",\"params\":{\"toTreasuryPercent\":\"Production to treasury percent (in 1e18 precision, where 1e18 is 100%)\"}},\"getUnitBattleMultiplierTileBonusByVariation(uint8)\":{\"details\":\"Used to determine tile bonus by tile bonus variation\",\"params\":{\"tileBonusVariation\":\"Tile bonus variation\"},\"returns\":{\"_0\":\"Unit type id\",\"_1\":\"Unit battle multiplier\"}},\"getUnitHiringFortHpMultiplier()\":{\"details\":\"Used to determine how much units in army can be presented based on its current fort hp and this parameter\",\"returns\":{\"_0\":\"Unit hiring fort hp multiplier\"}},\"getUnitPoolType(bytes32)\":{\"details\":\"Used to determine which implementation of unit pool to use for provided unit type\",\"params\":{\"unitTypeId\":\"Unit type id\"},\"returns\":{\"_0\":\"Unit pool type\"}},\"getUnitPriceDropByUnitTypeId(bytes32)\":{\"details\":\"Used for determination of current unit pool price\",\"params\":{\"unitTypeId\":\"Unit type id\"},\"returns\":{\"_0\":\"Numerator\",\"_1\":\"Denominator\"}},\"getUnitPriceIncreaseForEachUnit()\":{\"details\":\"Used for determination of unit price\",\"returns\":{\"_0\":\"Numerator\",\"_1\":\"Denominator\"}},\"getUnitResourceUsagePer1SecondOfDecreasedManeuverDuration(bytes32)\":{\"details\":\"Used internally to calculate army's maneuver speed\",\"params\":{\"unitTypeId\":\"Unit type id\"},\"returns\":{\"_0\":\"Amount of resource to spend per unit per 1 second of decreased maneuver duration (in 1e18 precision)\"}},\"getUnitStats(bytes32)\":{\"details\":\"Used everywhere, where game logic based on unit stats\",\"params\":{\"unitTypeId\":\"Unit type id\"},\"returns\":{\"_0\":\"Unit stats\"}},\"getUnitTypeIds()\":{\"details\":\"Used internally in many places where interaction with units is necessary\",\"returns\":{\"_0\":\"Unit type ids\"}},\"getWorkerCapacityCoefficient(bytes32)\":{\"details\":\"Used for internal calculation of max workers for each building\",\"params\":{\"buildingTypeId\":\"Building type id\"},\"returns\":{\"_0\":\"Worker capacity coefficient\"}},\"getWorkerPriceDrop()\":{\"details\":\"Used for determination of current workers pool price\",\"returns\":{\"_0\":\"Numerator\",\"_1\":\"Denominator\"}},\"getWorkerPriceIncreaseForEachWorker()\":{\"details\":\"Used for determination of worker price\",\"returns\":{\"_0\":\"Numerator\",\"_1\":\"Denominator\"}},\"getWorkersForUnitLiquidation(bytes32)\":{\"details\":\"Used internally to calculate how much workers will be given\",\"returns\":{\"_0\":\"Workers amount per one unit (in 1e18 precision)\"}},\"init(uint256,uint256)\":{\"details\":\"Called by address which created current instance\",\"params\":{\"globalMultiplier\":\"Global multiplier\",\"settlementStartingPrice\":\"Settlement starting price\"}},\"setMightyCreator(address)\":{\"details\":\"Even though function is opened, it can be called only by mightyCreator\",\"params\":{\"newMightyCreator\":\"New mighty creator\"}},\"setWorldAssetFactory(address)\":{\"details\":\"Even though function is opened, it can be called only by mightyCreator\",\"params\":{\"worldAssetFactoryAddress\":\"World asset factory address\"}}},\"stateVariables\":{\"globalMultiplier\":{\"details\":\"Immutable, initialized on the registry creation\"},\"mightyCreator\":{\"details\":\"Immutable, initialized on the registry creation\"},\"settlementStartingPrice\":{\"details\":\"Immutable, initialized on the registry creation\"},\"worldAssetFactory\":{\"details\":\"During new world asset creation process registry is asked for factory contract\"}},\"version\":1},\"userdoc\":{\"errors\":{\"OnlyMightyCreator()\":[{\"notice\":\"Thrown when attempting to call action which can only be called by mighty creator\"}],\"UnknownInputParameter()\":[{\"notice\":\"Thrown when attempting to call function by providing unknown parameter\"}]},\"kind\":\"user\",\"methods\":{\"getAdvancedProductionTileBonusByVariation(uint8)\":{\"notice\":\"Returns advanced production tile bonus by variation\"},\"getArmyStunDurationByJoiningBattleAtAttackingSide()\":{\"notice\":\"Returns stun duration army will receive by joining battle at attacking side\"},\"getArmyStunDurationPerRobberyMultiplier()\":{\"notice\":\"Returns army stun duration per one point of added robbery multiplier\"},\"getBaseBattleDuration()\":{\"notice\":\"Returns base battle duration\"},\"getBasicProductionBuildingCoefficient(bytes32)\":{\"notice\":\"Calculates basic production building coefficient\"},\"getBattleDurationLosingArmyStunMultiplier()\":{\"notice\":\"Returns battle duration losing army stun multiplier\"},\"getBattleDurationWinningArmyStunMultiplier()\":{\"notice\":\"Returns battle duration winning army stun multiplier\"},\"getBuildingTokenTransferThresholdPercent()\":{\"notice\":\"Returns building token transfer threshold percent\"},\"getBuildingTypeIds()\":{\"notice\":\"Returns game building type ids\"},\"getCaptureTileDurationPerTile()\":{\"notice\":\"Returns capture tile duration per each tile in distance from settlement to selected tile\"},\"getChanceForTileWithBonusByRegionTier(uint256)\":{\"notice\":\"Returns chance for tile with bonus by region tier\"},\"getCorruptionIndexByResource(bytes32)\":{\"notice\":\"Returns corruptionIndex by resource type id\"},\"getCultistUnitTypeId()\":{\"notice\":\"Returns unit type id of cultists army\"},\"getCultistsNoDestructionDelay()\":{\"notice\":\"Returns interval duration where world is not destructible after recent cultists summon\"},\"getCultistsPerRegionMultiplier()\":{\"notice\":\"Returns value of cultists per region which determines cultists threshold for world destruction\"},\"getCultistsSummonDelay()\":{\"notice\":\"Returns cultists summon delay\"},\"getGameResources()\":{\"notice\":\"Returns game resources\"},\"getGameUnits()\":{\"notice\":\"Returns game units\"},\"getGlobalMultiplier()\":{\"notice\":\"Returns global multiplier\"},\"getInitialCaptureProsperityBasicValue()\":{\"notice\":\"Returns initial capture prosperity basic value\"},\"getInitialCaptureProsperityPerTileValue()\":{\"notice\":\"Returns initial capture prosperity per tile value\"},\"getInitialCorruptionIndexAmountPerRegionTier()\":{\"notice\":\"Returns initial corruptionIndex amount per region tier\"},\"getInitialCultistsAmountPerRegionTier()\":{\"notice\":\"Returns initial cultists amount per region tier\"},\"getManeuverDurationStunMultiplier()\":{\"notice\":\"Returns maneuver duration stun multiplier\"},\"getMaxAdvancedProductionTileBuff()\":{\"notice\":\"Returns max potential advanced production buff gain from capturing tiles\"},\"getMaxAllowedRobberyMultiplierIncreaseValue()\":{\"notice\":\"Returns max allowed robbery multiplier increase value\"},\"getMaxAllowedUnitsToBuyPerTransaction()\":{\"notice\":\"Returns max allowed units to buy per transaction\"},\"getMaxAllowedWorkersToBuyPerTransaction()\":{\"notice\":\"Returns max allowed workers to buy per transaction\"},\"getMaxCapturedTilesForSettlement(uint8)\":{\"notice\":\"Returns max captured tiles for settlement\"},\"getMaxCultistsPerRegion()\":{\"notice\":\"Returns maximum amount of cultists that can be present in region\"},\"getMaxRegionTier()\":{\"notice\":\"Returns max region tier\"},\"getMaxSettlementsPerRegion()\":{\"notice\":\"Returns max settlements that can be placed in one region\"},\"getMinimumBattleDuration()\":{\"notice\":\"Returns minimum battle duration\"},\"getMinimumUserSettlementsCountInNeighboringRegionRequiredToIncludeRegion()\":{\"notice\":\"Returns minimum user settlements count in neighboring region required to include region\"},\"getNecessaryProsperityPercentForClaimingTileCapture()\":{\"notice\":\"Returns percent of prosperity that has to be in settlement for claiming captured tile\"},\"getNewSettlementPriceIncreaseMultiplier()\":{\"notice\":\"Returns new settlement price increase multiplier\"},\"getNewSettlementStartingPrice()\":{\"notice\":\"Returns new settlement starting price in settlements market\"},\"getNextCaptureProsperityBasicThreshold()\":{\"notice\":\"Returns next capture prosperity basic threshold\"},\"getNextCaptureProsperityPerTileThreshold()\":{\"notice\":\"Returns next capture prosperity per tile threshold\"},\"getProductionTicksInSecond()\":{\"notice\":\"Returns amount of production ticks\"},\"getProsperityForUnitLiquidation(bytes32)\":{\"notice\":\"Returns how much prosperity will be given for provided unit type id\"},\"getRegionInclusionPrice(uint256)\":{\"notice\":\"Returns region inclusion price\"},\"getRegionOwnerSettlementPurchasePercent(uint256)\":{\"notice\":\"Returns region owner settlement purchase percent\"},\"getResourceWeight(bytes32)\":{\"notice\":\"Returns resource weight\"},\"getRobberyPointsPerDamageMultiplier()\":{\"notice\":\"Returns robbery points per damage multiplier\"},\"getRobberyPointsToResourceMultiplier(bytes32)\":{\"notice\":\"Returns robbery point multiplier by provided resource type id\"},\"getSettlementPayToDecreaseCorruptionIndexPenaltyMultiplier()\":{\"notice\":\"Returns settlement pay to decrease corruptionIndex penalty multiplier\"},\"getSettlementPriceMultiplierPerIncreasedRegionTier()\":{\"notice\":\"Returns settlement price multiplier per increased region tier\"},\"getStunDurationMultiplierOfCancelledSecretManeuver()\":{\"notice\":\"Returns stun duration multiplier of cancelled secret maneuver\"},\"getTileCaptureCancellationFee()\":{\"notice\":\"Returns tile capture cancellation fee\"},\"getToTreasuryPercent()\":{\"notice\":\"Returns production to treasury percent\"},\"getUnitBattleMultiplierTileBonusByVariation(uint8)\":{\"notice\":\"Returns unit battle multiplier tile bonus by variation\"},\"getUnitHiringFortHpMultiplier()\":{\"notice\":\"Returns unit hiring fort hp multiplier\"},\"getUnitPoolType(bytes32)\":{\"notice\":\"Returns unit pool type by unit type id\"},\"getUnitPriceDropByUnitTypeId(bytes32)\":{\"notice\":\"Returns unit pool price drop per second for provided unit type id (value returned as numerator and denominator)\"},\"getUnitPriceIncreaseForEachUnit()\":{\"notice\":\"Returns unit price increase in unit pool for each extra unit to buy (value returned as numerator and denominator)\"},\"getUnitResourceUsagePer1SecondOfDecreasedManeuverDuration(bytes32)\":{\"notice\":\"Returns how much resource unit can take from treasury to reduce maneuver duration\"},\"getUnitStats(bytes32)\":{\"notice\":\"Returns unit stats by provided unit type\"},\"getUnitTypeIds()\":{\"notice\":\"Returns game unit type ids\"},\"getWorkerCapacityCoefficient(bytes32)\":{\"notice\":\"Calculates worker capacity coefficient for provided building type id\"},\"getWorkerPriceDrop()\":{\"notice\":\"Returns workers pool price drop per second, provided as numerator and denominator\"},\"getWorkerPriceIncreaseForEachWorker()\":{\"notice\":\"Returns worker pool price drop per second for each worker (value returned as numerator and denominator)\"},\"getWorkersForUnitLiquidation(bytes32)\":{\"notice\":\"Returns how much workers will be given for provided unit type id\"},\"globalMultiplier()\":{\"notice\":\"Global multiplier\"},\"init(uint256,uint256)\":{\"notice\":\"Proxy initializer\"},\"mightyCreator()\":{\"notice\":\"An address which can configure/reconfigure current game\"},\"setMightyCreator(address)\":{\"notice\":\"Sets new mighty creator\"},\"setWorldAssetFactory(address)\":{\"notice\":\"Sets provided address as world asset factory contract\"},\"settlementStartingPrice()\":{\"notice\":\"Settlement starting price\"},\"worldAssetFactory()\":{\"notice\":\"World asset factory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Registry.sol\":\"Registry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":40},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/const/GameAssetTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n// Group types\\r\\nbytes32 constant ARMY_GROUP_TYPE_ID = keccak256(bytes((\\\"army\\\")));\\r\\nbytes32 constant ERA_GROUP_TYPE_ID = keccak256(bytes((\\\"era\\\")));\\r\\nbytes32 constant WORKERS_POOL_GROUP_TYPE_ID = keccak256(bytes(\\\"workersPool\\\"));\\r\\nbytes32 constant UNITS_POOL_GROUP_TYPE_ID = keccak256(bytes(\\\"unitsPool\\\"));\\r\\nbytes32 constant SETTLEMENT_MARKET_GROUP_TYPE_ID = keccak256(bytes(\\\"settlementsMarket\\\"));\\r\\nbytes32 constant BATTLE_GROUP_TYPE_ID = keccak256(bytes(\\\"battle\\\"));\\r\\nbytes32 constant REGION_GROUP_TYPE_ID = keccak256(bytes(\\\"region\\\"));\\r\\nbytes32 constant SETTLEMENT_GROUP_TYPE_ID = keccak256(bytes(\\\"settlement\\\"));\\r\\nbytes32 constant TILE_CAPTURING_SYSTEM_GROUP_TYPE_ID = keccak256(bytes(\\\"tileCapturingSystem\\\"));\\r\\nbytes32 constant PROSPERITY_GROUP_TYPE_ID = keccak256(bytes(\\\"prosperity\\\"));\\r\\nbytes32 constant WORKERS_GROUP_TYPE_ID = keccak256(bytes(\\\"workers\\\"));\\r\\nbytes32 constant RESOURCE_GROUP_TYPE_ID = keccak256(bytes(\\\"resource\\\"));\\r\\nbytes32 constant UNITS_GROUP_TYPE_ID = keccak256(bytes(\\\"units\\\"));\\r\\nbytes32 constant BUILDING_GROUP_TYPE_ID = keccak256(bytes(\\\"building\\\"));\\r\\nbytes32 constant SIEGE_GROUP_TYPE_ID = keccak256(bytes(\\\"siege\\\"));\\r\\n\\r\\n// Asset types\\r\\n\\r\\n// Basic type\\r\\nbytes32 constant BASIC_TYPE_ID = keccak256(bytes(\\\"BASIC\\\"));\\r\\n\\r\\n// Settlement type\\r\\nbytes32 constant CULTISTS_SETTLEMENT_TYPE_ID = keccak256(bytes(\\\"CULTISTS\\\"));\\r\\n\\r\\n// Unit pool types\\r\\nbytes32 constant INGOTS_UNIT_POOL_TYPE_ID = keccak256(bytes(\\\"INGOTS_UNIT_POOL\\\"));\\r\\nbytes32 constant WORKERS_UNIT_POOL_TYPE_ID = keccak256(bytes(\\\"WORKERS_UNIT_POOL\\\"));\\r\\n\\r\\n// Resource types\\r\\nbytes32 constant FOOD_TYPE_ID = keccak256(bytes(\\\"FOOD\\\"));\\r\\nbytes32 constant WOOD_TYPE_ID = keccak256(bytes(\\\"WOOD\\\"));\\r\\nbytes32 constant ORE_TYPE_ID = keccak256(bytes(\\\"ORE\\\"));\\r\\nbytes32 constant INGOT_TYPE_ID = keccak256(bytes(\\\"INGOT\\\"));\\r\\nbytes32 constant HEALTH_TYPE_ID = keccak256(bytes(\\\"HEALTH\\\"));\\r\\n\\r\\n// Building types\\r\\nbytes32 constant FARM_TYPE_ID = keccak256(bytes(\\\"FARM\\\"));\\r\\nbytes32 constant LUMBERMILL_TYPE_ID = keccak256(bytes(\\\"LUMBERMILL\\\"));\\r\\nbytes32 constant MINE_TYPE_ID = keccak256(bytes(\\\"MINE\\\"));\\r\\nbytes32 constant SMITHY_TYPE_ID = keccak256(bytes(\\\"SMITHY\\\"));\\r\\nbytes32 constant FORT_TYPE_ID = keccak256(bytes(\\\"FORT\\\"));\\r\\n\\r\\n// Unit types\\r\\nbytes32 constant WARRIOR_TYPE_ID = keccak256(bytes(\\\"WARRIOR\\\"));\\r\\nbytes32 constant ARCHER_TYPE_ID = keccak256(bytes(\\\"ARCHER\\\"));\\r\\nbytes32 constant HORSEMAN_TYPE_ID = keccak256(bytes(\\\"HORSEMAN\\\"));\\r\\n\",\"keccak256\":\"0x15fa14145d2da8ab7c9774768d235a0fb12f363b9fb490253cb894be3d4c3a84\",\"license\":\"MIT\"},\"contracts/core/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./assets/IWorldAssetFactory.sol\\\";\\r\\n\\r\\n/// @title Registry interface\\r\\n/// @notice Functions related to current game configuration\\r\\ninterface IRegistry {\\r\\n    struct GameResource {\\r\\n        string tokenName;\\r\\n        string tokenSymbol;\\r\\n        bytes32 resourceTypeId;\\r\\n    }\\r\\n\\r\\n    struct GameUnit {\\r\\n        string tokenName;\\r\\n        string tokenSymbol;\\r\\n        bytes32 unitTypeId;\\r\\n    }\\r\\n\\r\\n    struct UnitStats {\\r\\n        uint256 offenseStage1;\\r\\n        uint256 defenceStage1;\\r\\n        uint256 offenseStage2;\\r\\n        uint256 defenceStage2;\\r\\n        uint256 siegePower;\\r\\n        uint256 siegeSupport;\\r\\n    }\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice An address which can configure/reconfigure current game\\r\\n    /// @dev Immutable, initialized on the registry creation\\r\\n    function mightyCreator() external view returns (address);\\r\\n\\r\\n    /// @notice World asset factory\\r\\n    /// @dev During new world asset creation process registry is asked for factory contract\\r\\n    function worldAssetFactory() external view returns (IWorldAssetFactory);\\r\\n\\r\\n    /// @notice Global multiplier\\r\\n    /// @dev Immutable, initialized on the registry creation\\r\\n    function globalMultiplier() external view returns (uint256);\\r\\n\\r\\n    /// @notice Settlement starting price\\r\\n    /// @dev Immutable, initialized on the registry creation\\r\\n    function settlementStartingPrice() external view returns (uint256);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by mighty creator\\r\\n    error OnlyMightyCreator();\\r\\n\\r\\n    /// @notice Thrown when attempting to call function by providing unknown parameter\\r\\n    error UnknownInputParameter();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Proxy initializer\\r\\n    /// @dev Called by address which created current instance\\r\\n    /// @param globalMultiplier Global multiplier\\r\\n    /// @param settlementStartingPrice Settlement starting price\\r\\n    function init(\\r\\n        uint256 globalMultiplier,\\r\\n        uint256 settlementStartingPrice\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Sets new mighty creator\\r\\n    /// @dev Even though function is opened, it can be called only by mightyCreator\\r\\n    /// @param newMightyCreator New mighty creator\\r\\n    function setMightyCreator(address newMightyCreator) external;\\r\\n\\r\\n    /// @notice Sets provided address as world asset factory contract\\r\\n    /// @dev Even though function is opened, it can be called only by mightyCreator\\r\\n    /// @param worldAssetFactoryAddress World asset factory address\\r\\n    function setWorldAssetFactory(address worldAssetFactoryAddress) external;\\r\\n\\r\\n    /// @notice Calculates worker capacity coefficient for provided building type id\\r\\n    /// @dev Used for internal calculation of max workers for each building\\r\\n    /// @param buildingTypeId Building type id\\r\\n    /// @return workerCapacityCoefficient Worker capacity coefficient\\r\\n    function getWorkerCapacityCoefficient(bytes32 buildingTypeId) external pure returns (uint256 workerCapacityCoefficient);\\r\\n\\r\\n    /// @notice Calculates basic production building coefficient\\r\\n    /// @dev used for internal calculation of production result\\r\\n    /// @param buildingTypeId Building type id\\r\\n    /// @return basicProductionBuildingCoefficient Basic production building coefficient\\r\\n    function getBasicProductionBuildingCoefficient(bytes32 buildingTypeId) external pure returns (uint256 basicProductionBuildingCoefficient);\\r\\n\\r\\n    /// @notice Returns corruptionIndex by resource type id\\r\\n    /// @dev Used for calculation of how much corruptionIndex increased/decreased\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    /// @return corruptionIndex Amount of corruptionIndex per 1 resource (both are in 1e18 precision)\\r\\n    function getCorruptionIndexByResource(bytes32 resourceTypeId) external pure returns (uint256 corruptionIndex);\\r\\n\\r\\n    /// @notice Returns resource weight\\r\\n    /// @dev Used for calculation how much prosperity will be produced by resource in treasury\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    /// @return resourceWeight Resource weight (in 1e0 precision)\\r\\n    function getResourceWeight(bytes32 resourceTypeId) external pure returns (uint256 resourceWeight);\\r\\n\\r\\n    /// @notice Returns robbery points per damage multiplier\\r\\n    /// @dev Used for determination how much robbery points will be given\\r\\n    /// @return robberyPointsPerDamageMultiplier Robbery points per damage multiplier (in 1e18 precision)\\r\\n    function getRobberyPointsPerDamageMultiplier() external pure returns (uint256 robberyPointsPerDamageMultiplier);\\r\\n\\r\\n    /// @notice Returns robbery point multiplier by provided resource type id\\r\\n    /// @dev Used in calculation how many resources can be exchanged for robbery points\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    /// @return robberyPointsToResourceMultiplier Robbery point multiplier (in 1e18 precision)\\r\\n    function getRobberyPointsToResourceMultiplier(bytes32 resourceTypeId) external view returns (uint256 robberyPointsToResourceMultiplier);\\r\\n\\r\\n    /// @notice Returns global multiplier\\r\\n    /// @dev Used everywhere, where time is involved. Essentially determines game speed\\r\\n    /// @return globalMultiplier Global multiplier\\r\\n    function getGlobalMultiplier() external view returns (uint256 globalMultiplier);\\r\\n\\r\\n    /// @notice Returns unit stats by provided unit type\\r\\n    /// @dev Used everywhere, where game logic based on unit stats\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return unitStats Unit stats\\r\\n    function getUnitStats(bytes32 unitTypeId) external pure returns (UnitStats memory unitStats);\\r\\n\\r\\n    /// @notice Returns production to treasury percent\\r\\n    /// @dev Determines how much of buildings production will go to treasury (if not full)\\r\\n    /// @param toTreasuryPercent Production to treasury percent (in 1e18 precision, where 1e18 is 100%)\\r\\n    function getToTreasuryPercent() external pure returns (uint256 toTreasuryPercent);\\r\\n\\r\\n    /// @notice Returns base battle duration\\r\\n    /// @dev Used internally to determine how long battle will last\\r\\n    /// @return baseBattleDuration Base battle duration\\r\\n    function getBaseBattleDuration() external view returns (uint256 baseBattleDuration);\\r\\n\\r\\n    /// @notice Returns battle duration losing army stun multiplier\\r\\n    /// @dev Used internally to determine how long stun will last after army lost the battle\\r\\n    /// @return battleDurationLosingArmyStunMultiplier Battle duration losing army stun multiplier\\r\\n    function getBattleDurationLosingArmyStunMultiplier() external pure returns (uint256 battleDurationLosingArmyStunMultiplier);\\r\\n\\r\\n    /// @notice Returns battle duration winning army stun multiplier\\r\\n    /// @dev Used internally to determine how long stun will last after army won the battle\\r\\n    /// @return battleDurationWinningArmyStunMultiplier Battle duration winning army stun multiplier\\r\\n    function getBattleDurationWinningArmyStunMultiplier() external pure returns (uint256 battleDurationWinningArmyStunMultiplier);\\r\\n\\r\\n    /// @notice Returns maneuver duration stun multiplier\\r\\n    /// @dev Used internally to determine how long stun will last after armies' maneuver\\r\\n    /// @return maneuverDurationStunMultiplier Maneuver duration stun multiplier\\r\\n    function getManeuverDurationStunMultiplier() external pure returns (uint256 maneuverDurationStunMultiplier);\\r\\n\\r\\n    /// @notice Returns game building type ids\\r\\n    /// @dev Used internally to determine which buildings will be created on placing settlement\\r\\n    /// @return buildingTypeIds Building type ids\\r\\n    function getBuildingTypeIds() external view returns (bytes32[] memory buildingTypeIds);\\r\\n\\r\\n    /// @notice Returns game unit type ids\\r\\n    /// @dev Used internally in many places where interaction with units is necessary\\r\\n    /// @return unitTypeIds Unit type ids\\r\\n    function getUnitTypeIds() external view returns (bytes32[] memory unitTypeIds);\\r\\n\\r\\n    /// @notice Returns game resources\\r\\n    /// @dev Used internally to determine upgrade costs and providing initial resources for settlement owner based on his tier\\r\\n    /// @param resources Game resources\\r\\n    function getGameResources() external view returns (GameResource[] memory resources);\\r\\n\\r\\n    /// @notice Returns game units\\r\\n    /// @dev Used internally in many places where interaction with units is necessary\\r\\n    /// @return units Game units\\r\\n    function getGameUnits() external view returns (GameUnit[] memory units);\\r\\n\\r\\n    /// @notice Returns unit hiring fort hp multiplier\\r\\n    /// @dev Used to determine how much units in army can be presented based on its current fort hp and this parameter\\r\\n    /// @return unitHiringFortHpMultiplier Unit hiring fort hp multiplier\\r\\n    function getUnitHiringFortHpMultiplier() external pure returns (uint256 unitHiringFortHpMultiplier);\\r\\n\\r\\n    /// @notice Returns how much resource unit can take from treasury to reduce maneuver duration\\r\\n    /// @dev Used internally to calculate army's maneuver speed\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return unitResourceUsagePer1SecondOfDecreasedManeuverDuration Amount of resource to spend per unit per 1 second of decreased maneuver duration (in 1e18 precision)\\r\\n    function getUnitResourceUsagePer1SecondOfDecreasedManeuverDuration(bytes32 unitTypeId) external pure returns (uint256 unitResourceUsagePer1SecondOfDecreasedManeuverDuration);\\r\\n\\r\\n    /// @notice Returns how much prosperity will be given for provided unit type id\\r\\n    /// @dev Used internally to calculate how much prosperity will be given\\r\\n    /// @return prosperityPerUnit Prosperity amount per one unit (in 1e18 precision)\\r\\n    function getProsperityForUnitLiquidation(bytes32 unitTypeId) external pure returns (uint256 prosperityPerUnit);\\r\\n\\r\\n    /// @notice Returns how much workers will be given for provided unit type id\\r\\n    /// @dev Used internally to calculate how much workers will be given\\r\\n    /// @return workersPerUnit Workers amount per one unit (in 1e18 precision)\\r\\n    function getWorkersForUnitLiquidation(bytes32 unitTypeId) external pure returns (uint256 workersPerUnit);\\r\\n\\r\\n    /// @notice Returns cultists summon delay\\r\\n    /// @dev Used to determine is cultists can be re-summoned\\r\\n    /// @return cultistsSummonDelay Cultists summon delay (in seconds)\\r\\n    function getCultistsSummonDelay() external pure returns (uint256 cultistsSummonDelay);\\r\\n\\r\\n    /// @notice Returns max settlements that can be placed in one region\\r\\n    /// @dev Cultists does not count (so +1 with cultists)\\r\\n    /// @return maxSettlementsPerRegion Max settlements that can be placed in one region\\r\\n    function getMaxSettlementsPerRegion() external pure returns (uint256 maxSettlementsPerRegion);\\r\\n\\r\\n    /// @notice Returns interval duration where world is not destructible after recent cultists summon\\r\\n    /// @dev Used to determine if destruction is available or not\\r\\n    /// @return cultistsNoDestructionDelay No destruction interval duration (in seconds)\\r\\n    function getCultistsNoDestructionDelay() external pure returns (uint256 cultistsNoDestructionDelay);\\r\\n\\r\\n    /// @notice Returns value of cultists per region which determines cultists threshold for world destruction\\r\\n    /// @dev Used to determine amount of cultists that have to be present for world destruction\\r\\n    /// @return cultistsPerRegionMultiplier Value of cultists per region\\r\\n    function getCultistsPerRegionMultiplier() external pure returns (uint256 cultistsPerRegionMultiplier);\\r\\n\\r\\n    /// @notice Returns maximum amount of cultists that can be present in region\\r\\n    /// @dev Used to determine how many cultists will be summoned\\r\\n    /// @return maxCultistsPerRegion Maximum amount of cultists\\r\\n    function getMaxCultistsPerRegion() external pure returns (uint256 maxCultistsPerRegion);\\r\\n\\r\\n    /// @notice Returns unit type id of cultists army\\r\\n    /// @dev Determines type of unit in cultists army\\r\\n    /// @return cultistUnitTypeId Cultists unit type id\\r\\n    function getCultistUnitTypeId() external pure returns (bytes32 cultistUnitTypeId);\\r\\n\\r\\n    /// @notice Returns building token transfer threshold percent\\r\\n    /// @dev Used to determine is building token transfer allowed based on treasury percent\\r\\n    /// @return buildingTokenTransferThresholdPercent Building token transfer threshold percent\\r\\n    function getBuildingTokenTransferThresholdPercent() external pure returns (uint256 buildingTokenTransferThresholdPercent);\\r\\n\\r\\n    /// @notice Returns new settlement starting price in settlements market\\r\\n    /// @dev Used to determine how much base price for first settlement will be\\r\\n    /// @return newSettlementStartingPrice New settlement starting price\\r\\n    function getNewSettlementStartingPrice() external view returns (uint256 newSettlementStartingPrice);\\r\\n\\r\\n    /// @notice Returns amount of production ticks\\r\\n    /// @dev Used for production calculation\\r\\n    /// @return ticks Amount of production ticks\\r\\n    function getProductionTicksInSecond() external view returns (uint256 ticks);\\r\\n\\r\\n    /// @notice Returns unit price increase in unit pool for each extra unit to buy (value returned as numerator and denominator)\\r\\n    /// @dev Used for determination of unit price\\r\\n    /// @return numerator Numerator\\r\\n    /// @return denominator Denominator\\r\\n    function getUnitPriceIncreaseForEachUnit() external pure returns (uint256 numerator, uint256 denominator);\\r\\n\\r\\n    /// @notice Returns max allowed units to buy per transaction\\r\\n    /// @dev Limit specified in order to limit potential price overflows (value is returned in 1e18 precision)\\r\\n    /// @return maxAllowedUnitsToBuy Max allowed units to buy\\r\\n    function getMaxAllowedUnitsToBuyPerTransaction() external pure returns (uint256 maxAllowedUnitsToBuy);\\r\\n\\r\\n    /// @notice Returns unit pool price drop per second for provided unit type id (value returned as numerator and denominator)\\r\\n    /// @dev Used for determination of current unit pool price\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return numerator Numerator\\r\\n    /// @return denominator Denominator\\r\\n    function getUnitPriceDropByUnitTypeId(bytes32 unitTypeId) external pure returns (uint256 numerator, uint256 denominator);\\r\\n\\r\\n    /// @notice Returns worker pool price drop per second for each worker (value returned as numerator and denominator)\\r\\n    /// @dev Used for determination of worker price\\r\\n    /// @return numerator Numerator\\r\\n    /// @return denominator Denominator\\r\\n    function getWorkerPriceIncreaseForEachWorker() external pure returns (uint256 numerator, uint256 denominator);\\r\\n\\r\\n    /// @notice Returns max allowed workers to buy per transaction\\r\\n    /// @dev Limit specified in order to limit potential price overflows (value is returned in 1e18 precision)\\r\\n    /// @return maxAllowedWorkersToBuy Max allowed workers to buy\\r\\n    function getMaxAllowedWorkersToBuyPerTransaction() external pure returns (uint256 maxAllowedWorkersToBuy);\\r\\n\\r\\n    /// @notice Returns workers pool price drop per second, provided as numerator and denominator\\r\\n    /// @dev Used for determination of current workers pool price\\r\\n    /// @return numerator Numerator\\r\\n    /// @return denominator Denominator\\r\\n    function getWorkerPriceDrop() external pure returns (uint256 numerator, uint256 denominator);\\r\\n\\r\\n    /// @notice Returns max potential advanced production buff gain from capturing tiles\\r\\n    /// @dev Used for determination advanced production multiplier\\r\\n    /// @return maxAdvancedProductionTileBuff Max potential advanced production from tile buff\\r\\n    function getMaxAdvancedProductionTileBuff() external pure returns (uint256 maxAdvancedProductionTileBuff);\\r\\n\\r\\n    /// @notice Returns capture tile duration per each tile in distance from settlement to selected tile\\r\\n    /// @dev Used to capture tile duration calculation\\r\\n    /// @return captureTileDurationPerTile Capture tile duration per tile\\r\\n    function getCaptureTileDurationPerTile() external pure returns (uint256 captureTileDurationPerTile);\\r\\n\\r\\n    /// @notice Returns next capture prosperity basic threshold\\r\\n    /// @dev Used to determine if new bid on captured tile is possible\\r\\n    /// @return nextCaptureProsperityBasicThreshold Next capture prosperity basic threshold\\r\\n    function getNextCaptureProsperityBasicThreshold() external pure returns (uint256 nextCaptureProsperityBasicThreshold);\\r\\n\\r\\n    /// @notice Returns next capture prosperity per tile threshold\\r\\n    /// @dev Used to determine if new bid on captured tile is possible\\r\\n    /// @return nextCaptureProsperityPerTileThreshold Next capture prosperity per tile threshold\\r\\n    function getNextCaptureProsperityPerTileThreshold() external pure returns (uint256 nextCaptureProsperityPerTileThreshold);\\r\\n\\r\\n    /// @notice Returns percent of prosperity that has to be in settlement for claiming captured tile\\r\\n    /// @dev Used to determine if tile claim is possible\\r\\n    /// @return necessaryProsperityPercentForClaimingTileCapture Necessary prosperity percent for claiming tile capture\\r\\n    function getNecessaryProsperityPercentForClaimingTileCapture() external pure returns (uint256 necessaryProsperityPercentForClaimingTileCapture);\\r\\n\\r\\n    /// @notice Returns tile capture cancellation fee\\r\\n    /// @dev Used to determine how much prosperity has to be given in order to cancel tile capture\\r\\n    /// @return tileCaptureCancellationFee Tile capture cancellation fee\\r\\n    function getTileCaptureCancellationFee() external pure returns (uint256 tileCaptureCancellationFee);\\r\\n\\r\\n    /// @notice Returns max captured tiles for settlement\\r\\n    /// @dev Used to determine whether settlement can initiate tile capture\\r\\n    /// @param tileBonusType Tile bonus type\\r\\n    /// @return maxCapturedTilesForSettlement Max captured tiles for settlement with this bonus type\\r\\n    function getMaxCapturedTilesForSettlement(uint8 tileBonusType) external pure returns (uint256 maxCapturedTilesForSettlement);\\r\\n\\r\\n    /// @notice Returns advanced production tile bonus by variation\\r\\n    /// @dev Used to determine tile bonus by tile bonus variation\\r\\n    /// @param tileBonusVariation Tile bonus variation\\r\\n    /// @return buildingTypeId Building type id\\r\\n    /// @return capacityAmountMultiplier Capacity amount multiplier\\r\\n    function getAdvancedProductionTileBonusByVariation(uint8 tileBonusVariation) external pure returns (bytes32 buildingTypeId, uint256 capacityAmountMultiplier);\\r\\n\\r\\n    /// @notice Returns unit battle multiplier tile bonus by variation\\r\\n    /// @dev Used to determine tile bonus by tile bonus variation\\r\\n    /// @param tileBonusVariation Tile bonus variation\\r\\n    /// @return unitTypeId Unit type id\\r\\n    /// @return unitBattleMultiplier Unit battle multiplier\\r\\n    function getUnitBattleMultiplierTileBonusByVariation(uint8 tileBonusVariation) external pure returns (bytes32 unitTypeId, uint256 unitBattleMultiplier);\\r\\n\\r\\n    /// @notice Returns max region tier\\r\\n    /// @dev Used in validation in region tier increase\\r\\n    /// @return maxRegionTier Max region tier\\r\\n    function getMaxRegionTier() external pure returns (uint256 maxRegionTier);\\r\\n\\r\\n    /// @notice Returns initial cultists amount per region tier\\r\\n    /// @dev Used in region activation\\r\\n    /// @return initialCultistsAmount Initial cultists amount\\r\\n    function getInitialCultistsAmountPerRegionTier() external pure returns (uint256 initialCultistsAmount);\\r\\n\\r\\n    /// @notice Returns initial corruptionIndex amount per region tier\\r\\n    /// @dev Used in region activation and region tier increase handler\\r\\n    /// @return initialCorruptionIndexAmount Initial corruptionIndex amount\\r\\n    function getInitialCorruptionIndexAmountPerRegionTier() external pure returns (uint256 initialCorruptionIndexAmount);\\r\\n\\r\\n    /// @notice Returns settlement price multiplier per increased region tier\\r\\n    /// @dev Used in calculation of new settlement price\\r\\n    /// @return settlementPriceMultiplierPerIncreasedRegionTier Settlement price multiplier per increased region tier\\r\\n    function getSettlementPriceMultiplierPerIncreasedRegionTier() external pure returns (uint256 settlementPriceMultiplierPerIncreasedRegionTier);\\r\\n\\r\\n    /// @notice Returns stun duration multiplier of cancelled secret maneuver\\r\\n    /// @dev Used in calculation of stun duration during cancelling secret maneuver\\r\\n    /// @return stunMultiplierOfCancelledSecretManeuver Stun multiplier of cancelled secret maneuver\\r\\n    function getStunDurationMultiplierOfCancelledSecretManeuver() external pure returns (uint256 stunMultiplierOfCancelledSecretManeuver);\\r\\n\\r\\n    /// @notice Returns max allowed robbery multiplier increase value\\r\\n    /// @dev Used in army siege modification\\r\\n    /// @return maxAllowedRobberyMultiplierIncreaseValue Max allowed robbery multiplier increase value\\r\\n    function getMaxAllowedRobberyMultiplierIncreaseValue() external pure returns (uint256 maxAllowedRobberyMultiplierIncreaseValue);\\r\\n\\r\\n    /// @notice Returns army stun duration per one point of added robbery multiplier\\r\\n    /// @dev Used in army siege modification\\r\\n    /// @return armyStunDurationPerRobberyMultiplier Army stun duration per robbery multiplier\\r\\n    function getArmyStunDurationPerRobberyMultiplier() external pure returns (uint256 armyStunDurationPerRobberyMultiplier);\\r\\n\\r\\n    /// @notice Returns chance for tile with bonus by region tier\\r\\n    /// @dev Used to determine whether tile has bonus or not\\r\\n    /// @param regionTier Region tier\\r\\n    /// @return chanceForTileWithBonus Chance for tile with bonus (in 1e18 precision)\\r\\n    function getChanceForTileWithBonusByRegionTier(uint256 regionTier) external pure returns (uint256 chanceForTileWithBonus);\\r\\n\\r\\n    /// @notice Returns region inclusion price\\r\\n    /// @dev Used to determine amount of token to be taken from msg.sender in order to include region\\r\\n    /// @param regionTier Region tier\\r\\n    /// @return regionInclusionPrice Region inclusion price\\r\\n    function getRegionInclusionPrice(uint256 regionTier) external pure returns (uint256 regionInclusionPrice);\\r\\n\\r\\n    /// @notice Returns region owner settlement purchase percent\\r\\n    /// @dev Used to determine amount of tokens to be sent to region owner when another user buys settlement in his region\\r\\n    /// @param regionTier Region tier\\r\\n    /// @return percent Percent (in 1e18 precision)\\r\\n    function getRegionOwnerSettlementPurchasePercent(uint256 regionTier) external pure returns (uint256 percent);\\r\\n\\r\\n    /// @notice Returns unit pool type by unit type id\\r\\n    /// @dev Used to determine which implementation of unit pool to use for provided unit type\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return unitPoolType Unit pool type\\r\\n    function getUnitPoolType(bytes32 unitTypeId) external pure returns (bytes32 unitPoolType);\\r\\n\\r\\n    /// @notice Returns stun duration army will receive by joining battle at attacking side\\r\\n    /// @dev Used to determine stun duration army will receive by joining battle at attacking side\\r\\n    /// @return stunDuration Stun duration\\r\\n    function getArmyStunDurationByJoiningBattleAtAttackingSide() external pure returns (uint256 stunDuration);\\r\\n\\r\\n    /// @notice Returns initial capture prosperity basic value\\r\\n    /// @dev Used to determine if new bid on captured tile is possible\\r\\n    /// @return initialCaptureProsperityBasicValue Initial capture prosperity basic value\\r\\n    function getInitialCaptureProsperityBasicValue() external pure returns (uint256 initialCaptureProsperityBasicValue);\\r\\n\\r\\n    /// @notice Returns initial capture prosperity per tile value\\r\\n    /// @dev Used to determine if new bid on captured tile is possible\\r\\n    /// @return initialCaptureProsperityPerTileValue Initial capture prosperity per tile value\\r\\n    function getInitialCaptureProsperityPerTileValue() external pure returns (uint256 initialCaptureProsperityPerTileValue);\\r\\n\\r\\n    /// @notice Returns minimum user settlements count in neighboring region required to include region\\r\\n    /// @dev Used to determine whether region can be included or not\\r\\n    /// @return minimumUserSettlementsCount Minimum user settlements count\\r\\n    function getMinimumUserSettlementsCountInNeighboringRegionRequiredToIncludeRegion() external pure returns (uint256 minimumUserSettlementsCount);\\r\\n\\r\\n    /// @notice Returns settlement pay to decrease corruptionIndex penalty multiplier\\r\\n    /// @dev Used to determine how much corruptionIndex penalty settlement will endure whenever its corruptionIndex is lowered by paying to reward pool\\r\\n    /// @return penaltyMultiplier Penalty multiplier\\r\\n    function getSettlementPayToDecreaseCorruptionIndexPenaltyMultiplier() external pure returns (uint256 penaltyMultiplier);\\r\\n\\r\\n    /// @notice Returns minimum battle duration\\r\\n    /// @dev Used to determine battle duration ignoring current world multiplier\\r\\n    /// @return minimumBattleDuration Minimum battle duration\\r\\n    function getMinimumBattleDuration() external pure returns (uint256 minimumBattleDuration);\\r\\n\\r\\n    /// @notice Returns new settlement price increase multiplier\\r\\n    /// @dev Used to determine new settlement purchase price (in 1e18 precision)\\r\\n    /// @return newSettlementPriceIncreaseMultiplier New settlement price increase multiplier\\r\\n    function getNewSettlementPriceIncreaseMultiplier() external pure returns (uint256 newSettlementPriceIncreaseMultiplier);\\r\\n}\\r\\n\",\"keccak256\":\"0xfb8f3200b4836a8fd3144e5b22addf4946b35789ac8909cd8e09fb6b9d763935\",\"license\":\"MIT\"},\"contracts/core/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"./IRegistry.sol\\\";\\r\\nimport \\\"../const/GameAssetTypes.sol\\\";\\r\\n\\r\\ncontract Registry is IRegistry, Initializable {\\r\\n    /// @inheritdoc IRegistry\\r\\n    address public override mightyCreator;\\r\\n    /// @inheritdoc IRegistry\\r\\n    IWorldAssetFactory public override worldAssetFactory;\\r\\n    /// @inheritdoc IRegistry\\r\\n    uint256 public override globalMultiplier;\\r\\n    /// @inheritdoc IRegistry\\r\\n    uint256 public override settlementStartingPrice;\\r\\n\\r\\n    /// @dev Only mighty creator modifier\\r\\n    /// @dev Modifier is calling internal function in order to reduce contract size\\r\\n    modifier onlyMightyCreator() {\\r\\n        _onlyMightyCreator();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function init(\\r\\n        uint256 _globalMultiplier,\\r\\n        uint256 _settlementStartingPrice\\r\\n    ) public override initializer {\\r\\n        mightyCreator = msg.sender;\\r\\n        globalMultiplier = _globalMultiplier;\\r\\n        settlementStartingPrice = _settlementStartingPrice;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function setMightyCreator(address newMightyCreator) public override onlyMightyCreator {\\r\\n        mightyCreator = newMightyCreator;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function setWorldAssetFactory(address worldAssetFactoryAddress) public override onlyMightyCreator {\\r\\n        worldAssetFactory = IWorldAssetFactory(worldAssetFactoryAddress);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getGlobalMultiplier() public view override returns (uint256) {\\r\\n        return globalMultiplier;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getUnitStats(bytes32 unitTypeId) public pure returns (UnitStats memory) {\\r\\n        if (unitTypeId == WARRIOR_TYPE_ID) {\\r\\n            return UnitStats({\\r\\n                offenseStage1: 0,\\r\\n                defenceStage1: 20,\\r\\n                offenseStage2: 5,\\r\\n                defenceStage2: 5,\\r\\n                siegePower: 11574074074074,//uint256(1e18 / 1 days),\\r\\n                siegeSupport: 23148148148148//2 * siegePower\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == ARCHER_TYPE_ID) {\\r\\n            return UnitStats({\\r\\n                offenseStage1: 5,\\r\\n                defenceStage1: 5,\\r\\n                offenseStage2: 0,\\r\\n                defenceStage2: 5,\\r\\n                siegePower: 11574074074074,//uint256(1e18 / 1 days),\\r\\n                siegeSupport: 23148148148148//2 * siegePower\\r\\n            });\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == HORSEMAN_TYPE_ID) {\\r\\n            return UnitStats({\\r\\n                offenseStage1: 0,\\r\\n                defenceStage1: 5,\\r\\n                offenseStage2: 5,\\r\\n                defenceStage2: 20,\\r\\n                siegePower: 11574074074074,//uint256(1e18 / 1 days),\\r\\n                siegeSupport: 23148148148148//2 * siegePower\\r\\n            });\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getRobberyPointsPerDamageMultiplier() public pure override returns (uint256) {\\r\\n        return 5e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getRobberyPointsToResourceMultiplier(bytes32 resourceTypeId) public view override returns (uint256) {\\r\\n        if (resourceTypeId == FOOD_TYPE_ID) {\\r\\n            return 1e18;\\r\\n        }\\r\\n\\r\\n        if (resourceTypeId == WOOD_TYPE_ID) {\\r\\n            return 1e18;\\r\\n        }\\r\\n\\r\\n        if (resourceTypeId == ORE_TYPE_ID) {\\r\\n            return 1e18;\\r\\n        }\\r\\n\\r\\n        if (resourceTypeId == INGOT_TYPE_ID) {\\r\\n            return 1e18;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getWorkerCapacityCoefficient(bytes32 buildingTypeId) public pure override returns (uint256) {\\r\\n        if (buildingTypeId == FARM_TYPE_ID) {\\r\\n            return 10e18;\\r\\n        }\\r\\n\\r\\n        if (buildingTypeId == LUMBERMILL_TYPE_ID) {\\r\\n            return 7e18;\\r\\n        }\\r\\n\\r\\n        if (buildingTypeId == MINE_TYPE_ID) {\\r\\n            return 5e18;\\r\\n        }\\r\\n\\r\\n        if (buildingTypeId == SMITHY_TYPE_ID) {\\r\\n            return 3e18;\\r\\n        }\\r\\n\\r\\n        if (buildingTypeId == FORT_TYPE_ID) {\\r\\n            return 5e18;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getBasicProductionBuildingCoefficient(bytes32 buildingTypeId) public pure override returns (uint256) {\\r\\n        if (buildingTypeId == FARM_TYPE_ID) {\\r\\n            return 0.5e18;\\r\\n        }\\r\\n\\r\\n        if (buildingTypeId == LUMBERMILL_TYPE_ID) {\\r\\n            return 0.43e18;\\r\\n        }\\r\\n\\r\\n        if (buildingTypeId == MINE_TYPE_ID) {\\r\\n            return 0.4e18;\\r\\n        }\\r\\n\\r\\n        if (buildingTypeId == SMITHY_TYPE_ID) {\\r\\n            return 0.33e18;\\r\\n        }\\r\\n\\r\\n        if (buildingTypeId == FORT_TYPE_ID) {\\r\\n            return 0.4e18;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getCorruptionIndexByResource(bytes32 resourceTypeId) public pure override returns (uint256) {\\r\\n        if (resourceTypeId == FOOD_TYPE_ID) {\\r\\n            return 0.3e18;\\r\\n        }\\r\\n\\r\\n        if (resourceTypeId == WOOD_TYPE_ID) {\\r\\n            return 1e18;\\r\\n        }\\r\\n\\r\\n        if (resourceTypeId == ORE_TYPE_ID) {\\r\\n            return 3e18;\\r\\n        }\\r\\n\\r\\n        if (resourceTypeId == INGOT_TYPE_ID) {\\r\\n            return 10e18;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getResourceWeight(bytes32 resourceTypeId) public pure override returns (uint256) {\\r\\n        if (resourceTypeId == FOOD_TYPE_ID) {\\r\\n            return 0.5e18;\\r\\n        }\\r\\n\\r\\n        if (resourceTypeId == WOOD_TYPE_ID) {\\r\\n            return 1e18;\\r\\n        }\\r\\n\\r\\n        if (resourceTypeId == ORE_TYPE_ID) {\\r\\n            return 2e18;\\r\\n        }\\r\\n\\r\\n        if (resourceTypeId == INGOT_TYPE_ID) {\\r\\n            return 3e18;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getToTreasuryPercent() public pure override returns (uint256) {\\r\\n        return 1e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getBaseBattleDuration() public pure override returns (uint256) {\\r\\n        return 18 hours;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getBattleDurationLosingArmyStunMultiplier() public pure override returns (uint256) {\\r\\n        return 0.665e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getBattleDurationWinningArmyStunMultiplier() public pure override returns (uint256) {\\r\\n        return 0.335e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getManeuverDurationStunMultiplier() public pure override returns (uint256) {\\r\\n        return 0.6e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getBuildingTypeIds() public pure override returns (bytes32[] memory) {\\r\\n        bytes32[] memory buildingTypeIds = new bytes32[](5);\\r\\n\\r\\n        buildingTypeIds[0] = FARM_TYPE_ID;\\r\\n        buildingTypeIds[1] = LUMBERMILL_TYPE_ID;\\r\\n        buildingTypeIds[2] = MINE_TYPE_ID;\\r\\n        buildingTypeIds[3] = SMITHY_TYPE_ID;\\r\\n        buildingTypeIds[4] = FORT_TYPE_ID;\\r\\n\\r\\n        return buildingTypeIds;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getGameResources() public pure override returns (GameResource[] memory) {\\r\\n        GameResource[] memory resources = new GameResource[](4);\\r\\n\\r\\n        resources[0] = GameResource(\\\"Mithraeum Food\\\", \\\"mFOOD\\\", FOOD_TYPE_ID);\\r\\n        resources[1] = GameResource(\\\"Mithraeum Wood\\\", \\\"mWOOD\\\", WOOD_TYPE_ID);\\r\\n        resources[2] = GameResource(\\\"Mithraeum Ore\\\", \\\"mORE\\\", ORE_TYPE_ID);\\r\\n        resources[3] = GameResource(\\\"Mithraeum Ingot\\\", \\\"mINGOT\\\", INGOT_TYPE_ID);\\r\\n\\r\\n        return resources;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getGameUnits() public pure override returns (GameUnit[] memory) {\\r\\n        GameUnit[] memory gameUnits = new GameUnit[](3);\\r\\n\\r\\n        gameUnits[0] = GameUnit(\\\"Mithraeum Warrior\\\", \\\"mWARRIOR\\\", WARRIOR_TYPE_ID);\\r\\n        gameUnits[1] = GameUnit(\\\"Mithraeum Archer\\\", \\\"mARCHER\\\", ARCHER_TYPE_ID);\\r\\n        gameUnits[2] = GameUnit(\\\"Mithraeum Horseman\\\", \\\"mHORSEMAN\\\", HORSEMAN_TYPE_ID);\\r\\n\\r\\n        return gameUnits;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getUnitTypeIds() public pure override returns (bytes32[] memory) {\\r\\n        GameUnit[] memory gameUnits = getGameUnits();\\r\\n        bytes32[] memory unitTypeIds = new bytes32[](gameUnits.length);\\r\\n\\r\\n        for (uint256 i = 0; i < unitTypeIds.length; i++) {\\r\\n            unitTypeIds[i] = gameUnits[i].unitTypeId;\\r\\n        }\\r\\n\\r\\n        return unitTypeIds;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getUnitHiringFortHpMultiplier() public pure override returns (uint256) {\\r\\n        return 5e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getUnitResourceUsagePer1SecondOfDecreasedManeuverDuration(bytes32 unitTypeId) public pure override returns (uint256) {\\r\\n        if (unitTypeId == WARRIOR_TYPE_ID) {\\r\\n            // 1e18 / 5 hours = irrational const\\r\\n            return 0.000055555e18;\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == ARCHER_TYPE_ID) {\\r\\n            // 1e18 / 20 hours = irrational const\\r\\n            return 0.000013888e18;\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == HORSEMAN_TYPE_ID) {\\r\\n            // 1e18 / 50 hours = irrational const\\r\\n            return 0.000005555e18;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getProsperityForUnitLiquidation(bytes32 unitTypeId) public pure override returns (uint256) {\\r\\n        if (unitTypeId == WARRIOR_TYPE_ID) {\\r\\n            return 0e18;\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == ARCHER_TYPE_ID) {\\r\\n            return 3e18;\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == HORSEMAN_TYPE_ID) {\\r\\n            return 4e18;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getWorkersForUnitLiquidation(bytes32 unitTypeId) public pure override returns (uint256) {\\r\\n        if (unitTypeId == WARRIOR_TYPE_ID) {\\r\\n            return 1e18;\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == ARCHER_TYPE_ID) {\\r\\n            return 0e18;\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == HORSEMAN_TYPE_ID) {\\r\\n            return 0e18;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getCultistsSummonDelay() public pure override returns (uint256) {\\r\\n        return 2 weeks;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getMaxSettlementsPerRegion() public pure override returns (uint256) {\\r\\n        return 40;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getCultistsNoDestructionDelay() public pure override returns (uint256) {\\r\\n        return 10 days;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getCultistsPerRegionMultiplier() public pure override returns (uint256) {\\r\\n        return 5000e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getMaxCultistsPerRegion() public pure override returns (uint256) {\\r\\n        return 10000e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getCultistUnitTypeId() public pure override returns (bytes32) {\\r\\n        return WARRIOR_TYPE_ID;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getBuildingTokenTransferThresholdPercent() public pure override returns (uint256) {\\r\\n        return 0.3e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getNewSettlementStartingPrice() public view override returns (uint256) {\\r\\n        return settlementStartingPrice;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getProductionTicksInSecond() public view override returns (uint256) {\\r\\n        return getMaxCultistsPerRegion() / 1e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getUnitPriceIncreaseForEachUnit() public pure override returns (uint256, uint256) {\\r\\n        return (1004, 1000);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getMaxAllowedUnitsToBuyPerTransaction() public pure override returns (uint256) {\\r\\n        return 5000e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getUnitPriceDropByUnitTypeId(bytes32 unitTypeId) public pure override returns (uint256, uint256) {\\r\\n        if (unitTypeId == ARCHER_TYPE_ID) {\\r\\n            //10% drop in 1 day (90% leftover)\\r\\n            return (9999987805503308, 10000000000000000);\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == HORSEMAN_TYPE_ID) {\\r\\n            //7% drop in 1 day (93% leftover)\\r\\n            return (9999991600617782, 10000000000000000);\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getWorkerPriceIncreaseForEachWorker() public pure override returns (uint256, uint256) {\\r\\n        return (1004, 1000);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getMaxAllowedWorkersToBuyPerTransaction() public pure override returns (uint256) {\\r\\n        return 5000e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getWorkerPriceDrop() public pure override returns (uint256, uint256) {\\r\\n        //7% drop in 1 day (93% leftover)\\r\\n        return (9999991600617782, 10000000000000000);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getMaxAdvancedProductionTileBuff() public pure override returns (uint256) {\\r\\n        return 1e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getCaptureTileDurationPerTile() public pure override returns (uint256) {\\r\\n        return 9 hours;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getNextCaptureProsperityBasicThreshold() public pure override returns (uint256) {\\r\\n        return 1.2e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getNextCaptureProsperityPerTileThreshold() public pure override returns (uint256) {\\r\\n        return 0.05e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getNecessaryProsperityPercentForClaimingTileCapture() public pure override returns (uint256) {\\r\\n        return 0.7e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getTileCaptureCancellationFee() public pure override returns (uint256) {\\r\\n        return 0.25e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getMaxCapturedTilesForSettlement(uint8 tileBonusType) public pure override returns (uint256) {\\r\\n        if (tileBonusType == 1) {\\r\\n            return 2;\\r\\n        }\\r\\n\\r\\n        if (tileBonusType == 2) {\\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getAdvancedProductionTileBonusByVariation(uint8 variation) public pure override returns (bytes32, uint256) {\\r\\n        if (variation == 0) {\\r\\n            return (FARM_TYPE_ID, 0.25e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 1) {\\r\\n            return (FARM_TYPE_ID, 0.4e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 2) {\\r\\n            return (LUMBERMILL_TYPE_ID, 0.3e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 3) {\\r\\n            return (LUMBERMILL_TYPE_ID, 0.6e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 4) {\\r\\n            return (MINE_TYPE_ID, 0.5e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 5) {\\r\\n            return (MINE_TYPE_ID, 0.8e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 6) {\\r\\n            return (SMITHY_TYPE_ID, 0.7e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 7) {\\r\\n            return (SMITHY_TYPE_ID, 1e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 8) {\\r\\n            return (FORT_TYPE_ID, 0.4e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 9) {\\r\\n            return (FORT_TYPE_ID, 0.6e18);\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getUnitBattleMultiplierTileBonusByVariation(uint8 variation) public pure override returns (bytes32, uint256) {\\r\\n        if (variation == 0) {\\r\\n            return (WARRIOR_TYPE_ID, 0.3e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 1) {\\r\\n            return (ARCHER_TYPE_ID, 0.5e18);\\r\\n        }\\r\\n\\r\\n        if (variation == 2) {\\r\\n            return (HORSEMAN_TYPE_ID, 1e18);\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getMaxRegionTier() public pure override returns (uint256) {\\r\\n        return 4;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getInitialCultistsAmountPerRegionTier() public pure override returns (uint256) {\\r\\n        return 1500e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getInitialCorruptionIndexAmountPerRegionTier() public pure override returns (uint256) {\\r\\n        return getInitialCultistsAmountPerRegionTier() * 5;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getSettlementPriceMultiplierPerIncreasedRegionTier() public pure override returns (uint256) {\\r\\n        return 2;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getStunDurationMultiplierOfCancelledSecretManeuver() public pure override returns (uint256) {\\r\\n        return 0.5e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getMaxAllowedRobberyMultiplierIncreaseValue() public pure override returns (uint256) {\\r\\n        return 3e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getArmyStunDurationPerRobberyMultiplier() public pure override returns (uint256) {\\r\\n        return 1 days;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getChanceForTileWithBonusByRegionTier(uint256 regionTier) public pure override returns (uint256) {\\r\\n        if (regionTier == 1) {\\r\\n            return 0.04e18;\\r\\n        }\\r\\n\\r\\n        if (regionTier == 2) {\\r\\n            return 0.08e18;\\r\\n        }\\r\\n\\r\\n        if (regionTier == 3) {\\r\\n            return 0.12e18;\\r\\n        }\\r\\n\\r\\n        if (regionTier == 4) {\\r\\n            return 0.15e18;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getRegionInclusionPrice(uint256 regionTier) public pure override returns (uint256) {\\r\\n        if (regionTier == 1) {\\r\\n            return 40000e18;\\r\\n        }\\r\\n\\r\\n        if (regionTier == 2) {\\r\\n            return 80000e18;\\r\\n        }\\r\\n\\r\\n        if (regionTier == 3) {\\r\\n            return 160000e18;\\r\\n        }\\r\\n\\r\\n        if (regionTier == 4) {\\r\\n            return 320000e18;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getRegionOwnerSettlementPurchasePercent(uint256 regionTier) public pure override returns (uint256) {\\r\\n        if (regionTier == 1) {\\r\\n            return 0.4e18;\\r\\n        }\\r\\n\\r\\n        if (regionTier == 2) {\\r\\n            return 0.2e18;\\r\\n        }\\r\\n\\r\\n        if (regionTier == 3) {\\r\\n            return 0.1e18;\\r\\n        }\\r\\n\\r\\n        if (regionTier == 4) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getUnitPoolType(bytes32 unitTypeId) public pure override returns (bytes32) {\\r\\n        if (unitTypeId == WARRIOR_TYPE_ID) {\\r\\n            return WORKERS_UNIT_POOL_TYPE_ID;\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == ARCHER_TYPE_ID) {\\r\\n            return INGOTS_UNIT_POOL_TYPE_ID;\\r\\n        }\\r\\n\\r\\n        if (unitTypeId == HORSEMAN_TYPE_ID) {\\r\\n            return INGOTS_UNIT_POOL_TYPE_ID;\\r\\n        }\\r\\n\\r\\n        revert UnknownInputParameter();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getArmyStunDurationByJoiningBattleAtAttackingSide() public pure override returns (uint256) {\\r\\n        return 12 hours;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getInitialCaptureProsperityBasicValue() public pure override returns (uint256) {\\r\\n        return 1e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getInitialCaptureProsperityPerTileValue() public pure override returns (uint256) {\\r\\n        return 0.25e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getMinimumUserSettlementsCountInNeighboringRegionRequiredToIncludeRegion() public pure override returns (uint256) {\\r\\n        return 20;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getSettlementPayToDecreaseCorruptionIndexPenaltyMultiplier() public pure override returns (uint256) {\\r\\n        return 0.5e18;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getMinimumBattleDuration() public pure override returns (uint256) {\\r\\n        return 10;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRegistry\\r\\n    function getNewSettlementPriceIncreaseMultiplier() public pure override returns (uint256) {\\r\\n        return 1.3e18;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows caller to be only mighty creator\\r\\n    function _onlyMightyCreator() internal view {\\r\\n        if (msg.sender != mightyCreator) revert OnlyMightyCreator();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x099ea39a4e9b5f966dff1ce6a87127bdfbba299c70107f07a7060a2d634e6308\",\"license\":\"MIT\"},\"contracts/core/assets/IWorldAssetFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/// @title Army factory interface\\r\\n/// @notice Contains instance creator function\\r\\ninterface IWorldAssetFactory {\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by world or world asset\\r\\n    error OnlyWorldOrWorldAsset();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Creates new world asset, sets it into the world and initializes it\\r\\n    /// @param worldAddress World address\\r\\n    /// @param eraNumber Era number\\r\\n    /// @param assetGroupId Asset group id\\r\\n    /// @param assetTypeId Asset type id\\r\\n    /// @param initParams Init params\\r\\n    /// @return worldAssetAddress World asset address\\r\\n    function create(\\r\\n        address worldAddress,\\r\\n        uint256 eraNumber,\\r\\n        bytes32 assetGroupId,\\r\\n        bytes32 assetTypeId,\\r\\n        bytes memory initParams\\r\\n    ) external returns (address worldAssetAddress);\\r\\n}\\r\\n\",\"keccak256\":\"0xd682f8efaf44d830e23277e9d50b3761db83f19d2f963c383b899df922c1e806\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612727806100206000396000f3fe608060405234801561001057600080fd5b50600436106103525760003560e01c80638dcbb205116101c0578063cbaad44111610100578063cbaad441146106df578063d13c422e146106f2578063d6dd049914610700578063d7ee90041461064a578063dbfb0ea114610707578063dcc6b96e1461071a578063ddc8381914610721578063e1b5c3ef14610734578063e7a76ce714610620578063e84959f2146105aa578063ece56a1a14610747578063f1a5c01d1461075a578063f20bebf414610768578063f515741314610771578063f644c0ce1461077a578063fb5c6df4146104cf578063fe9135f014610782578063ff614f4f1461078a57600080fd5b80638dcbb205146105fa5780638ed97a8c1461060d578063a476a6c314610620578063a53a3bb71461062e578063a5843f0814610637578063a6896cdb1461064a578063a7778ce014610658578063b8daaaeb14610665578063b99cb62c14610673578063bc2143e714610681578063bda2613914610689578063beaa602d14610698578063c15466dc146104cf578063c7388af4146106a1578063c7738b61146106a9578063c80134be146106bc578063c8923946146106cf57600080fd5b806357721c581161029657806357721c581461052f5780635a28acb0146105425780635c13c3bf146105575780635c724dbf1461055f578063616e009514610572578063657f17fd1461057a57806366fa9d24146105825780636795d4a01461059557806368e35ca01461059c5780636f3426da146105aa57806370a1859e146105b8578063746b537a146105c65780637496fc52146105d1578063781e0efe146105e45780637a893af5146105aa5780637e7d746e146105c657806381bfdebc146105b857806385142481146105ec57600080fd5b80630c451c20146103575780630de89b461461037d5780631dae2152146103925780632020e901146103a7578063205a7ec8146103cf578063250c3a10146103d65780632701e0d0146103e957806327153050146103f75780632e62598514610428578063302c7c4a1461045b57806335ba79891461046957806337a42b64146104c85780633afb0ebb146104cf5780633cdba936146104df578063413127ac146104f2578063426851b914610505578063569a52a51461051a575b600080fd5b61036a610365366004612323565b610793565b6040519081526020015b60405180910390f35b61039061038b36600461233c565b610871565b005b61039a61089b565b60405161037491906123f7565b6103ba6103b5366004612459565b610b98565b60408051928352602083019190915201610374565b602861036a565b61036a6103e4366004612323565b610ef7565b6729a2241af62c000061036a565b600054610410906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610374565b6040805180820190915260078152662ba0a92924a7a960c91b60209091015260008051602061269283398151915261036a565b670853a0d2313c000061036a565b61047c610477366004612323565b61109b565b6040516103749190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b600261036a565b69010f0cf064dd5920000061036a565b6103ba6104ed366004612323565b61123c565b61039061050036600461233c565b6112d7565b61050d611309565b604051610374919061247c565b662386f07b1c9936662386f26fc100006103ba565b61036a61053d366004612459565b611555565b61054a611585565b60405161037491906124d1565b617e9061036a565b61036a61056d366004612323565b61163b565b61054a611692565b61036a61180c565b61036a610590366004612323565b61182f565b600461036a565b670429d069189e000061036a565b670de0b6b3a764000061036a565b6706f05b59d3b2000061036a565b6103ec6103e86103ba565b61036a6105df366004612323565b6118ec565b60025461036a565b6710a741a46278000061036a565b61036a610608366004612323565b6119ee565b61036a61061b366004612323565b611a4b565b6703782dace9d9000061036a565b6212750061036a565b610390610645366004612515565b611bef565b674563918244f4000061036a565b66b1a2bc2ec5000061036a565b67093a8dfa07a2800061036a565b6709b6e64a8ec6000061036a565b61a8c061036a565b685150ae84a8cdf0000061036a565b61036a60025481565b60035461036a565b6103ba6106b7366004612459565b611d21565b61036a6106ca366004612323565b611e23565b69021e19e0c9bab240000061036a565b61036a6106ed366004612323565b611e89565b6704a628b99fc1800061036a565b600a61036a565b61036a610715366004612323565b611f4d565b601461036a565b61036a61072f366004612323565b6120d6565b61036a610742366004612323565b6121d8565b600154610410906001600160a01b031681565b67120a871cc002000061036a565b6201518061036a565b620d2f0061036a565b61036a6122da565b61fd2061036a565b61036a60035481565b6040805180820190915260078152662ba0a92924a7a960c91b602090910152600060008051602061265283398151915282016107d65750653286e80a5e00919050565b60408051808201909152600681526520a921a422a960d11b60209091015260008051602061261283398151915282016108165750650ca18d4e8000919050565b6040805180820190915260088152672427a929a2a6a0a760c11b6020909101526000805160206126728339815191528201610858575065050d5fcd3e00919050565b60405163ea3b0abb60e01b815260040160405180910390fd5b6108796122f0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60408051600480825260a0820190925260609160009190816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816108b75750506040805160a081018252600e606082019081526d135a5d1a1c98595d5b48119bdbd960921b608083015281528151808301835260058152641b5193d3d160da1b602080830191909152808301919091528251808401845260048152631193d3d160e21b9101527f2f6f5a261d6f4514c3f09a834720fe583c82f2ee4758ce9a45fbd67428e9f93d91810191909152815191925090829060009061098a5761098a61254d565b6020908102919091018101919091526040805160a081018252600e606082019081526d135a5d1a1c98595d5b4815dbdbd960921b608083015281528151808301835260058152641b55d3d3d160da1b818501528184015281518083018352600481526315d3d3d160e21b9301929092527f5f3d3bfd5b61198148275c178146c21eec5c5ab7e81758f3c651754ae3f1ed4290820152815182906001908110610a3457610a3461254d565b6020908102919091018101919091526040805160a081018252600d606082019081526c4d697468726165756d204f726560981b608083015281528151808301835260048152636d4f524560e01b81850152818401528151808301835260038152624f524560e81b9301929092527f9db51ceeef36d28f4a713ba944bdadb00e988c5676c92710eaf0e194efb4cb5590820152815182906002908110610adb57610adb61254d565b6020908102919091018101919091526040805160a081018252600f606082019081526e135a5d1a1c98595d5b48125b99dbdd608a1b608083015281528151808301835260068152651b525391d3d560d21b8185015281840152815180830183526005815264125391d3d560da1b9301929092527ff4d3d98b93a17290e7883bbc86b83d603b27efc328d7873b3fc648501d83e57290820152815182906003908110610b8857610b8861254d565b6020908102919091010152919050565b6000808260ff16600003610be15750506040805180820190915260048152634641524d60e01b602090910152506000805160206126b2833981519152906703782dace9d9000090565b8260ff16600103610c275750506040805180820190915260048152634641524d60e01b602090910152506000805160206126b28339815191529067058d15e17628000090565b8260ff16600203610c8557505060408051808201909152600a8152691315535091549352531360b21b602090910152507f6efa3da32b5b0a21cf9c6f5bc9edeb1d9e3a4b88cc5eb7b649f1e5029410165990670429d069189e000090565b8260ff16600303610ce357505060408051808201909152600a8152691315535091549352531360b21b602090910152507f6efa3da32b5b0a21cf9c6f5bc9edeb1d9e3a4b88cc5eb7b649f1e5029410165990670853a0d2313c000090565b8260ff16600403610d3b5750506040805180820190915260048152634d494e4560e01b602090910152507f458fc043506cc6fea16e7daa38390499ef978846d88dd78fe56678ac9de79444906706f05b59d3b2000090565b8260ff16600503610d935750506040805180820190915260048152634d494e4560e01b602090910152507f458fc043506cc6fea16e7daa38390499ef978846d88dd78fe56678ac9de7944490670b1a2bc2ec50000090565b8260ff16600603610ded575050604080518082019091526006815265534d4954485960d01b602090910152507fe8d22c09878b0ae66551f207dc5f243823c9e1989bc2d5dfab58fb1a93386fd2906709b6e64a8ec6000090565b8260ff16600703610e47575050604080518082019091526006815265534d4954485960d01b602090910152507fe8d22c09878b0ae66551f207dc5f243823c9e1989bc2d5dfab58fb1a93386fd290670de0b6b3a764000090565b8260ff16600803610e9f5750506040805180820190915260048152631193d49560e21b602090910152507f2911d5ca388af24ed7f391a4eb24469bc0fd8935cd73bb1075ca7e702a42eb199067058d15e17628000090565b8260ff166009036108585750506040805180820190915260048152631193d49560e21b602090910152507f2911d5ca388af24ed7f391a4eb24469bc0fd8935cd73bb1075ca7e702a42eb1990670853a0d2313c000090565b6040805180820190915260048152634641524d60e01b60209091015260007fea182adbe8a99c0376d68ae8663b1e572fb013df4142853d0efacd6d83e4a3f38201610f4b5750678ac7230489e80000919050565b60408051808201909152600a8152691315535091549352531360b21b6020909101527f9105c25cd4a4f5de306390a4361214e261c5b47733a14849b60e1afd6befe9a78201610fa35750676124fee993bc0000919050565b6040805180820190915260048152634d494e4560e01b6020909101527fba703fbcaf9339015e918255c7c6fb66106877b9277228701a99875362186bbc8201610ff55750674563918244f40000919050565b604080518082019091526006815265534d4954485960d01b6020909101527f172dd3f67874f5199aae0df823a0dbc7dc361e67643d2a2054a704e56cc7902e820161104957506729a2241af62c0000919050565b6040805180820190915260048152631193d49560e21b6020909101527fd6ee2a35c7750db1280c6e5b14dbb9643f0276ca328c44ef8a35818fd5bd14e782016108585750674563918244f40000919050565b6110d46040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805180820190915260078152662ba0a92924a7a960c91b602090910152600080516020612652833981519152820161114c576040518060c0016040528060008152602001601481526020016005815260200160058152602001650a86cc92e3da815260200165150d9925c7b48152509050919050565b60408051808201909152600681526520a921a422a960d11b60209091015260008051602061261283398151915282016111c3576040518060c0016040528060058152602001600581526020016000815260200160058152602001650a86cc92e3da815260200165150d9925c7b48152509050919050565b6040805180820190915260088152672427a929a2a6a0a760c11b6020909101526000805160206126728339815191528201610858576040518060c0016040528060008152602001600581526020016005815260200160148152602001650a86cc92e3da815260200165150d9925c7b48152509050919050565b60408051808201909152600681526520a921a422a960d11b602090910152600080600080516020612612833981519152830161128a5750662386ef98e7bf4c92662386f26fc1000092509050565b6040805180820190915260088152672427a929a2a6a0a760c11b60209091015260008051602061267283398151915283016108585750662386f07b1c993692662386f26fc1000092509050565b6112df6122f0565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6040805160038082526080820190925260609160009190816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816113255750506040805160a0810182526011606082019081527026b4ba343930b2bab6902bb0b93934b7b960791b6080830152815281518083018352600881526736aba0a92924a7a960c11b602080830191909152808301919091528251808401845260078152662ba0a92924a7a960c91b9101526000805160206126928339815191529181019190915281519192509082906000906113ef576113ef61254d565b6020908102919091018101919091526040805160a0810182526010606082019081526f26b4ba343930b2bab69020b931b432b960811b6080830152815281518083018352600781526636a0a921a422a960c91b818501528184015281518083018352600681526520a921a422a960d11b9301929092527f42de5fbfc07577d3e9942df95dd4e61cabcab8907d5d333240140b2999379e409082015281518290600190811061149f5761149f61254d565b6020908102919091018101919091526040805160a0810182526012606082019081527126b4ba343930b2bab6902437b939b2b6b0b760711b6080830152815281518083018352600981526836a427a929a2a6a0a760b91b81850152818401528151808301835260088152672427a929a2a6a0a760c11b9301929092527f89d5ee6f4fcb32fb3c151bc25e6bc320fec82ba89cb3b29d1969d907e0e6793990820152815182906002908110610b8857610b8861254d565b60008160ff1660010361156a57506002919050565b8160ff1660020361157d57506001919050565b506000919050565b60606000611591611309565b90506000815167ffffffffffffffff8111156115af576115af612537565b6040519080825280602002602001820160405280156115d8578160200160208202803683370190505b50905060005b8151811015611634578281815181106115f9576115f961254d565b6020026020010151604001518282815181106116175761161761254d565b60209081029190910101528061162c81612579565b9150506115de565b5092915050565b600081600103611654575067058d15e176280000919050565b8160020361166b57506702c68af0bb140000919050565b81600303611682575067016345785d8a0000919050565b8160040361085857506000919050565b60408051600580825260c08201909252606091600091906020820160a08036833750506040805180820190915260048152634641524d60e01b6020909101525080519091506000805160206126b28339815191529082906000906116f8576116f861254d565b6020026020010181815250506040518060400160405280600a8152602001691315535091549352531360b21b81525080519060200120816001815181106117415761174161254d565b602002602001018181525050604051806040016040528060048152602001634d494e4560e01b81525080519060200120816002815181106117845761178461254d565b60200260200101818152505060405180604001604052806006815260200165534d4954485960d01b81525080519060200120816003815181106117c9576117c961254d565b602002602001018181525050604051806040016040528060048152602001631193d49560e21b8152508051906020012081600481518110610b8857610b8861254d565b600061182a670de0b6b3a764000069021e19e0c9bab2400000612592565b905090565b6040805180820190915260078152662ba0a92924a7a960c91b602090910152600060008051602061265283398151915282016118745750670de0b6b3a7640000919050565b60408051808201909152600681526520a921a422a960d11b60209091015260008051602061261283398151915282016118af57506000919050565b6040805180820190915260088152672427a929a2a6a0a760c11b602090910152600080516020612672833981519152820161085857506000919050565b6040805180820190915260048152631193d3d160e21b60209091015260006000805160206126d2833981519152820161192e5750670429d069189e0000919050565b60408051808201909152600481526315d3d3d160e21b6020909101526000805160206125f2833981519152820161196e5750670de0b6b3a7640000919050565b6040805180820190915260038152624f524560e81b6020909101526000805160206125d283398151915282016119ad57506729a2241af62c0000919050565b604080518082019091526005815264125391d3d560da1b60209091015260008051602061263283398151915282016108585750678ac7230489e80000919050565b600081600103611a065750668e1bc9bf040000919050565b81600203611a1d575067011c37937e080000919050565b81600303611a3457506701aa535d3d0c0000919050565b816004036108585750670214e8348c4f0000919050565b6040805180820190915260048152634641524d60e01b60209091015260007fea182adbe8a99c0376d68ae8663b1e572fb013df4142853d0efacd6d83e4a3f38201611a9f57506706f05b59d3b20000919050565b60408051808201909152600a8152691315535091549352531360b21b6020909101527f9105c25cd4a4f5de306390a4361214e261c5b47733a14849b60e1afd6befe9a78201611af757506705f7aab8c56b0000919050565b6040805180820190915260048152634d494e4560e01b6020909101527fba703fbcaf9339015e918255c7c6fb66106877b9277228701a99875362186bbc8201611b49575067058d15e176280000919050565b604080518082019091526006815265534d4954485960d01b6020909101527f172dd3f67874f5199aae0df823a0dbc7dc361e67643d2a2054a704e56cc7902e8201611b9d5750670494654067e10000919050565b6040805180820190915260048152631193d49560e21b6020909101527fd6ee2a35c7750db1280c6e5b14dbb9643f0276ca328c44ef8a35818fd5bd14e78201610858575067058d15e176280000919050565b600054610100900460ff1615808015611c0f5750600054600160ff909116105b80611c295750303b158015611c29575060005460ff166001145b611c905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015611cb3576000805461ff0019166101001790555b6000805462010000600160b01b031916336201000002179055600283905560038290558015611d1c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000808260ff16600003611d6d5750506040805180820190915260078152662ba0a92924a7a960c91b6020909101525060008051602061269283398151915290670429d069189e000090565b8260ff16600103611dc757505060408051808201909152600681526520a921a422a960d11b602090910152507f42de5fbfc07577d3e9942df95dd4e61cabcab8907d5d333240140b2999379e40906706f05b59d3b2000090565b8260ff166002036108585750506040805180820190915260088152672427a929a2a6a0a760c11b602090910152507f89d5ee6f4fcb32fb3c151bc25e6bc320fec82ba89cb3b29d1969d907e0e6793990670de0b6b3a764000090565b600081600103611e3e5750690878678326eac9000000919050565b81600203611e5757506910f0cf064dd592000000919050565b81600303611e7057506921e19e0c9bab24000000919050565b8160040361085857506943c33c19375648000000919050565b6040805180820190915260078152662ba0a92924a7a960c91b60209091015260006000805160206126528339815191528201611ec757506000919050565b60408051808201909152600681526520a921a422a960d11b6020909101526000805160206126128339815191528201611f0957506729a2241af62c0000919050565b6040805180820190915260088152672427a929a2a6a0a760c11b60209091015260008051602061267283398151915282016108585750673782dace9d900000919050565b6040805180820190915260078152662ba0a92924a7a960c91b60209091015260006000805160206126528339815191528201611fd257505060408051808201909152601181527015d3d492d15494d7d553925517d413d3d3607a1b6020909101527f8f75178ea8b939732f30df87bf2b4d5864e1068291d6e7b65eb7efcdd75e570290565b60408051808201909152600681526520a921a422a960d11b602090910152600080516020612612833981519152820161205357505060408051808201909152601081526f125391d3d514d7d553925517d413d3d360821b6020909101527facde00cf82db2dd178c1275275df8e6a2355a26d2338720a6239578a1148b9f790565b6040805180820190915260088152672427a929a2a6a0a760c11b602090910152600080516020612672833981519152820161085857505060408051808201909152601081526f125391d3d514d7d553925517d413d3d360821b6020909101527facde00cf82db2dd178c1275275df8e6a2355a26d2338720a6239578a1148b9f790565b6040805180820190915260048152631193d3d160e21b60209091015260006000805160206126d283398151915282016121185750670de0b6b3a7640000919050565b60408051808201909152600481526315d3d3d160e21b6020909101526000805160206125f283398151915282016121585750670de0b6b3a7640000919050565b6040805180820190915260038152624f524560e81b6020909101526000805160206125d283398151915282016121975750670de0b6b3a7640000919050565b604080518082019091526005815264125391d3d560da1b60209091015260008051602061263283398151915282016108585750670de0b6b3a7640000919050565b6040805180820190915260048152631193d3d160e21b60209091015260006000805160206126d2833981519152820161221a57506706f05b59d3b20000919050565b60408051808201909152600481526315d3d3d160e21b6020909101526000805160206125f2833981519152820161225a5750670de0b6b3a7640000919050565b6040805180820190915260038152624f524560e81b6020909101526000805160206125d283398151915282016122995750671bc16d674ec80000919050565b604080518082019091526005815264125391d3d560da1b602090910152600080516020612632833981519152820161157d57506729a2241af62c0000919050565b600061182a685150ae84a8cdf0000060056125b4565b6000546201000090046001600160a01b031633146123215760405163d136afd560e01b815260040160405180910390fd5b565b60006020828403121561233557600080fd5b5035919050565b60006020828403121561234e57600080fd5b81356001600160a01b038116811461236557600080fd5b9392505050565b6000815180845260005b8181101561239257602081850181015186830182015201612376565b506000602082860101526020601f19601f83011685010191505092915050565b60008151606084526123c7606085018261236c565b9050602083015184820360208601526123e0828261236c565b915050604083015160408501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561244c57603f1988860301845261243a8583516123b2565b9450928501929085019060010161241e565b5092979650505050505050565b60006020828403121561246b57600080fd5b813560ff8116811461236557600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561244c57603f198886030184526124bf8583516123b2565b945092850192908501906001016124a3565b6020808252825182820181905260009190848201906040850190845b81811015612509578351835292840192918401916001016124ed565b50909695505050505050565b6000806040838503121561252857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161258b5761258b612563565b5060010190565b6000826125af57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176125cb576125cb612563565b9291505056fe624ae31110c92d70b58ec456bb42524ff16773a98936d8ef150f1e6b104b34aba0c2c402a49ee67eb7d8a3e87eb93de113a3a54817e8a70c39ae8ab51c0e12bebd21a0403f8a882c166bd206a22b19e35435476f82a2cccdbfebf4d666c861c00b2c26746c5e8d6f1877c4437947c29fc4d8103cd72878c4c039b7afe27c1a8e963ace81a31bb0e5e04a9395a1006fbdeb19cac259cef54f594aee1106583c6f762a1190b034cd04c3eae43da1943cdf0137d457634c4d62e69626f81f1986c769c5317e5ce44f1a1fb56c6a5eff904214e6353da6310ab0a6b511eef9a7c39115e7d524175663fc8929751799c4e1a8d04fec20bebd7ac2f10532927c1b5c0dd090a5d9e290baeb3c0f657cb8df01a7c37d0d11b8a73165ba04298bd71606c3a26469706673582212201bda10089d82345292fcac3b340f3d2340cafa494fef6784185202df70aa133764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103525760003560e01c80638dcbb205116101c0578063cbaad44111610100578063cbaad441146106df578063d13c422e146106f2578063d6dd049914610700578063d7ee90041461064a578063dbfb0ea114610707578063dcc6b96e1461071a578063ddc8381914610721578063e1b5c3ef14610734578063e7a76ce714610620578063e84959f2146105aa578063ece56a1a14610747578063f1a5c01d1461075a578063f20bebf414610768578063f515741314610771578063f644c0ce1461077a578063fb5c6df4146104cf578063fe9135f014610782578063ff614f4f1461078a57600080fd5b80638dcbb205146105fa5780638ed97a8c1461060d578063a476a6c314610620578063a53a3bb71461062e578063a5843f0814610637578063a6896cdb1461064a578063a7778ce014610658578063b8daaaeb14610665578063b99cb62c14610673578063bc2143e714610681578063bda2613914610689578063beaa602d14610698578063c15466dc146104cf578063c7388af4146106a1578063c7738b61146106a9578063c80134be146106bc578063c8923946146106cf57600080fd5b806357721c581161029657806357721c581461052f5780635a28acb0146105425780635c13c3bf146105575780635c724dbf1461055f578063616e009514610572578063657f17fd1461057a57806366fa9d24146105825780636795d4a01461059557806368e35ca01461059c5780636f3426da146105aa57806370a1859e146105b8578063746b537a146105c65780637496fc52146105d1578063781e0efe146105e45780637a893af5146105aa5780637e7d746e146105c657806381bfdebc146105b857806385142481146105ec57600080fd5b80630c451c20146103575780630de89b461461037d5780631dae2152146103925780632020e901146103a7578063205a7ec8146103cf578063250c3a10146103d65780632701e0d0146103e957806327153050146103f75780632e62598514610428578063302c7c4a1461045b57806335ba79891461046957806337a42b64146104c85780633afb0ebb146104cf5780633cdba936146104df578063413127ac146104f2578063426851b914610505578063569a52a51461051a575b600080fd5b61036a610365366004612323565b610793565b6040519081526020015b60405180910390f35b61039061038b36600461233c565b610871565b005b61039a61089b565b60405161037491906123f7565b6103ba6103b5366004612459565b610b98565b60408051928352602083019190915201610374565b602861036a565b61036a6103e4366004612323565b610ef7565b6729a2241af62c000061036a565b600054610410906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610374565b6040805180820190915260078152662ba0a92924a7a960c91b60209091015260008051602061269283398151915261036a565b670853a0d2313c000061036a565b61047c610477366004612323565b61109b565b6040516103749190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b600261036a565b69010f0cf064dd5920000061036a565b6103ba6104ed366004612323565b61123c565b61039061050036600461233c565b6112d7565b61050d611309565b604051610374919061247c565b662386f07b1c9936662386f26fc100006103ba565b61036a61053d366004612459565b611555565b61054a611585565b60405161037491906124d1565b617e9061036a565b61036a61056d366004612323565b61163b565b61054a611692565b61036a61180c565b61036a610590366004612323565b61182f565b600461036a565b670429d069189e000061036a565b670de0b6b3a764000061036a565b6706f05b59d3b2000061036a565b6103ec6103e86103ba565b61036a6105df366004612323565b6118ec565b60025461036a565b6710a741a46278000061036a565b61036a610608366004612323565b6119ee565b61036a61061b366004612323565b611a4b565b6703782dace9d9000061036a565b6212750061036a565b610390610645366004612515565b611bef565b674563918244f4000061036a565b66b1a2bc2ec5000061036a565b67093a8dfa07a2800061036a565b6709b6e64a8ec6000061036a565b61a8c061036a565b685150ae84a8cdf0000061036a565b61036a60025481565b60035461036a565b6103ba6106b7366004612459565b611d21565b61036a6106ca366004612323565b611e23565b69021e19e0c9bab240000061036a565b61036a6106ed366004612323565b611e89565b6704a628b99fc1800061036a565b600a61036a565b61036a610715366004612323565b611f4d565b601461036a565b61036a61072f366004612323565b6120d6565b61036a610742366004612323565b6121d8565b600154610410906001600160a01b031681565b67120a871cc002000061036a565b6201518061036a565b620d2f0061036a565b61036a6122da565b61fd2061036a565b61036a60035481565b6040805180820190915260078152662ba0a92924a7a960c91b602090910152600060008051602061265283398151915282016107d65750653286e80a5e00919050565b60408051808201909152600681526520a921a422a960d11b60209091015260008051602061261283398151915282016108165750650ca18d4e8000919050565b6040805180820190915260088152672427a929a2a6a0a760c11b6020909101526000805160206126728339815191528201610858575065050d5fcd3e00919050565b60405163ea3b0abb60e01b815260040160405180910390fd5b6108796122f0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60408051600480825260a0820190925260609160009190816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816108b75750506040805160a081018252600e606082019081526d135a5d1a1c98595d5b48119bdbd960921b608083015281528151808301835260058152641b5193d3d160da1b602080830191909152808301919091528251808401845260048152631193d3d160e21b9101527f2f6f5a261d6f4514c3f09a834720fe583c82f2ee4758ce9a45fbd67428e9f93d91810191909152815191925090829060009061098a5761098a61254d565b6020908102919091018101919091526040805160a081018252600e606082019081526d135a5d1a1c98595d5b4815dbdbd960921b608083015281528151808301835260058152641b55d3d3d160da1b818501528184015281518083018352600481526315d3d3d160e21b9301929092527f5f3d3bfd5b61198148275c178146c21eec5c5ab7e81758f3c651754ae3f1ed4290820152815182906001908110610a3457610a3461254d565b6020908102919091018101919091526040805160a081018252600d606082019081526c4d697468726165756d204f726560981b608083015281528151808301835260048152636d4f524560e01b81850152818401528151808301835260038152624f524560e81b9301929092527f9db51ceeef36d28f4a713ba944bdadb00e988c5676c92710eaf0e194efb4cb5590820152815182906002908110610adb57610adb61254d565b6020908102919091018101919091526040805160a081018252600f606082019081526e135a5d1a1c98595d5b48125b99dbdd608a1b608083015281528151808301835260068152651b525391d3d560d21b8185015281840152815180830183526005815264125391d3d560da1b9301929092527ff4d3d98b93a17290e7883bbc86b83d603b27efc328d7873b3fc648501d83e57290820152815182906003908110610b8857610b8861254d565b6020908102919091010152919050565b6000808260ff16600003610be15750506040805180820190915260048152634641524d60e01b602090910152506000805160206126b2833981519152906703782dace9d9000090565b8260ff16600103610c275750506040805180820190915260048152634641524d60e01b602090910152506000805160206126b28339815191529067058d15e17628000090565b8260ff16600203610c8557505060408051808201909152600a8152691315535091549352531360b21b602090910152507f6efa3da32b5b0a21cf9c6f5bc9edeb1d9e3a4b88cc5eb7b649f1e5029410165990670429d069189e000090565b8260ff16600303610ce357505060408051808201909152600a8152691315535091549352531360b21b602090910152507f6efa3da32b5b0a21cf9c6f5bc9edeb1d9e3a4b88cc5eb7b649f1e5029410165990670853a0d2313c000090565b8260ff16600403610d3b5750506040805180820190915260048152634d494e4560e01b602090910152507f458fc043506cc6fea16e7daa38390499ef978846d88dd78fe56678ac9de79444906706f05b59d3b2000090565b8260ff16600503610d935750506040805180820190915260048152634d494e4560e01b602090910152507f458fc043506cc6fea16e7daa38390499ef978846d88dd78fe56678ac9de7944490670b1a2bc2ec50000090565b8260ff16600603610ded575050604080518082019091526006815265534d4954485960d01b602090910152507fe8d22c09878b0ae66551f207dc5f243823c9e1989bc2d5dfab58fb1a93386fd2906709b6e64a8ec6000090565b8260ff16600703610e47575050604080518082019091526006815265534d4954485960d01b602090910152507fe8d22c09878b0ae66551f207dc5f243823c9e1989bc2d5dfab58fb1a93386fd290670de0b6b3a764000090565b8260ff16600803610e9f5750506040805180820190915260048152631193d49560e21b602090910152507f2911d5ca388af24ed7f391a4eb24469bc0fd8935cd73bb1075ca7e702a42eb199067058d15e17628000090565b8260ff166009036108585750506040805180820190915260048152631193d49560e21b602090910152507f2911d5ca388af24ed7f391a4eb24469bc0fd8935cd73bb1075ca7e702a42eb1990670853a0d2313c000090565b6040805180820190915260048152634641524d60e01b60209091015260007fea182adbe8a99c0376d68ae8663b1e572fb013df4142853d0efacd6d83e4a3f38201610f4b5750678ac7230489e80000919050565b60408051808201909152600a8152691315535091549352531360b21b6020909101527f9105c25cd4a4f5de306390a4361214e261c5b47733a14849b60e1afd6befe9a78201610fa35750676124fee993bc0000919050565b6040805180820190915260048152634d494e4560e01b6020909101527fba703fbcaf9339015e918255c7c6fb66106877b9277228701a99875362186bbc8201610ff55750674563918244f40000919050565b604080518082019091526006815265534d4954485960d01b6020909101527f172dd3f67874f5199aae0df823a0dbc7dc361e67643d2a2054a704e56cc7902e820161104957506729a2241af62c0000919050565b6040805180820190915260048152631193d49560e21b6020909101527fd6ee2a35c7750db1280c6e5b14dbb9643f0276ca328c44ef8a35818fd5bd14e782016108585750674563918244f40000919050565b6110d46040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805180820190915260078152662ba0a92924a7a960c91b602090910152600080516020612652833981519152820161114c576040518060c0016040528060008152602001601481526020016005815260200160058152602001650a86cc92e3da815260200165150d9925c7b48152509050919050565b60408051808201909152600681526520a921a422a960d11b60209091015260008051602061261283398151915282016111c3576040518060c0016040528060058152602001600581526020016000815260200160058152602001650a86cc92e3da815260200165150d9925c7b48152509050919050565b6040805180820190915260088152672427a929a2a6a0a760c11b6020909101526000805160206126728339815191528201610858576040518060c0016040528060008152602001600581526020016005815260200160148152602001650a86cc92e3da815260200165150d9925c7b48152509050919050565b60408051808201909152600681526520a921a422a960d11b602090910152600080600080516020612612833981519152830161128a5750662386ef98e7bf4c92662386f26fc1000092509050565b6040805180820190915260088152672427a929a2a6a0a760c11b60209091015260008051602061267283398151915283016108585750662386f07b1c993692662386f26fc1000092509050565b6112df6122f0565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6040805160038082526080820190925260609160009190816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816113255750506040805160a0810182526011606082019081527026b4ba343930b2bab6902bb0b93934b7b960791b6080830152815281518083018352600881526736aba0a92924a7a960c11b602080830191909152808301919091528251808401845260078152662ba0a92924a7a960c91b9101526000805160206126928339815191529181019190915281519192509082906000906113ef576113ef61254d565b6020908102919091018101919091526040805160a0810182526010606082019081526f26b4ba343930b2bab69020b931b432b960811b6080830152815281518083018352600781526636a0a921a422a960c91b818501528184015281518083018352600681526520a921a422a960d11b9301929092527f42de5fbfc07577d3e9942df95dd4e61cabcab8907d5d333240140b2999379e409082015281518290600190811061149f5761149f61254d565b6020908102919091018101919091526040805160a0810182526012606082019081527126b4ba343930b2bab6902437b939b2b6b0b760711b6080830152815281518083018352600981526836a427a929a2a6a0a760b91b81850152818401528151808301835260088152672427a929a2a6a0a760c11b9301929092527f89d5ee6f4fcb32fb3c151bc25e6bc320fec82ba89cb3b29d1969d907e0e6793990820152815182906002908110610b8857610b8861254d565b60008160ff1660010361156a57506002919050565b8160ff1660020361157d57506001919050565b506000919050565b60606000611591611309565b90506000815167ffffffffffffffff8111156115af576115af612537565b6040519080825280602002602001820160405280156115d8578160200160208202803683370190505b50905060005b8151811015611634578281815181106115f9576115f961254d565b6020026020010151604001518282815181106116175761161761254d565b60209081029190910101528061162c81612579565b9150506115de565b5092915050565b600081600103611654575067058d15e176280000919050565b8160020361166b57506702c68af0bb140000919050565b81600303611682575067016345785d8a0000919050565b8160040361085857506000919050565b60408051600580825260c08201909252606091600091906020820160a08036833750506040805180820190915260048152634641524d60e01b6020909101525080519091506000805160206126b28339815191529082906000906116f8576116f861254d565b6020026020010181815250506040518060400160405280600a8152602001691315535091549352531360b21b81525080519060200120816001815181106117415761174161254d565b602002602001018181525050604051806040016040528060048152602001634d494e4560e01b81525080519060200120816002815181106117845761178461254d565b60200260200101818152505060405180604001604052806006815260200165534d4954485960d01b81525080519060200120816003815181106117c9576117c961254d565b602002602001018181525050604051806040016040528060048152602001631193d49560e21b8152508051906020012081600481518110610b8857610b8861254d565b600061182a670de0b6b3a764000069021e19e0c9bab2400000612592565b905090565b6040805180820190915260078152662ba0a92924a7a960c91b602090910152600060008051602061265283398151915282016118745750670de0b6b3a7640000919050565b60408051808201909152600681526520a921a422a960d11b60209091015260008051602061261283398151915282016118af57506000919050565b6040805180820190915260088152672427a929a2a6a0a760c11b602090910152600080516020612672833981519152820161085857506000919050565b6040805180820190915260048152631193d3d160e21b60209091015260006000805160206126d2833981519152820161192e5750670429d069189e0000919050565b60408051808201909152600481526315d3d3d160e21b6020909101526000805160206125f2833981519152820161196e5750670de0b6b3a7640000919050565b6040805180820190915260038152624f524560e81b6020909101526000805160206125d283398151915282016119ad57506729a2241af62c0000919050565b604080518082019091526005815264125391d3d560da1b60209091015260008051602061263283398151915282016108585750678ac7230489e80000919050565b600081600103611a065750668e1bc9bf040000919050565b81600203611a1d575067011c37937e080000919050565b81600303611a3457506701aa535d3d0c0000919050565b816004036108585750670214e8348c4f0000919050565b6040805180820190915260048152634641524d60e01b60209091015260007fea182adbe8a99c0376d68ae8663b1e572fb013df4142853d0efacd6d83e4a3f38201611a9f57506706f05b59d3b20000919050565b60408051808201909152600a8152691315535091549352531360b21b6020909101527f9105c25cd4a4f5de306390a4361214e261c5b47733a14849b60e1afd6befe9a78201611af757506705f7aab8c56b0000919050565b6040805180820190915260048152634d494e4560e01b6020909101527fba703fbcaf9339015e918255c7c6fb66106877b9277228701a99875362186bbc8201611b49575067058d15e176280000919050565b604080518082019091526006815265534d4954485960d01b6020909101527f172dd3f67874f5199aae0df823a0dbc7dc361e67643d2a2054a704e56cc7902e8201611b9d5750670494654067e10000919050565b6040805180820190915260048152631193d49560e21b6020909101527fd6ee2a35c7750db1280c6e5b14dbb9643f0276ca328c44ef8a35818fd5bd14e78201610858575067058d15e176280000919050565b600054610100900460ff1615808015611c0f5750600054600160ff909116105b80611c295750303b158015611c29575060005460ff166001145b611c905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015611cb3576000805461ff0019166101001790555b6000805462010000600160b01b031916336201000002179055600283905560038290558015611d1c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000808260ff16600003611d6d5750506040805180820190915260078152662ba0a92924a7a960c91b6020909101525060008051602061269283398151915290670429d069189e000090565b8260ff16600103611dc757505060408051808201909152600681526520a921a422a960d11b602090910152507f42de5fbfc07577d3e9942df95dd4e61cabcab8907d5d333240140b2999379e40906706f05b59d3b2000090565b8260ff166002036108585750506040805180820190915260088152672427a929a2a6a0a760c11b602090910152507f89d5ee6f4fcb32fb3c151bc25e6bc320fec82ba89cb3b29d1969d907e0e6793990670de0b6b3a764000090565b600081600103611e3e5750690878678326eac9000000919050565b81600203611e5757506910f0cf064dd592000000919050565b81600303611e7057506921e19e0c9bab24000000919050565b8160040361085857506943c33c19375648000000919050565b6040805180820190915260078152662ba0a92924a7a960c91b60209091015260006000805160206126528339815191528201611ec757506000919050565b60408051808201909152600681526520a921a422a960d11b6020909101526000805160206126128339815191528201611f0957506729a2241af62c0000919050565b6040805180820190915260088152672427a929a2a6a0a760c11b60209091015260008051602061267283398151915282016108585750673782dace9d900000919050565b6040805180820190915260078152662ba0a92924a7a960c91b60209091015260006000805160206126528339815191528201611fd257505060408051808201909152601181527015d3d492d15494d7d553925517d413d3d3607a1b6020909101527f8f75178ea8b939732f30df87bf2b4d5864e1068291d6e7b65eb7efcdd75e570290565b60408051808201909152600681526520a921a422a960d11b602090910152600080516020612612833981519152820161205357505060408051808201909152601081526f125391d3d514d7d553925517d413d3d360821b6020909101527facde00cf82db2dd178c1275275df8e6a2355a26d2338720a6239578a1148b9f790565b6040805180820190915260088152672427a929a2a6a0a760c11b602090910152600080516020612672833981519152820161085857505060408051808201909152601081526f125391d3d514d7d553925517d413d3d360821b6020909101527facde00cf82db2dd178c1275275df8e6a2355a26d2338720a6239578a1148b9f790565b6040805180820190915260048152631193d3d160e21b60209091015260006000805160206126d283398151915282016121185750670de0b6b3a7640000919050565b60408051808201909152600481526315d3d3d160e21b6020909101526000805160206125f283398151915282016121585750670de0b6b3a7640000919050565b6040805180820190915260038152624f524560e81b6020909101526000805160206125d283398151915282016121975750670de0b6b3a7640000919050565b604080518082019091526005815264125391d3d560da1b60209091015260008051602061263283398151915282016108585750670de0b6b3a7640000919050565b6040805180820190915260048152631193d3d160e21b60209091015260006000805160206126d2833981519152820161221a57506706f05b59d3b20000919050565b60408051808201909152600481526315d3d3d160e21b6020909101526000805160206125f2833981519152820161225a5750670de0b6b3a7640000919050565b6040805180820190915260038152624f524560e81b6020909101526000805160206125d283398151915282016122995750671bc16d674ec80000919050565b604080518082019091526005815264125391d3d560da1b602090910152600080516020612632833981519152820161157d57506729a2241af62c0000919050565b600061182a685150ae84a8cdf0000060056125b4565b6000546201000090046001600160a01b031633146123215760405163d136afd560e01b815260040160405180910390fd5b565b60006020828403121561233557600080fd5b5035919050565b60006020828403121561234e57600080fd5b81356001600160a01b038116811461236557600080fd5b9392505050565b6000815180845260005b8181101561239257602081850181015186830182015201612376565b506000602082860101526020601f19601f83011685010191505092915050565b60008151606084526123c7606085018261236c565b9050602083015184820360208601526123e0828261236c565b915050604083015160408501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561244c57603f1988860301845261243a8583516123b2565b9450928501929085019060010161241e565b5092979650505050505050565b60006020828403121561246b57600080fd5b813560ff8116811461236557600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561244c57603f198886030184526124bf8583516123b2565b945092850192908501906001016124a3565b6020808252825182820181905260009190848201906040850190845b81811015612509578351835292840192918401916001016124ed565b50909695505050505050565b6000806040838503121561252857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161258b5761258b612563565b5060010190565b6000826125af57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176125cb576125cb612563565b9291505056fe624ae31110c92d70b58ec456bb42524ff16773a98936d8ef150f1e6b104b34aba0c2c402a49ee67eb7d8a3e87eb93de113a3a54817e8a70c39ae8ab51c0e12bebd21a0403f8a882c166bd206a22b19e35435476f82a2cccdbfebf4d666c861c00b2c26746c5e8d6f1877c4437947c29fc4d8103cd72878c4c039b7afe27c1a8e963ace81a31bb0e5e04a9395a1006fbdeb19cac259cef54f594aee1106583c6f762a1190b034cd04c3eae43da1943cdf0137d457634c4d62e69626f81f1986c769c5317e5ce44f1a1fb56c6a5eff904214e6353da6310ab0a6b511eef9a7c39115e7d524175663fc8929751799c4e1a8d04fec20bebd7ac2f10532927c1b5c0dd090a5d9e290baeb3c0f657cb8df01a7c37d0d11b8a73165ba04298bd71606c3a26469706673582212201bda10089d82345292fcac3b340f3d2340cafa494fef6784185202df70aa133764736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "getAdvancedProductionTileBonusByVariation(uint8)": {
        "details": "Used to determine tile bonus by tile bonus variation",
        "params": {
          "tileBonusVariation": "Tile bonus variation"
        },
        "returns": {
          "_0": "Building type id",
          "_1": "Capacity amount multiplier"
        }
      },
      "getArmyStunDurationByJoiningBattleAtAttackingSide()": {
        "details": "Used to determine stun duration army will receive by joining battle at attacking side",
        "returns": {
          "_0": "Stun duration"
        }
      },
      "getArmyStunDurationPerRobberyMultiplier()": {
        "details": "Used in army siege modification",
        "returns": {
          "_0": "Army stun duration per robbery multiplier"
        }
      },
      "getBaseBattleDuration()": {
        "details": "Used internally to determine how long battle will last",
        "returns": {
          "_0": "Base battle duration"
        }
      },
      "getBasicProductionBuildingCoefficient(bytes32)": {
        "details": "used for internal calculation of production result",
        "params": {
          "buildingTypeId": "Building type id"
        },
        "returns": {
          "_0": "Basic production building coefficient"
        }
      },
      "getBattleDurationLosingArmyStunMultiplier()": {
        "details": "Used internally to determine how long stun will last after army lost the battle",
        "returns": {
          "_0": "Battle duration losing army stun multiplier"
        }
      },
      "getBattleDurationWinningArmyStunMultiplier()": {
        "details": "Used internally to determine how long stun will last after army won the battle",
        "returns": {
          "_0": "Battle duration winning army stun multiplier"
        }
      },
      "getBuildingTokenTransferThresholdPercent()": {
        "details": "Used to determine is building token transfer allowed based on treasury percent",
        "returns": {
          "_0": "Building token transfer threshold percent"
        }
      },
      "getBuildingTypeIds()": {
        "details": "Used internally to determine which buildings will be created on placing settlement",
        "returns": {
          "_0": "Building type ids"
        }
      },
      "getCaptureTileDurationPerTile()": {
        "details": "Used to capture tile duration calculation",
        "returns": {
          "_0": "Capture tile duration per tile"
        }
      },
      "getChanceForTileWithBonusByRegionTier(uint256)": {
        "details": "Used to determine whether tile has bonus or not",
        "params": {
          "regionTier": "Region tier"
        },
        "returns": {
          "_0": "Chance for tile with bonus (in 1e18 precision)"
        }
      },
      "getCorruptionIndexByResource(bytes32)": {
        "details": "Used for calculation of how much corruptionIndex increased/decreased",
        "params": {
          "resourceTypeId": "Resource type id"
        },
        "returns": {
          "_0": "Amount of corruptionIndex per 1 resource (both are in 1e18 precision)"
        }
      },
      "getCultistUnitTypeId()": {
        "details": "Determines type of unit in cultists army",
        "returns": {
          "_0": "Cultists unit type id"
        }
      },
      "getCultistsNoDestructionDelay()": {
        "details": "Used to determine if destruction is available or not",
        "returns": {
          "_0": "No destruction interval duration (in seconds)"
        }
      },
      "getCultistsPerRegionMultiplier()": {
        "details": "Used to determine amount of cultists that have to be present for world destruction",
        "returns": {
          "_0": "Value of cultists per region"
        }
      },
      "getCultistsSummonDelay()": {
        "details": "Used to determine is cultists can be re-summoned",
        "returns": {
          "_0": "Cultists summon delay (in seconds)"
        }
      },
      "getGameResources()": {
        "details": "Used internally to determine upgrade costs and providing initial resources for settlement owner based on his tier",
        "params": {
          "resources": "Game resources"
        }
      },
      "getGameUnits()": {
        "details": "Used internally in many places where interaction with units is necessary",
        "returns": {
          "_0": "Game units"
        }
      },
      "getGlobalMultiplier()": {
        "details": "Used everywhere, where time is involved. Essentially determines game speed",
        "returns": {
          "_0": "Global multiplier"
        }
      },
      "getInitialCaptureProsperityBasicValue()": {
        "details": "Used to determine if new bid on captured tile is possible",
        "returns": {
          "_0": "Initial capture prosperity basic value"
        }
      },
      "getInitialCaptureProsperityPerTileValue()": {
        "details": "Used to determine if new bid on captured tile is possible",
        "returns": {
          "_0": "Initial capture prosperity per tile value"
        }
      },
      "getInitialCorruptionIndexAmountPerRegionTier()": {
        "details": "Used in region activation and region tier increase handler",
        "returns": {
          "_0": "Initial corruptionIndex amount"
        }
      },
      "getInitialCultistsAmountPerRegionTier()": {
        "details": "Used in region activation",
        "returns": {
          "_0": "Initial cultists amount"
        }
      },
      "getManeuverDurationStunMultiplier()": {
        "details": "Used internally to determine how long stun will last after armies' maneuver",
        "returns": {
          "_0": "Maneuver duration stun multiplier"
        }
      },
      "getMaxAdvancedProductionTileBuff()": {
        "details": "Used for determination advanced production multiplier",
        "returns": {
          "_0": "Max potential advanced production from tile buff"
        }
      },
      "getMaxAllowedRobberyMultiplierIncreaseValue()": {
        "details": "Used in army siege modification",
        "returns": {
          "_0": "Max allowed robbery multiplier increase value"
        }
      },
      "getMaxAllowedUnitsToBuyPerTransaction()": {
        "details": "Limit specified in order to limit potential price overflows (value is returned in 1e18 precision)",
        "returns": {
          "_0": "Max allowed units to buy"
        }
      },
      "getMaxAllowedWorkersToBuyPerTransaction()": {
        "details": "Limit specified in order to limit potential price overflows (value is returned in 1e18 precision)",
        "returns": {
          "_0": "Max allowed workers to buy"
        }
      },
      "getMaxCapturedTilesForSettlement(uint8)": {
        "details": "Used to determine whether settlement can initiate tile capture",
        "params": {
          "tileBonusType": "Tile bonus type"
        },
        "returns": {
          "_0": "Max captured tiles for settlement with this bonus type"
        }
      },
      "getMaxCultistsPerRegion()": {
        "details": "Used to determine how many cultists will be summoned",
        "returns": {
          "_0": "Maximum amount of cultists"
        }
      },
      "getMaxRegionTier()": {
        "details": "Used in validation in region tier increase",
        "returns": {
          "_0": "Max region tier"
        }
      },
      "getMaxSettlementsPerRegion()": {
        "details": "Cultists does not count (so +1 with cultists)",
        "returns": {
          "_0": "Max settlements that can be placed in one region"
        }
      },
      "getMinimumBattleDuration()": {
        "details": "Used to determine battle duration ignoring current world multiplier",
        "returns": {
          "_0": "Minimum battle duration"
        }
      },
      "getMinimumUserSettlementsCountInNeighboringRegionRequiredToIncludeRegion()": {
        "details": "Used to determine whether region can be included or not",
        "returns": {
          "_0": "Minimum user settlements count"
        }
      },
      "getNecessaryProsperityPercentForClaimingTileCapture()": {
        "details": "Used to determine if tile claim is possible",
        "returns": {
          "_0": "Necessary prosperity percent for claiming tile capture"
        }
      },
      "getNewSettlementPriceIncreaseMultiplier()": {
        "details": "Used to determine new settlement purchase price (in 1e18 precision)",
        "returns": {
          "_0": "New settlement price increase multiplier"
        }
      },
      "getNewSettlementStartingPrice()": {
        "details": "Used to determine how much base price for first settlement will be",
        "returns": {
          "_0": "New settlement starting price"
        }
      },
      "getNextCaptureProsperityBasicThreshold()": {
        "details": "Used to determine if new bid on captured tile is possible",
        "returns": {
          "_0": "Next capture prosperity basic threshold"
        }
      },
      "getNextCaptureProsperityPerTileThreshold()": {
        "details": "Used to determine if new bid on captured tile is possible",
        "returns": {
          "_0": "Next capture prosperity per tile threshold"
        }
      },
      "getProductionTicksInSecond()": {
        "details": "Used for production calculation",
        "returns": {
          "_0": "Amount of production ticks"
        }
      },
      "getProsperityForUnitLiquidation(bytes32)": {
        "details": "Used internally to calculate how much prosperity will be given",
        "returns": {
          "_0": "Prosperity amount per one unit (in 1e18 precision)"
        }
      },
      "getRegionInclusionPrice(uint256)": {
        "details": "Used to determine amount of token to be taken from msg.sender in order to include region",
        "params": {
          "regionTier": "Region tier"
        },
        "returns": {
          "_0": "Region inclusion price"
        }
      },
      "getRegionOwnerSettlementPurchasePercent(uint256)": {
        "details": "Used to determine amount of tokens to be sent to region owner when another user buys settlement in his region",
        "params": {
          "regionTier": "Region tier"
        },
        "returns": {
          "_0": "Percent (in 1e18 precision)"
        }
      },
      "getResourceWeight(bytes32)": {
        "details": "Used for calculation how much prosperity will be produced by resource in treasury",
        "params": {
          "resourceTypeId": "Resource type id"
        },
        "returns": {
          "_0": "Resource weight (in 1e0 precision)"
        }
      },
      "getRobberyPointsPerDamageMultiplier()": {
        "details": "Used for determination how much robbery points will be given",
        "returns": {
          "_0": "Robbery points per damage multiplier (in 1e18 precision)"
        }
      },
      "getRobberyPointsToResourceMultiplier(bytes32)": {
        "details": "Used in calculation how many resources can be exchanged for robbery points",
        "params": {
          "resourceTypeId": "Resource type id"
        },
        "returns": {
          "_0": "Robbery point multiplier (in 1e18 precision)"
        }
      },
      "getSettlementPayToDecreaseCorruptionIndexPenaltyMultiplier()": {
        "details": "Used to determine how much corruptionIndex penalty settlement will endure whenever its corruptionIndex is lowered by paying to reward pool",
        "returns": {
          "_0": "Penalty multiplier"
        }
      },
      "getSettlementPriceMultiplierPerIncreasedRegionTier()": {
        "details": "Used in calculation of new settlement price",
        "returns": {
          "_0": "Settlement price multiplier per increased region tier"
        }
      },
      "getStunDurationMultiplierOfCancelledSecretManeuver()": {
        "details": "Used in calculation of stun duration during cancelling secret maneuver",
        "returns": {
          "_0": "Stun multiplier of cancelled secret maneuver"
        }
      },
      "getTileCaptureCancellationFee()": {
        "details": "Used to determine how much prosperity has to be given in order to cancel tile capture",
        "returns": {
          "_0": "Tile capture cancellation fee"
        }
      },
      "getToTreasuryPercent()": {
        "details": "Determines how much of buildings production will go to treasury (if not full)",
        "params": {
          "toTreasuryPercent": "Production to treasury percent (in 1e18 precision, where 1e18 is 100%)"
        }
      },
      "getUnitBattleMultiplierTileBonusByVariation(uint8)": {
        "details": "Used to determine tile bonus by tile bonus variation",
        "params": {
          "tileBonusVariation": "Tile bonus variation"
        },
        "returns": {
          "_0": "Unit type id",
          "_1": "Unit battle multiplier"
        }
      },
      "getUnitHiringFortHpMultiplier()": {
        "details": "Used to determine how much units in army can be presented based on its current fort hp and this parameter",
        "returns": {
          "_0": "Unit hiring fort hp multiplier"
        }
      },
      "getUnitPoolType(bytes32)": {
        "details": "Used to determine which implementation of unit pool to use for provided unit type",
        "params": {
          "unitTypeId": "Unit type id"
        },
        "returns": {
          "_0": "Unit pool type"
        }
      },
      "getUnitPriceDropByUnitTypeId(bytes32)": {
        "details": "Used for determination of current unit pool price",
        "params": {
          "unitTypeId": "Unit type id"
        },
        "returns": {
          "_0": "Numerator",
          "_1": "Denominator"
        }
      },
      "getUnitPriceIncreaseForEachUnit()": {
        "details": "Used for determination of unit price",
        "returns": {
          "_0": "Numerator",
          "_1": "Denominator"
        }
      },
      "getUnitResourceUsagePer1SecondOfDecreasedManeuverDuration(bytes32)": {
        "details": "Used internally to calculate army's maneuver speed",
        "params": {
          "unitTypeId": "Unit type id"
        },
        "returns": {
          "_0": "Amount of resource to spend per unit per 1 second of decreased maneuver duration (in 1e18 precision)"
        }
      },
      "getUnitStats(bytes32)": {
        "details": "Used everywhere, where game logic based on unit stats",
        "params": {
          "unitTypeId": "Unit type id"
        },
        "returns": {
          "_0": "Unit stats"
        }
      },
      "getUnitTypeIds()": {
        "details": "Used internally in many places where interaction with units is necessary",
        "returns": {
          "_0": "Unit type ids"
        }
      },
      "getWorkerCapacityCoefficient(bytes32)": {
        "details": "Used for internal calculation of max workers for each building",
        "params": {
          "buildingTypeId": "Building type id"
        },
        "returns": {
          "_0": "Worker capacity coefficient"
        }
      },
      "getWorkerPriceDrop()": {
        "details": "Used for determination of current workers pool price",
        "returns": {
          "_0": "Numerator",
          "_1": "Denominator"
        }
      },
      "getWorkerPriceIncreaseForEachWorker()": {
        "details": "Used for determination of worker price",
        "returns": {
          "_0": "Numerator",
          "_1": "Denominator"
        }
      },
      "getWorkersForUnitLiquidation(bytes32)": {
        "details": "Used internally to calculate how much workers will be given",
        "returns": {
          "_0": "Workers amount per one unit (in 1e18 precision)"
        }
      },
      "init(uint256,uint256)": {
        "details": "Called by address which created current instance",
        "params": {
          "globalMultiplier": "Global multiplier",
          "settlementStartingPrice": "Settlement starting price"
        }
      },
      "setMightyCreator(address)": {
        "details": "Even though function is opened, it can be called only by mightyCreator",
        "params": {
          "newMightyCreator": "New mighty creator"
        }
      },
      "setWorldAssetFactory(address)": {
        "details": "Even though function is opened, it can be called only by mightyCreator",
        "params": {
          "worldAssetFactoryAddress": "World asset factory address"
        }
      }
    },
    "stateVariables": {
      "globalMultiplier": {
        "details": "Immutable, initialized on the registry creation"
      },
      "mightyCreator": {
        "details": "Immutable, initialized on the registry creation"
      },
      "settlementStartingPrice": {
        "details": "Immutable, initialized on the registry creation"
      },
      "worldAssetFactory": {
        "details": "During new world asset creation process registry is asked for factory contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "OnlyMightyCreator()": [
        {
          "notice": "Thrown when attempting to call action which can only be called by mighty creator"
        }
      ],
      "UnknownInputParameter()": [
        {
          "notice": "Thrown when attempting to call function by providing unknown parameter"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "getAdvancedProductionTileBonusByVariation(uint8)": {
        "notice": "Returns advanced production tile bonus by variation"
      },
      "getArmyStunDurationByJoiningBattleAtAttackingSide()": {
        "notice": "Returns stun duration army will receive by joining battle at attacking side"
      },
      "getArmyStunDurationPerRobberyMultiplier()": {
        "notice": "Returns army stun duration per one point of added robbery multiplier"
      },
      "getBaseBattleDuration()": {
        "notice": "Returns base battle duration"
      },
      "getBasicProductionBuildingCoefficient(bytes32)": {
        "notice": "Calculates basic production building coefficient"
      },
      "getBattleDurationLosingArmyStunMultiplier()": {
        "notice": "Returns battle duration losing army stun multiplier"
      },
      "getBattleDurationWinningArmyStunMultiplier()": {
        "notice": "Returns battle duration winning army stun multiplier"
      },
      "getBuildingTokenTransferThresholdPercent()": {
        "notice": "Returns building token transfer threshold percent"
      },
      "getBuildingTypeIds()": {
        "notice": "Returns game building type ids"
      },
      "getCaptureTileDurationPerTile()": {
        "notice": "Returns capture tile duration per each tile in distance from settlement to selected tile"
      },
      "getChanceForTileWithBonusByRegionTier(uint256)": {
        "notice": "Returns chance for tile with bonus by region tier"
      },
      "getCorruptionIndexByResource(bytes32)": {
        "notice": "Returns corruptionIndex by resource type id"
      },
      "getCultistUnitTypeId()": {
        "notice": "Returns unit type id of cultists army"
      },
      "getCultistsNoDestructionDelay()": {
        "notice": "Returns interval duration where world is not destructible after recent cultists summon"
      },
      "getCultistsPerRegionMultiplier()": {
        "notice": "Returns value of cultists per region which determines cultists threshold for world destruction"
      },
      "getCultistsSummonDelay()": {
        "notice": "Returns cultists summon delay"
      },
      "getGameResources()": {
        "notice": "Returns game resources"
      },
      "getGameUnits()": {
        "notice": "Returns game units"
      },
      "getGlobalMultiplier()": {
        "notice": "Returns global multiplier"
      },
      "getInitialCaptureProsperityBasicValue()": {
        "notice": "Returns initial capture prosperity basic value"
      },
      "getInitialCaptureProsperityPerTileValue()": {
        "notice": "Returns initial capture prosperity per tile value"
      },
      "getInitialCorruptionIndexAmountPerRegionTier()": {
        "notice": "Returns initial corruptionIndex amount per region tier"
      },
      "getInitialCultistsAmountPerRegionTier()": {
        "notice": "Returns initial cultists amount per region tier"
      },
      "getManeuverDurationStunMultiplier()": {
        "notice": "Returns maneuver duration stun multiplier"
      },
      "getMaxAdvancedProductionTileBuff()": {
        "notice": "Returns max potential advanced production buff gain from capturing tiles"
      },
      "getMaxAllowedRobberyMultiplierIncreaseValue()": {
        "notice": "Returns max allowed robbery multiplier increase value"
      },
      "getMaxAllowedUnitsToBuyPerTransaction()": {
        "notice": "Returns max allowed units to buy per transaction"
      },
      "getMaxAllowedWorkersToBuyPerTransaction()": {
        "notice": "Returns max allowed workers to buy per transaction"
      },
      "getMaxCapturedTilesForSettlement(uint8)": {
        "notice": "Returns max captured tiles for settlement"
      },
      "getMaxCultistsPerRegion()": {
        "notice": "Returns maximum amount of cultists that can be present in region"
      },
      "getMaxRegionTier()": {
        "notice": "Returns max region tier"
      },
      "getMaxSettlementsPerRegion()": {
        "notice": "Returns max settlements that can be placed in one region"
      },
      "getMinimumBattleDuration()": {
        "notice": "Returns minimum battle duration"
      },
      "getMinimumUserSettlementsCountInNeighboringRegionRequiredToIncludeRegion()": {
        "notice": "Returns minimum user settlements count in neighboring region required to include region"
      },
      "getNecessaryProsperityPercentForClaimingTileCapture()": {
        "notice": "Returns percent of prosperity that has to be in settlement for claiming captured tile"
      },
      "getNewSettlementPriceIncreaseMultiplier()": {
        "notice": "Returns new settlement price increase multiplier"
      },
      "getNewSettlementStartingPrice()": {
        "notice": "Returns new settlement starting price in settlements market"
      },
      "getNextCaptureProsperityBasicThreshold()": {
        "notice": "Returns next capture prosperity basic threshold"
      },
      "getNextCaptureProsperityPerTileThreshold()": {
        "notice": "Returns next capture prosperity per tile threshold"
      },
      "getProductionTicksInSecond()": {
        "notice": "Returns amount of production ticks"
      },
      "getProsperityForUnitLiquidation(bytes32)": {
        "notice": "Returns how much prosperity will be given for provided unit type id"
      },
      "getRegionInclusionPrice(uint256)": {
        "notice": "Returns region inclusion price"
      },
      "getRegionOwnerSettlementPurchasePercent(uint256)": {
        "notice": "Returns region owner settlement purchase percent"
      },
      "getResourceWeight(bytes32)": {
        "notice": "Returns resource weight"
      },
      "getRobberyPointsPerDamageMultiplier()": {
        "notice": "Returns robbery points per damage multiplier"
      },
      "getRobberyPointsToResourceMultiplier(bytes32)": {
        "notice": "Returns robbery point multiplier by provided resource type id"
      },
      "getSettlementPayToDecreaseCorruptionIndexPenaltyMultiplier()": {
        "notice": "Returns settlement pay to decrease corruptionIndex penalty multiplier"
      },
      "getSettlementPriceMultiplierPerIncreasedRegionTier()": {
        "notice": "Returns settlement price multiplier per increased region tier"
      },
      "getStunDurationMultiplierOfCancelledSecretManeuver()": {
        "notice": "Returns stun duration multiplier of cancelled secret maneuver"
      },
      "getTileCaptureCancellationFee()": {
        "notice": "Returns tile capture cancellation fee"
      },
      "getToTreasuryPercent()": {
        "notice": "Returns production to treasury percent"
      },
      "getUnitBattleMultiplierTileBonusByVariation(uint8)": {
        "notice": "Returns unit battle multiplier tile bonus by variation"
      },
      "getUnitHiringFortHpMultiplier()": {
        "notice": "Returns unit hiring fort hp multiplier"
      },
      "getUnitPoolType(bytes32)": {
        "notice": "Returns unit pool type by unit type id"
      },
      "getUnitPriceDropByUnitTypeId(bytes32)": {
        "notice": "Returns unit pool price drop per second for provided unit type id (value returned as numerator and denominator)"
      },
      "getUnitPriceIncreaseForEachUnit()": {
        "notice": "Returns unit price increase in unit pool for each extra unit to buy (value returned as numerator and denominator)"
      },
      "getUnitResourceUsagePer1SecondOfDecreasedManeuverDuration(bytes32)": {
        "notice": "Returns how much resource unit can take from treasury to reduce maneuver duration"
      },
      "getUnitStats(bytes32)": {
        "notice": "Returns unit stats by provided unit type"
      },
      "getUnitTypeIds()": {
        "notice": "Returns game unit type ids"
      },
      "getWorkerCapacityCoefficient(bytes32)": {
        "notice": "Calculates worker capacity coefficient for provided building type id"
      },
      "getWorkerPriceDrop()": {
        "notice": "Returns workers pool price drop per second, provided as numerator and denominator"
      },
      "getWorkerPriceIncreaseForEachWorker()": {
        "notice": "Returns worker pool price drop per second for each worker (value returned as numerator and denominator)"
      },
      "getWorkersForUnitLiquidation(bytes32)": {
        "notice": "Returns how much workers will be given for provided unit type id"
      },
      "globalMultiplier()": {
        "notice": "Global multiplier"
      },
      "init(uint256,uint256)": {
        "notice": "Proxy initializer"
      },
      "mightyCreator()": {
        "notice": "An address which can configure/reconfigure current game"
      },
      "setMightyCreator(address)": {
        "notice": "Sets new mighty creator"
      },
      "setWorldAssetFactory(address)": {
        "notice": "Sets provided address as world asset factory contract"
      },
      "settlementStartingPrice()": {
        "notice": "Settlement starting price"
      },
      "worldAssetFactory()": {
        "notice": "World asset factory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 119,
        "contract": "contracts/core/Registry.sol:Registry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 122,
        "contract": "contracts/core/Registry.sol:Registry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8469,
        "contract": "contracts/core/Registry.sol:Registry",
        "label": "mightyCreator",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8474,
        "contract": "contracts/core/Registry.sol:Registry",
        "label": "worldAssetFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IWorldAssetFactory)10885"
      },
      {
        "astId": 8478,
        "contract": "contracts/core/Registry.sol:Registry",
        "label": "globalMultiplier",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8482,
        "contract": "contracts/core/Registry.sol:Registry",
        "label": "settlementStartingPrice",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IWorldAssetFactory)10885": {
        "encoding": "inplace",
        "label": "contract IWorldAssetFactory",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}