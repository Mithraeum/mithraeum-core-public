{
  "address": "0xF9741a1a0Aabc5543c441fd6E01BEa899bEC3c0c",
  "abi": [
    {
      "inputs": [],
      "name": "BattleCannotAcceptCultistsArmyWhenCultistsAmountChangedToLowerValueThanDesired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BattleCannotBeCreatedByDesiringToAttackCultistsArmyWithoutUnits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BattleCannotBeCreatedWhenArmyUnitsExceedDesiredAmountToAttack",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BattleCannotBeCreatedWhenAttackedArmyIsAlmostOnAnotherPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BattleCannotBeCreatedWithArmiesHavingZeroUnits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BattleCannotBeFinishedAtThisTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BattleCannotBeFinishedMoreThanOnce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyActiveGame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMightyCreator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyWorldAssetFromSameEra",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "armyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "side",
          "type": "uint256"
        }
      ],
      "name": "ArmyJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "BattleEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "armyAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "side",
          "type": "uint256"
        }
      ],
      "name": "acceptArmyInBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "armySide",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "armyUnitsAdditionalMultipliers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "armyUnitsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetGroupId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetTypeId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "battleTimeInfo",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "beginTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateAllCasualties",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "armyAddress",
          "type": "address"
        }
      ],
      "name": "calculateArmyCasualties",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "globalMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseBattleDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumBattleDuration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isCultistsAttacked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "side1UnitsAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "side2UnitsAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBattleDuration",
          "type": "uint256"
        }
      ],
      "name": "calculateBattleDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateStage1Casualties",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_side1Casualties",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_side2Casualties",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "stageParams",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "stage1Side1Casualties",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "stage1Side2Casualties",
          "type": "uint256[]"
        }
      ],
      "name": "calculateStage2Casualties",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_side1Casualties",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_side2Casualties",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "stageParams",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canEndBattle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "casualties",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "era",
      "outputs": [
        {
          "internalType": "contract IEra",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eraNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isCultistsAttacked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maxBattleDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "side1UnitsAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "side2UnitsAmount",
          "type": "uint256"
        }
      ],
      "name": "getBattleDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initParams",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEndedBattle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLobbyTime",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "position",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "sideUnitsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningSide",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "world",
      "outputs": [
        {
          "internalType": "contract IWorld",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "worldAssetFactory",
      "outputs": [
        {
          "internalType": "contract IWorldAssetFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4967778e99b1edc6aad635c05c867ad72b4744126fd702ec92c46de9845a4688",
  "receipt": {
    "to": null,
    "from": "0xA2F2078006658594Fa058Ee8dBD08f3AA2Bb6C9c",
    "contractAddress": "0xF9741a1a0Aabc5543c441fd6E01BEa899bEC3c0c",
    "transactionIndex": 4,
    "gasUsed": "3111684",
    "logsBloom": "0x
    "blockHash": "0x565dac39b0d6753521896a8bd4c6807c344c8af8cb11ca4c8707e923de260968",
    "transactionHash": "0x4967778e99b1edc6aad635c05c867ad72b4744126fd702ec92c46de9845a4688",
    "logs": [],
    "blockNumber": 34678546,
    "cumulativeGasUsed": "7790514",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2627c9fa14fa5cb6e37bf26f5785fa8b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BattleCannotAcceptCultistsArmyWhenCultistsAmountChangedToLowerValueThanDesired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BattleCannotBeCreatedByDesiringToAttackCultistsArmyWithoutUnits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BattleCannotBeCreatedWhenArmyUnitsExceedDesiredAmountToAttack\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BattleCannotBeCreatedWhenAttackedArmyIsAlmostOnAnotherPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BattleCannotBeCreatedWithArmiesHavingZeroUnits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BattleCannotBeFinishedAtThisTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BattleCannotBeFinishedMoreThanOnce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyActiveGame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMightyCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyWorldAssetFromSameEra\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"armyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"}],\"name\":\"ArmyJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"BattleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"armyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"}],\"name\":\"acceptArmyInBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"armySide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"armyUnitsAdditionalMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"armyUnitsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetGroupId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetTypeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleTimeInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"beginTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateAllCasualties\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"armyAddress\",\"type\":\"address\"}],\"name\":\"calculateArmyCasualties\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"globalMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseBattleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBattleDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCultistsAttacked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"side1UnitsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"side2UnitsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBattleDuration\",\"type\":\"uint256\"}],\"name\":\"calculateBattleDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateStage1Casualties\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_side1Casualties\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_side2Casualties\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"stageParams\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stage1Side1Casualties\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stage1Side2Casualties\",\"type\":\"uint256[]\"}],\"name\":\"calculateStage2Casualties\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_side1Casualties\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_side2Casualties\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"stageParams\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canEndBattle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"casualties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"era\",\"outputs\":[{\"internalType\":\"contract IEra\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eraNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCultistsAttacked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxBattleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"side1UnitsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"side2UnitsAmount\",\"type\":\"uint256\"}],\"name\":\"getBattleDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initParams\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEndedBattle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLobbyTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"position\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sideUnitsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningSide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"world\",\"outputs\":[{\"internalType\":\"contract IWorld\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldAssetFactory\",\"outputs\":[{\"internalType\":\"contract IWorldAssetFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ArmyJoined(address,uint256)\":{\"params\":{\"armyAddress\":\"Address of the joined army\",\"side\":\"Side to which army is joined (sideA = 1, sideB = 2)\"}},\"BattleEnded(uint256)\":{\"params\":{\"endTime\":\"Time at which battle is ended\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptArmyInBattle(address,uint256)\":{\"details\":\"Even though function is opened, it can only be called by world asset\",\"params\":{\"armyAddress\":\"Army address\",\"side\":\"Side to which army will join\"}},\"assetGroupId()\":{\"details\":\"Reads data from proxy's storage\",\"returns\":{\"_0\":\"World asset group id\"}},\"assetTypeId()\":{\"details\":\"Reads data from proxy's storage\",\"returns\":{\"_0\":\"World asset type id\"}},\"calculateAllCasualties()\":{\"details\":\"Uses values from battles' sideUnitsAmount in order to calculate casualties (can be executed while battle is still not fully formed)\",\"returns\":{\"_0\":\"Side A casualties\",\"_1\":\"Side A casualties\",\"_2\":\"Winning side (0 - both sides lost, 1 - side A Won, 2 - side B Won\"}},\"calculateArmyCasualties(address)\":{\"details\":\"Provides valid results only for ended battle\",\"params\":{\"armyAddress\":\"Address of army presented in battle\"},\"returns\":{\"_0\":\"Is army won\",\"_1\":\"Amount of casualties for related unit types\"}},\"calculateBattleDuration(uint256,uint256,uint256,bool,uint256,uint256,uint256)\":{\"details\":\"globalMultiplier, baseBattleDuration parameters from registry\",\"params\":{\"baseBattleDuration\":\"Base battle duration (from registry)\",\"globalMultiplier\":\"Global multiplier (from registry)\",\"isCultistsAttacked\":\"Is cultists attacked\",\"maxBattleDuration\":\"Max allowed battle duration\",\"minBattleDuration\":\"Minimum battle duration (from registry)\",\"units1\":\"Amount of units from attacker army\",\"units2\":\"Amount of units from attacked army\"},\"returns\":{\"_0\":\"Battle duration\"}},\"calculateStage1Casualties()\":{\"details\":\"Uses values from battles' sideUnitsAmount in order to calculate casualties (can be executed while battle is still not fully formed)\",\"returns\":{\"_side1Casualties\":\"Side A casualties\",\"_side2Casualties\":\"Side B casualties\",\"stageParams\":\"Stage params (encoded abi.encode(sideAOffense, sideBOffense, sideADefence, sideBDefence))\"}},\"calculateStage2Casualties(uint256[],uint256[])\":{\"details\":\"Uses values from battles' sideUnitsAmount in order to calculate casualties (can be executed while battle is still not fully formed)\",\"params\":{\"stage1SideACasualties\":\"Stage 1 side A casualties\",\"stage1SideBCasualties\":\"Stage 1 side B casualties\"},\"returns\":{\"_side1Casualties\":\"Side A casualties\",\"_side2Casualties\":\"Side B casualties\",\"stageParams\":\"Stage params (encoded abi.encode(sideAOffense, sideBOffense, sideADefence, sideBDefence))\"}},\"canEndBattle()\":{\"details\":\"Checks if endTime is set and current block.timestamp > beginTime + duration\",\"returns\":{\"_0\":\"Can battle be ended\"}},\"endBattle()\":{\"details\":\"Sets end time\"},\"era()\":{\"details\":\"Value is dereferenced from proxy storage and world\"},\"eraNumber()\":{\"details\":\"Reads data from proxy's storage\",\"returns\":{\"_0\":\"Era number\"}},\"getBattleDuration(bool,uint256,uint256,uint256)\":{\"details\":\"Returns same value as #calculateBattlesDuration but without the need to provide all parameters\",\"params\":{\"isCultistsAttacked\":\"Is cultists attacked\",\"maxBattleDuration\":\"Max allowed battle duration\",\"sideAUnitsAmount\":\"Side A units amount\",\"sideBUnitsAmount\":\"Side B units amount\"},\"returns\":{\"_0\":\"Battle duration\"}},\"init(bytes)\":{\"details\":\"World asset initializer\",\"params\":{\"initParams\":\"Encoded init params (every world asset has own knowledge how to extract data from it)\"}},\"isEndedBattle()\":{\"details\":\"Checks if endTime is not zero\",\"returns\":{\"_0\":\"Is ended battle\"}},\"isLobbyTime()\":{\"details\":\"Calculates if lobby is opened\",\"returns\":{\"_0\":\"Is lobby is opened\"}},\"registry()\":{\"details\":\"Value is dereferenced from world\"},\"world()\":{\"details\":\"Value is dereferenced from proxy storage\"},\"worldAssetFactory()\":{\"details\":\"Value is dereferenced from registry\"}},\"stateVariables\":{\"armySide\":{\"details\":\"Updated when #acceptArmyInBattle is called\",\"params\":{\"armyAddress\":\"Army address\"},\"return\":\"Side of specified army (sideA = 1, sideB = 2)\",\"returns\":{\"_0\":\"Side of specified army (sideA = 1, sideB = 2)\"}},\"armyUnitsAdditionalMultipliers\":{\"details\":\"Updated when army joins battle\",\"params\":{\"armyAddress\":\"Army address\",\"unitTypeId\":\"Unit type id\"},\"return\":\"Unit amount multiplier\",\"returns\":{\"_0\":\"Unit amount multiplier\"}},\"armyUnitsAmount\":{\"details\":\"Updated when army joins battle\",\"params\":{\"armyAddress\":\"Army address\",\"unitTypeId\":\"Unit type id\"},\"return\":\"Amount of units by army address and unit type\",\"returns\":{\"_0\":\"Amount of units by army address and unit type\"}},\"battleTimeInfo\":{\"details\":\"Updated when battle initialized, first armies joined and ended (#initBattle, #acceptArmyInBattle, #endBattle)\",\"returns\":{\"beginTime\":\"Time when battle is began\",\"duration\":\"Battle duration, initialized when first two armies joined\",\"endTime\":\"Time when battle is ended\"}},\"battleWithCultistsInitiationInfo\":{\"details\":\"Specifies amount of cultists to draw into the battle if battle is initiated by attacking them\"},\"casualties\":{\"details\":\"Updated when #acceptArmyInBattle is called\",\"params\":{\"side\":\"Side of which query casualties amount (sideA = 1, sideB = 2)\",\"unitTypeId\":\"Unit type id\"},\"return\":\"Amount of casualties by side and unit type\",\"returns\":{\"_0\":\"Amount of casualties by side and unit type\"}},\"position\":{\"details\":\"Immutable, initialized on the battle creation\"},\"sideUnitsAmount\":{\"details\":\"Updated when army joins side\",\"params\":{\"side\":\"Side of which query units amount (sideA = 1, sideB = 2)\",\"unitTypeId\":\"Unit type id\"},\"return\":\"Amount of units by specified side and unit type\",\"returns\":{\"_0\":\"Amount of units by specified side and unit type\"}},\"winningSide\":{\"details\":\"Updated when #endBattle is called\",\"return\":\"Winning side (no winner = 0, sideA = 1, sideB = 2)\",\"returns\":{\"_0\":\"Winning side (no winner = 0, sideA = 1, sideB = 2)\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"BattleCannotAcceptCultistsArmyWhenCultistsAmountChangedToLowerValueThanDesired()\":[{\"notice\":\"Thrown when attempting to accept cultists army to the battle but their amount got smaller than desired to attack\"}],\"BattleCannotBeCreatedByDesiringToAttackCultistsArmyWithoutUnits()\":[{\"notice\":\"Thrown when attempting to begin battle by attacking cultists army with desire to draw zero units to the battle\"}],\"BattleCannotBeCreatedWhenArmyUnitsExceedDesiredAmountToAttack()\":[{\"notice\":\"Thrown when attempting to begin battle by attacking army with MAX amount of units to attack, but their value increased to more than MAX\"}],\"BattleCannotBeCreatedWhenAttackedArmyIsAlmostOnAnotherPosition()\":[{\"notice\":\"Thrown when attempting to start battle by attacking army when maneuver duration left less than minimum battle duration\"}],\"BattleCannotBeCreatedWithArmiesHavingZeroUnits()\":[{\"notice\":\"Thrown when attempting to begin battle with armies either of which has zero units\"}],\"BattleCannotBeFinishedAtThisTime()\":[{\"notice\":\"Thrown when attempting to finish battle while time for it has not yet come\"}],\"BattleCannotBeFinishedMoreThanOnce()\":[{\"notice\":\"Thrown when attempting to finish battle when it is already finished\"}],\"OnlyActiveGame()\":[{\"notice\":\"Thrown when attempting to call action which can only be called in active game (started and not finished)\"}],\"OnlyMightyCreator()\":[{\"notice\":\"Thrown when attempting to call action which can only be called by mighty creator\"}],\"OnlyWorldAssetFromSameEra()\":[{\"notice\":\"Thrown when attempting to call action which can only be called by world asset from same era\"}]},\"events\":{\"ArmyJoined(address,uint256)\":{\"notice\":\"Emitted when army joined battle\"},\"BattleEnded(uint256)\":{\"notice\":\"Emitted when #endBattle is called\"}},\"kind\":\"user\",\"methods\":{\"acceptArmyInBattle(address,uint256)\":{\"notice\":\"Accepts army in battle\"},\"armySide(address)\":{\"notice\":\"Mapping that contains side at which joined army is on\"},\"armyUnitsAdditionalMultipliers(address,bytes32)\":{\"notice\":\"Mapping that contains unit multiplier by army address and unit type\"},\"armyUnitsAmount(address,bytes32)\":{\"notice\":\"Mapping that contains amount of units by army address and unit type\"},\"assetGroupId()\":{\"notice\":\"Returns world asset group id\"},\"assetTypeId()\":{\"notice\":\"Returns world asset type id\"},\"battleTimeInfo()\":{\"notice\":\"Battle time info\"},\"calculateAllCasualties()\":{\"notice\":\"Calculates casualties for all battle stages\"},\"calculateArmyCasualties(address)\":{\"notice\":\"Calculates casualties for specified army\"},\"calculateBattleDuration(uint256,uint256,uint256,bool,uint256,uint256,uint256)\":{\"notice\":\"Calculates battle duration based on specified parameters\"},\"calculateStage1Casualties()\":{\"notice\":\"Calculates casualties for first battle stage\"},\"calculateStage2Casualties(uint256[],uint256[])\":{\"notice\":\"Calculates casualties for second battle stage (based on casualties from first battle stage)\"},\"canEndBattle()\":{\"notice\":\"Calculates if battle can be ended\"},\"casualties(uint256,bytes32)\":{\"notice\":\"Mapping that contains amount of casualties\"},\"endBattle()\":{\"notice\":\"Ends battle\"},\"era()\":{\"notice\":\"Era\"},\"eraNumber()\":{\"notice\":\"Returns era number\"},\"getBattleDuration(bool,uint256,uint256,uint256)\":{\"notice\":\"Calculates battle duration\"},\"isEndedBattle()\":{\"notice\":\"Calculates if battle is ended\"},\"isLobbyTime()\":{\"notice\":\"Calculates if lobby is opened\"},\"position()\":{\"notice\":\"Position at which battle is being held\"},\"registry()\":{\"notice\":\"Registry\"},\"sideUnitsAmount(uint256,bytes32)\":{\"notice\":\"Mapping that contains units amount by side and unit type\"},\"winningSide()\":{\"notice\":\"Winning side\"},\"world()\":{\"notice\":\"World\"},\"worldAssetFactory()\":{\"notice\":\"Returns world asset factory from registry\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/assets/battle/Battle.sol\":\"Battle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":40},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/const/GameAssetTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n// Group types\\r\\nbytes32 constant ARMY_GROUP_TYPE_ID = keccak256(bytes((\\\"army\\\")));\\r\\nbytes32 constant ERA_GROUP_TYPE_ID = keccak256(bytes((\\\"era\\\")));\\r\\nbytes32 constant WORKERS_POOL_GROUP_TYPE_ID = keccak256(bytes(\\\"workersPool\\\"));\\r\\nbytes32 constant UNITS_POOL_GROUP_TYPE_ID = keccak256(bytes(\\\"unitsPool\\\"));\\r\\nbytes32 constant SETTLEMENT_MARKET_GROUP_TYPE_ID = keccak256(bytes(\\\"settlementsMarket\\\"));\\r\\nbytes32 constant BATTLE_GROUP_TYPE_ID = keccak256(bytes(\\\"battle\\\"));\\r\\nbytes32 constant REGION_GROUP_TYPE_ID = keccak256(bytes(\\\"region\\\"));\\r\\nbytes32 constant SETTLEMENT_GROUP_TYPE_ID = keccak256(bytes(\\\"settlement\\\"));\\r\\nbytes32 constant TILE_CAPTURING_SYSTEM_GROUP_TYPE_ID = keccak256(bytes(\\\"tileCapturingSystem\\\"));\\r\\nbytes32 constant PROSPERITY_GROUP_TYPE_ID = keccak256(bytes(\\\"prosperity\\\"));\\r\\nbytes32 constant WORKERS_GROUP_TYPE_ID = keccak256(bytes(\\\"workers\\\"));\\r\\nbytes32 constant RESOURCE_GROUP_TYPE_ID = keccak256(bytes(\\\"resource\\\"));\\r\\nbytes32 constant UNITS_GROUP_TYPE_ID = keccak256(bytes(\\\"units\\\"));\\r\\nbytes32 constant BUILDING_GROUP_TYPE_ID = keccak256(bytes(\\\"building\\\"));\\r\\nbytes32 constant SIEGE_GROUP_TYPE_ID = keccak256(bytes(\\\"siege\\\"));\\r\\n\\r\\n// Asset types\\r\\n\\r\\n// Basic type\\r\\nbytes32 constant BASIC_TYPE_ID = keccak256(bytes(\\\"BASIC\\\"));\\r\\n\\r\\n// Settlement type\\r\\nbytes32 constant CULTISTS_SETTLEMENT_TYPE_ID = keccak256(bytes(\\\"CULTISTS\\\"));\\r\\n\\r\\n// Unit pool types\\r\\nbytes32 constant INGOTS_UNIT_POOL_TYPE_ID = keccak256(bytes(\\\"INGOTS_UNIT_POOL\\\"));\\r\\nbytes32 constant WORKERS_UNIT_POOL_TYPE_ID = keccak256(bytes(\\\"WORKERS_UNIT_POOL\\\"));\\r\\n\\r\\n// Resource types\\r\\nbytes32 constant FOOD_TYPE_ID = keccak256(bytes(\\\"FOOD\\\"));\\r\\nbytes32 constant WOOD_TYPE_ID = keccak256(bytes(\\\"WOOD\\\"));\\r\\nbytes32 constant ORE_TYPE_ID = keccak256(bytes(\\\"ORE\\\"));\\r\\nbytes32 constant INGOT_TYPE_ID = keccak256(bytes(\\\"INGOT\\\"));\\r\\nbytes32 constant HEALTH_TYPE_ID = keccak256(bytes(\\\"HEALTH\\\"));\\r\\n\\r\\n// Building types\\r\\nbytes32 constant FARM_TYPE_ID = keccak256(bytes(\\\"FARM\\\"));\\r\\nbytes32 constant LUMBERMILL_TYPE_ID = keccak256(bytes(\\\"LUMBERMILL\\\"));\\r\\nbytes32 constant MINE_TYPE_ID = keccak256(bytes(\\\"MINE\\\"));\\r\\nbytes32 constant SMITHY_TYPE_ID = keccak256(bytes(\\\"SMITHY\\\"));\\r\\nbytes32 constant FORT_TYPE_ID = keccak256(bytes(\\\"FORT\\\"));\\r\\n\\r\\n// Unit types\\r\\nbytes32 constant WARRIOR_TYPE_ID = keccak256(bytes(\\\"WARRIOR\\\"));\\r\\nbytes32 constant ARCHER_TYPE_ID = keccak256(bytes(\\\"ARCHER\\\"));\\r\\nbytes32 constant HORSEMAN_TYPE_ID = keccak256(bytes(\\\"HORSEMAN\\\"));\\r\\n\",\"keccak256\":\"0x15fa14145d2da8ab7c9774768d235a0fb12f363b9fb490253cb894be3d4c3a84\",\"license\":\"MIT\"},\"contracts/core/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./assets/IWorldAssetFactory.sol\\\";\\r\\n\\r\\n/// @title Registry interface\\r\\n/// @notice Functions related to current game configuration\\r\\ninterface IRegistry {\\r\\n    struct GameResource {\\r\\n        string tokenName;\\r\\n        string tokenSymbol;\\r\\n        bytes32 resourceTypeId;\\r\\n    }\\r\\n\\r\\n    struct GameUnit {\\r\\n        string tokenName;\\r\\n        string tokenSymbol;\\r\\n        bytes32 unitTypeId;\\r\\n    }\\r\\n\\r\\n    struct UnitStats {\\r\\n        uint256 offenseStage1;\\r\\n        uint256 defenceStage1;\\r\\n        uint256 offenseStage2;\\r\\n        uint256 defenceStage2;\\r\\n        uint256 siegePower;\\r\\n        uint256 siegeSupport;\\r\\n    }\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice An address which can configure/reconfigure current game\\r\\n    /// @dev Immutable, initialized on the registry creation\\r\\n    function mightyCreator() external view returns (address);\\r\\n\\r\\n    /// @notice World asset factory\\r\\n    /// @dev During new world asset creation process registry is asked for factory contract\\r\\n    function worldAssetFactory() external view returns (IWorldAssetFactory);\\r\\n\\r\\n    /// @notice Global multiplier\\r\\n    /// @dev Immutable, initialized on the registry creation\\r\\n    function globalMultiplier() external view returns (uint256);\\r\\n\\r\\n    /// @notice Settlement starting price\\r\\n    /// @dev Immutable, initialized on the registry creation\\r\\n    function settlementStartingPrice() external view returns (uint256);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by mighty creator\\r\\n    error OnlyMightyCreator();\\r\\n\\r\\n    /// @notice Thrown when attempting to call function by providing unknown parameter\\r\\n    error UnknownInputParameter();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Proxy initializer\\r\\n    /// @dev Called by address which created current instance\\r\\n    /// @param globalMultiplier Global multiplier\\r\\n    /// @param settlementStartingPrice Settlement starting price\\r\\n    function init(\\r\\n        uint256 globalMultiplier,\\r\\n        uint256 settlementStartingPrice\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Sets new mighty creator\\r\\n    /// @dev Even though function is opened, it can be called only by mightyCreator\\r\\n    /// @param newMightyCreator New mighty creator\\r\\n    function setMightyCreator(address newMightyCreator) external;\\r\\n\\r\\n    /// @notice Sets provided address as world asset factory contract\\r\\n    /// @dev Even though function is opened, it can be called only by mightyCreator\\r\\n    /// @param worldAssetFactoryAddress World asset factory address\\r\\n    function setWorldAssetFactory(address worldAssetFactoryAddress) external;\\r\\n\\r\\n    /// @notice Calculates worker capacity coefficient for provided building type id\\r\\n    /// @dev Used for internal calculation of max workers for each building\\r\\n    /// @param buildingTypeId Building type id\\r\\n    /// @return workerCapacityCoefficient Worker capacity coefficient\\r\\n    function getWorkerCapacityCoefficient(bytes32 buildingTypeId) external pure returns (uint256 workerCapacityCoefficient);\\r\\n\\r\\n    /// @notice Calculates basic production building coefficient\\r\\n    /// @dev used for internal calculation of production result\\r\\n    /// @param buildingTypeId Building type id\\r\\n    /// @return basicProductionBuildingCoefficient Basic production building coefficient\\r\\n    function getBasicProductionBuildingCoefficient(bytes32 buildingTypeId) external pure returns (uint256 basicProductionBuildingCoefficient);\\r\\n\\r\\n    /// @notice Returns corruptionIndex by resource type id\\r\\n    /// @dev Used for calculation of how much corruptionIndex increased/decreased\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    /// @return corruptionIndex Amount of corruptionIndex per 1 resource (both are in 1e18 precision)\\r\\n    function getCorruptionIndexByResource(bytes32 resourceTypeId) external pure returns (uint256 corruptionIndex);\\r\\n\\r\\n    /// @notice Returns resource weight\\r\\n    /// @dev Used for calculation how much prosperity will be produced by resource in treasury\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    /// @return resourceWeight Resource weight (in 1e0 precision)\\r\\n    function getResourceWeight(bytes32 resourceTypeId) external pure returns (uint256 resourceWeight);\\r\\n\\r\\n    /// @notice Returns robbery points per damage multiplier\\r\\n    /// @dev Used for determination how much robbery points will be given\\r\\n    /// @return robberyPointsPerDamageMultiplier Robbery points per damage multiplier (in 1e18 precision)\\r\\n    function getRobberyPointsPerDamageMultiplier() external pure returns (uint256 robberyPointsPerDamageMultiplier);\\r\\n\\r\\n    /// @notice Returns robbery point multiplier by provided resource type id\\r\\n    /// @dev Used in calculation how many resources can be exchanged for robbery points\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    /// @return robberyPointsToResourceMultiplier Robbery point multiplier (in 1e18 precision)\\r\\n    function getRobberyPointsToResourceMultiplier(bytes32 resourceTypeId) external view returns (uint256 robberyPointsToResourceMultiplier);\\r\\n\\r\\n    /// @notice Returns global multiplier\\r\\n    /// @dev Used everywhere, where time is involved. Essentially determines game speed\\r\\n    /// @return globalMultiplier Global multiplier\\r\\n    function getGlobalMultiplier() external view returns (uint256 globalMultiplier);\\r\\n\\r\\n    /// @notice Returns unit stats by provided unit type\\r\\n    /// @dev Used everywhere, where game logic based on unit stats\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return unitStats Unit stats\\r\\n    function getUnitStats(bytes32 unitTypeId) external pure returns (UnitStats memory unitStats);\\r\\n\\r\\n    /// @notice Returns production to treasury percent\\r\\n    /// @dev Determines how much of buildings production will go to treasury (if not full)\\r\\n    /// @param toTreasuryPercent Production to treasury percent (in 1e18 precision, where 1e18 is 100%)\\r\\n    function getToTreasuryPercent() external pure returns (uint256 toTreasuryPercent);\\r\\n\\r\\n    /// @notice Returns base battle duration\\r\\n    /// @dev Used internally to determine how long battle will last\\r\\n    /// @return baseBattleDuration Base battle duration\\r\\n    function getBaseBattleDuration() external view returns (uint256 baseBattleDuration);\\r\\n\\r\\n    /// @notice Returns battle duration losing army stun multiplier\\r\\n    /// @dev Used internally to determine how long stun will last after army lost the battle\\r\\n    /// @return battleDurationLosingArmyStunMultiplier Battle duration losing army stun multiplier\\r\\n    function getBattleDurationLosingArmyStunMultiplier() external pure returns (uint256 battleDurationLosingArmyStunMultiplier);\\r\\n\\r\\n    /// @notice Returns battle duration winning army stun multiplier\\r\\n    /// @dev Used internally to determine how long stun will last after army won the battle\\r\\n    /// @return battleDurationWinningArmyStunMultiplier Battle duration winning army stun multiplier\\r\\n    function getBattleDurationWinningArmyStunMultiplier() external pure returns (uint256 battleDurationWinningArmyStunMultiplier);\\r\\n\\r\\n    /// @notice Returns maneuver duration stun multiplier\\r\\n    /// @dev Used internally to determine how long stun will last after armies' maneuver\\r\\n    /// @return maneuverDurationStunMultiplier Maneuver duration stun multiplier\\r\\n    function getManeuverDurationStunMultiplier() external pure returns (uint256 maneuverDurationStunMultiplier);\\r\\n\\r\\n    /// @notice Returns game building type ids\\r\\n    /// @dev Used internally to determine which buildings will be created on placing settlement\\r\\n    /// @return buildingTypeIds Building type ids\\r\\n    function getBuildingTypeIds() external view returns (bytes32[] memory buildingTypeIds);\\r\\n\\r\\n    /// @notice Returns game unit type ids\\r\\n    /// @dev Used internally in many places where interaction with units is necessary\\r\\n    /// @return unitTypeIds Unit type ids\\r\\n    function getUnitTypeIds() external view returns (bytes32[] memory unitTypeIds);\\r\\n\\r\\n    /// @notice Returns game resources\\r\\n    /// @dev Used internally to determine upgrade costs and providing initial resources for settlement owner based on his tier\\r\\n    /// @param resources Game resources\\r\\n    function getGameResources() external view returns (GameResource[] memory resources);\\r\\n\\r\\n    /// @notice Returns game units\\r\\n    /// @dev Used internally in many places where interaction with units is necessary\\r\\n    /// @return units Game units\\r\\n    function getGameUnits() external view returns (GameUnit[] memory units);\\r\\n\\r\\n    /// @notice Returns unit hiring fort hp multiplier\\r\\n    /// @dev Used to determine how much units in army can be presented based on its current fort hp and this parameter\\r\\n    /// @return unitHiringFortHpMultiplier Unit hiring fort hp multiplier\\r\\n    function getUnitHiringFortHpMultiplier() external pure returns (uint256 unitHiringFortHpMultiplier);\\r\\n\\r\\n    /// @notice Returns how much resource unit can take from treasury to reduce maneuver duration\\r\\n    /// @dev Used internally to calculate army's maneuver speed\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return unitResourceUsagePer1SecondOfDecreasedManeuverDuration Amount of resource to spend per unit per 1 second of decreased maneuver duration (in 1e18 precision)\\r\\n    function getUnitResourceUsagePer1SecondOfDecreasedManeuverDuration(bytes32 unitTypeId) external pure returns (uint256 unitResourceUsagePer1SecondOfDecreasedManeuverDuration);\\r\\n\\r\\n    /// @notice Returns how much prosperity will be given for provided unit type id\\r\\n    /// @dev Used internally to calculate how much prosperity will be given\\r\\n    /// @return prosperityPerUnit Prosperity amount per one unit (in 1e18 precision)\\r\\n    function getProsperityForUnitLiquidation(bytes32 unitTypeId) external pure returns (uint256 prosperityPerUnit);\\r\\n\\r\\n    /// @notice Returns how much workers will be given for provided unit type id\\r\\n    /// @dev Used internally to calculate how much workers will be given\\r\\n    /// @return workersPerUnit Workers amount per one unit (in 1e18 precision)\\r\\n    function getWorkersForUnitLiquidation(bytes32 unitTypeId) external pure returns (uint256 workersPerUnit);\\r\\n\\r\\n    /// @notice Returns cultists summon delay\\r\\n    /// @dev Used to determine is cultists can be re-summoned\\r\\n    /// @return cultistsSummonDelay Cultists summon delay (in seconds)\\r\\n    function getCultistsSummonDelay() external pure returns (uint256 cultistsSummonDelay);\\r\\n\\r\\n    /// @notice Returns max settlements that can be placed in one region\\r\\n    /// @dev Cultists does not count (so +1 with cultists)\\r\\n    /// @return maxSettlementsPerRegion Max settlements that can be placed in one region\\r\\n    function getMaxSettlementsPerRegion() external pure returns (uint256 maxSettlementsPerRegion);\\r\\n\\r\\n    /// @notice Returns interval duration where world is not destructible after recent cultists summon\\r\\n    /// @dev Used to determine if destruction is available or not\\r\\n    /// @return cultistsNoDestructionDelay No destruction interval duration (in seconds)\\r\\n    function getCultistsNoDestructionDelay() external pure returns (uint256 cultistsNoDestructionDelay);\\r\\n\\r\\n    /// @notice Returns value of cultists per region which determines cultists threshold for world destruction\\r\\n    /// @dev Used to determine amount of cultists that have to be present for world destruction\\r\\n    /// @return cultistsPerRegionMultiplier Value of cultists per region\\r\\n    function getCultistsPerRegionMultiplier() external pure returns (uint256 cultistsPerRegionMultiplier);\\r\\n\\r\\n    /// @notice Returns maximum amount of cultists that can be present in region\\r\\n    /// @dev Used to determine how many cultists will be summoned\\r\\n    /// @return maxCultistsPerRegion Maximum amount of cultists\\r\\n    function getMaxCultistsPerRegion() external pure returns (uint256 maxCultistsPerRegion);\\r\\n\\r\\n    /// @notice Returns unit type id of cultists army\\r\\n    /// @dev Determines type of unit in cultists army\\r\\n    /// @return cultistUnitTypeId Cultists unit type id\\r\\n    function getCultistUnitTypeId() external pure returns (bytes32 cultistUnitTypeId);\\r\\n\\r\\n    /// @notice Returns building token transfer threshold percent\\r\\n    /// @dev Used to determine is building token transfer allowed based on treasury percent\\r\\n    /// @return buildingTokenTransferThresholdPercent Building token transfer threshold percent\\r\\n    function getBuildingTokenTransferThresholdPercent() external pure returns (uint256 buildingTokenTransferThresholdPercent);\\r\\n\\r\\n    /// @notice Returns new settlement starting price in settlements market\\r\\n    /// @dev Used to determine how much base price for first settlement will be\\r\\n    /// @return newSettlementStartingPrice New settlement starting price\\r\\n    function getNewSettlementStartingPrice() external view returns (uint256 newSettlementStartingPrice);\\r\\n\\r\\n    /// @notice Returns amount of production ticks\\r\\n    /// @dev Used for production calculation\\r\\n    /// @return ticks Amount of production ticks\\r\\n    function getProductionTicksInSecond() external view returns (uint256 ticks);\\r\\n\\r\\n    /// @notice Returns unit price increase in unit pool for each extra unit to buy (value returned as numerator and denominator)\\r\\n    /// @dev Used for determination of unit price\\r\\n    /// @return numerator Numerator\\r\\n    /// @return denominator Denominator\\r\\n    function getUnitPriceIncreaseForEachUnit() external pure returns (uint256 numerator, uint256 denominator);\\r\\n\\r\\n    /// @notice Returns max allowed units to buy per transaction\\r\\n    /// @dev Limit specified in order to limit potential price overflows (value is returned in 1e18 precision)\\r\\n    /// @return maxAllowedUnitsToBuy Max allowed units to buy\\r\\n    function getMaxAllowedUnitsToBuyPerTransaction() external pure returns (uint256 maxAllowedUnitsToBuy);\\r\\n\\r\\n    /// @notice Returns unit pool price drop per second for provided unit type id (value returned as numerator and denominator)\\r\\n    /// @dev Used for determination of current unit pool price\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return numerator Numerator\\r\\n    /// @return denominator Denominator\\r\\n    function getUnitPriceDropByUnitTypeId(bytes32 unitTypeId) external pure returns (uint256 numerator, uint256 denominator);\\r\\n\\r\\n    /// @notice Returns worker pool price drop per second for each worker (value returned as numerator and denominator)\\r\\n    /// @dev Used for determination of worker price\\r\\n    /// @return numerator Numerator\\r\\n    /// @return denominator Denominator\\r\\n    function getWorkerPriceIncreaseForEachWorker() external pure returns (uint256 numerator, uint256 denominator);\\r\\n\\r\\n    /// @notice Returns max allowed workers to buy per transaction\\r\\n    /// @dev Limit specified in order to limit potential price overflows (value is returned in 1e18 precision)\\r\\n    /// @return maxAllowedWorkersToBuy Max allowed workers to buy\\r\\n    function getMaxAllowedWorkersToBuyPerTransaction() external pure returns (uint256 maxAllowedWorkersToBuy);\\r\\n\\r\\n    /// @notice Returns workers pool price drop per second, provided as numerator and denominator\\r\\n    /// @dev Used for determination of current workers pool price\\r\\n    /// @return numerator Numerator\\r\\n    /// @return denominator Denominator\\r\\n    function getWorkerPriceDrop() external pure returns (uint256 numerator, uint256 denominator);\\r\\n\\r\\n    /// @notice Returns max potential advanced production buff gain from capturing tiles\\r\\n    /// @dev Used for determination advanced production multiplier\\r\\n    /// @return maxAdvancedProductionTileBuff Max potential advanced production from tile buff\\r\\n    function getMaxAdvancedProductionTileBuff() external pure returns (uint256 maxAdvancedProductionTileBuff);\\r\\n\\r\\n    /// @notice Returns capture tile duration per each tile in distance from settlement to selected tile\\r\\n    /// @dev Used to capture tile duration calculation\\r\\n    /// @return captureTileDurationPerTile Capture tile duration per tile\\r\\n    function getCaptureTileDurationPerTile() external pure returns (uint256 captureTileDurationPerTile);\\r\\n\\r\\n    /// @notice Returns next capture prosperity basic threshold\\r\\n    /// @dev Used to determine if new bid on captured tile is possible\\r\\n    /// @return nextCaptureProsperityBasicThreshold Next capture prosperity basic threshold\\r\\n    function getNextCaptureProsperityBasicThreshold() external pure returns (uint256 nextCaptureProsperityBasicThreshold);\\r\\n\\r\\n    /// @notice Returns next capture prosperity per tile threshold\\r\\n    /// @dev Used to determine if new bid on captured tile is possible\\r\\n    /// @return nextCaptureProsperityPerTileThreshold Next capture prosperity per tile threshold\\r\\n    function getNextCaptureProsperityPerTileThreshold() external pure returns (uint256 nextCaptureProsperityPerTileThreshold);\\r\\n\\r\\n    /// @notice Returns percent of prosperity that has to be in settlement for claiming captured tile\\r\\n    /// @dev Used to determine if tile claim is possible\\r\\n    /// @return necessaryProsperityPercentForClaimingTileCapture Necessary prosperity percent for claiming tile capture\\r\\n    function getNecessaryProsperityPercentForClaimingTileCapture() external pure returns (uint256 necessaryProsperityPercentForClaimingTileCapture);\\r\\n\\r\\n    /// @notice Returns tile capture cancellation fee\\r\\n    /// @dev Used to determine how much prosperity has to be given in order to cancel tile capture\\r\\n    /// @return tileCaptureCancellationFee Tile capture cancellation fee\\r\\n    function getTileCaptureCancellationFee() external pure returns (uint256 tileCaptureCancellationFee);\\r\\n\\r\\n    /// @notice Returns max captured tiles for settlement\\r\\n    /// @dev Used to determine whether settlement can initiate tile capture\\r\\n    /// @param tileBonusType Tile bonus type\\r\\n    /// @return maxCapturedTilesForSettlement Max captured tiles for settlement with this bonus type\\r\\n    function getMaxCapturedTilesForSettlement(uint8 tileBonusType) external pure returns (uint256 maxCapturedTilesForSettlement);\\r\\n\\r\\n    /// @notice Returns advanced production tile bonus by variation\\r\\n    /// @dev Used to determine tile bonus by tile bonus variation\\r\\n    /// @param tileBonusVariation Tile bonus variation\\r\\n    /// @return buildingTypeId Building type id\\r\\n    /// @return capacityAmountMultiplier Capacity amount multiplier\\r\\n    function getAdvancedProductionTileBonusByVariation(uint8 tileBonusVariation) external pure returns (bytes32 buildingTypeId, uint256 capacityAmountMultiplier);\\r\\n\\r\\n    /// @notice Returns unit battle multiplier tile bonus by variation\\r\\n    /// @dev Used to determine tile bonus by tile bonus variation\\r\\n    /// @param tileBonusVariation Tile bonus variation\\r\\n    /// @return unitTypeId Unit type id\\r\\n    /// @return unitBattleMultiplier Unit battle multiplier\\r\\n    function getUnitBattleMultiplierTileBonusByVariation(uint8 tileBonusVariation) external pure returns (bytes32 unitTypeId, uint256 unitBattleMultiplier);\\r\\n\\r\\n    /// @notice Returns max region tier\\r\\n    /// @dev Used in validation in region tier increase\\r\\n    /// @return maxRegionTier Max region tier\\r\\n    function getMaxRegionTier() external pure returns (uint256 maxRegionTier);\\r\\n\\r\\n    /// @notice Returns initial cultists amount per region tier\\r\\n    /// @dev Used in region activation\\r\\n    /// @return initialCultistsAmount Initial cultists amount\\r\\n    function getInitialCultistsAmountPerRegionTier() external pure returns (uint256 initialCultistsAmount);\\r\\n\\r\\n    /// @notice Returns initial corruptionIndex amount per region tier\\r\\n    /// @dev Used in region activation and region tier increase handler\\r\\n    /// @return initialCorruptionIndexAmount Initial corruptionIndex amount\\r\\n    function getInitialCorruptionIndexAmountPerRegionTier() external pure returns (uint256 initialCorruptionIndexAmount);\\r\\n\\r\\n    /// @notice Returns settlement price multiplier per increased region tier\\r\\n    /// @dev Used in calculation of new settlement price\\r\\n    /// @return settlementPriceMultiplierPerIncreasedRegionTier Settlement price multiplier per increased region tier\\r\\n    function getSettlementPriceMultiplierPerIncreasedRegionTier() external pure returns (uint256 settlementPriceMultiplierPerIncreasedRegionTier);\\r\\n\\r\\n    /// @notice Returns stun duration multiplier of cancelled secret maneuver\\r\\n    /// @dev Used in calculation of stun duration during cancelling secret maneuver\\r\\n    /// @return stunMultiplierOfCancelledSecretManeuver Stun multiplier of cancelled secret maneuver\\r\\n    function getStunDurationMultiplierOfCancelledSecretManeuver() external pure returns (uint256 stunMultiplierOfCancelledSecretManeuver);\\r\\n\\r\\n    /// @notice Returns max allowed robbery multiplier increase value\\r\\n    /// @dev Used in army siege modification\\r\\n    /// @return maxAllowedRobberyMultiplierIncreaseValue Max allowed robbery multiplier increase value\\r\\n    function getMaxAllowedRobberyMultiplierIncreaseValue() external pure returns (uint256 maxAllowedRobberyMultiplierIncreaseValue);\\r\\n\\r\\n    /// @notice Returns army stun duration per one point of added robbery multiplier\\r\\n    /// @dev Used in army siege modification\\r\\n    /// @return armyStunDurationPerRobberyMultiplier Army stun duration per robbery multiplier\\r\\n    function getArmyStunDurationPerRobberyMultiplier() external pure returns (uint256 armyStunDurationPerRobberyMultiplier);\\r\\n\\r\\n    /// @notice Returns chance for tile with bonus by region tier\\r\\n    /// @dev Used to determine whether tile has bonus or not\\r\\n    /// @param regionTier Region tier\\r\\n    /// @return chanceForTileWithBonus Chance for tile with bonus (in 1e18 precision)\\r\\n    function getChanceForTileWithBonusByRegionTier(uint256 regionTier) external pure returns (uint256 chanceForTileWithBonus);\\r\\n\\r\\n    /// @notice Returns region inclusion price\\r\\n    /// @dev Used to determine amount of token to be taken from msg.sender in order to include region\\r\\n    /// @param regionTier Region tier\\r\\n    /// @return regionInclusionPrice Region inclusion price\\r\\n    function getRegionInclusionPrice(uint256 regionTier) external pure returns (uint256 regionInclusionPrice);\\r\\n\\r\\n    /// @notice Returns region owner settlement purchase percent\\r\\n    /// @dev Used to determine amount of tokens to be sent to region owner when another user buys settlement in his region\\r\\n    /// @param regionTier Region tier\\r\\n    /// @return percent Percent (in 1e18 precision)\\r\\n    function getRegionOwnerSettlementPurchasePercent(uint256 regionTier) external pure returns (uint256 percent);\\r\\n\\r\\n    /// @notice Returns unit pool type by unit type id\\r\\n    /// @dev Used to determine which implementation of unit pool to use for provided unit type\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return unitPoolType Unit pool type\\r\\n    function getUnitPoolType(bytes32 unitTypeId) external pure returns (bytes32 unitPoolType);\\r\\n\\r\\n    /// @notice Returns stun duration army will receive by joining battle at attacking side\\r\\n    /// @dev Used to determine stun duration army will receive by joining battle at attacking side\\r\\n    /// @return stunDuration Stun duration\\r\\n    function getArmyStunDurationByJoiningBattleAtAttackingSide() external pure returns (uint256 stunDuration);\\r\\n\\r\\n    /// @notice Returns initial capture prosperity basic value\\r\\n    /// @dev Used to determine if new bid on captured tile is possible\\r\\n    /// @return initialCaptureProsperityBasicValue Initial capture prosperity basic value\\r\\n    function getInitialCaptureProsperityBasicValue() external pure returns (uint256 initialCaptureProsperityBasicValue);\\r\\n\\r\\n    /// @notice Returns initial capture prosperity per tile value\\r\\n    /// @dev Used to determine if new bid on captured tile is possible\\r\\n    /// @return initialCaptureProsperityPerTileValue Initial capture prosperity per tile value\\r\\n    function getInitialCaptureProsperityPerTileValue() external pure returns (uint256 initialCaptureProsperityPerTileValue);\\r\\n\\r\\n    /// @notice Returns minimum user settlements count in neighboring region required to include region\\r\\n    /// @dev Used to determine whether region can be included or not\\r\\n    /// @return minimumUserSettlementsCount Minimum user settlements count\\r\\n    function getMinimumUserSettlementsCountInNeighboringRegionRequiredToIncludeRegion() external pure returns (uint256 minimumUserSettlementsCount);\\r\\n\\r\\n    /// @notice Returns settlement pay to decrease corruptionIndex penalty multiplier\\r\\n    /// @dev Used to determine how much corruptionIndex penalty settlement will endure whenever its corruptionIndex is lowered by paying to reward pool\\r\\n    /// @return penaltyMultiplier Penalty multiplier\\r\\n    function getSettlementPayToDecreaseCorruptionIndexPenaltyMultiplier() external pure returns (uint256 penaltyMultiplier);\\r\\n\\r\\n    /// @notice Returns minimum battle duration\\r\\n    /// @dev Used to determine battle duration ignoring current world multiplier\\r\\n    /// @return minimumBattleDuration Minimum battle duration\\r\\n    function getMinimumBattleDuration() external pure returns (uint256 minimumBattleDuration);\\r\\n\\r\\n    /// @notice Returns new settlement price increase multiplier\\r\\n    /// @dev Used to determine new settlement purchase price (in 1e18 precision)\\r\\n    /// @return newSettlementPriceIncreaseMultiplier New settlement price increase multiplier\\r\\n    function getNewSettlementPriceIncreaseMultiplier() external pure returns (uint256 newSettlementPriceIncreaseMultiplier);\\r\\n}\\r\\n\",\"keccak256\":\"0xfb8f3200b4836a8fd3144e5b22addf4946b35789ac8909cd8e09fb6b9d763935\",\"license\":\"MIT\"},\"contracts/core/IWorld.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IRegistry.sol\\\";\\r\\nimport \\\"./assets/era/IEra.sol\\\";\\r\\nimport \\\"./geography/IGeography.sol\\\";\\r\\nimport \\\"./crossErasMemory/ICrossErasMemory.sol\\\";\\r\\nimport \\\"./rewardPool/IRewardPool.sol\\\";\\r\\nimport \\\"./distributions/IDistributions.sol\\\";\\r\\nimport \\\"./regionOwnershipToken/IRegionOwnershipToken.sol\\\";\\r\\n\\r\\n/// @title World interface\\r\\n/// @notice Functions to read state/modify state of game world\\r\\ninterface IWorld {\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Registry\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function registry() external view returns (IRegistry);\\r\\n\\r\\n    /// @notice Banners token\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function bannerContract() external view returns (IERC721);\\r\\n\\r\\n    /// @notice ERC20 token for settlement purchase\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function erc20ForSettlementPurchase() external view returns (IERC20);\\r\\n\\r\\n    /// @notice ERC20 token for region inclusion\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function erc20ForRegionInclusion() external view returns (IERC20);\\r\\n\\r\\n    /// @notice Region ownership token\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function regionOwnershipToken() external view returns (IRegionOwnershipToken);\\r\\n\\r\\n    /// @notice Distributions token\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function distributions() external view returns (IDistributions);\\r\\n\\r\\n    /// @notice Cross eras memory\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function crossErasMemory() external view returns (ICrossErasMemory);\\r\\n\\r\\n    /// @notice Reward pool\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function rewardPool() external view returns (IRewardPool);\\r\\n\\r\\n    /// @notice Game begin time\\r\\n    /// @dev Updated when #setGameBeginTime is called\\r\\n    function gameBeginTime() external view returns (uint256);\\r\\n\\r\\n    /// @notice Game end time\\r\\n    /// @dev Updated when #setGameEndTime is called\\r\\n    function gameEndTime() external view returns (uint256);\\r\\n\\r\\n    /// @notice Geography\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function geography() external view returns (IGeography);\\r\\n\\r\\n    /// @notice Current world era\\r\\n    /// @dev Updated when #destroy is called\\r\\n    function currentEraNumber() external view returns (uint256);\\r\\n\\r\\n    /// @notice World eras\\r\\n    /// @dev Updated when world initialized or #destroy is called\\r\\n    function eras(uint256 eraNumber) external view returns (IEra);\\r\\n\\r\\n    /// @notice Mapping containing assets implementations addresses by provided asset id\\r\\n    /// @dev Updated when #setImplementations is called\\r\\n    /// @dev Every worlds assets implementation (code, not data) will be defined by value from this mapping\\r\\n    function implementations(bytes28 assetId) external view returns (address);\\r\\n\\r\\n    /// @notice Mapping containing world asset type by provided era number and address\\r\\n    /// @dev Updated when #addWorldAsset is called\\r\\n    function worldAssets(uint256 eraNumber, address worldAsset) external view returns (bytes32);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when world initialized\\r\\n    /// @param registryAddress Registry contract address\\r\\n    /// @param crossErasMemoryAddress Cross eras memory address\\r\\n    /// @param geographyAddress Geography contract address\\r\\n    /// @param bannersAddress Banners contract address\\r\\n    /// @param erc20ForBuyingSettlementAddress ERC20 token for settlement purchase address\\r\\n    /// @param erc20ForRegionInclusionAddress ERC20 token for region inclusion address\\r\\n    /// @param regionOwnershipTokenAddress Region ownership token address\\r\\n    /// @param distributionsAddress Distributions token address\\r\\n    /// @param rewardPoolAddress Reward pool contract address\\r\\n    event WorldInitialized(\\r\\n        address registryAddress,\\r\\n        address crossErasMemoryAddress,\\r\\n        address geographyAddress,\\r\\n        address bannersAddress,\\r\\n        address erc20ForBuyingSettlementAddress,\\r\\n        address erc20ForRegionInclusionAddress,\\r\\n        address regionOwnershipTokenAddress,\\r\\n        address distributionsAddress,\\r\\n        address rewardPoolAddress\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when #setGameBeginTime is called\\r\\n    /// @param newBeginTime New game begin time\\r\\n    event GameBeginTimeUpdated(uint newBeginTime);\\r\\n\\r\\n    /// @notice Emitted when #setGameEndTime is called\\r\\n    /// @param newEndTime New game end time\\r\\n    event GameEndTimeUpdated(uint newEndTime);\\r\\n\\r\\n    /// @notice Emitted when world initialized or #destroyCurrentEra is called\\r\\n    /// @param newEraAddress New era address\\r\\n    /// @param newEraNumber New era number\\r\\n    event EraCreated(address newEraAddress, uint256 newEraNumber);\\r\\n\\r\\n    /// @notice Emitted after new era initialization\\r\\n    /// @param newEraNumber New era number\\r\\n    event CurrentEraNumberUpdated(uint256 newEraNumber);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called in active game (started and not finished)\\r\\n    error OnlyActiveGame();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by mighty creator\\r\\n    error OnlyMightyCreator();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by mighty creator or reward pool\\r\\n    error OnlyMightyCreatorOrRewardPool();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by world asset factory\\r\\n    error OnlyFactory();\\r\\n\\r\\n    /// @notice Thrown when attempting to destroy current era while cultists destruction delay not passed since last cultists summon\\r\\n    error CurrentEraCannotBeDestroyedDueToCultistsNoDestructionDelayNotPassed();\\r\\n\\r\\n    /// @notice Thrown when attempting to destroy current era while cultists limit not reached\\r\\n    error CurrentEraCannotBeDestroyedDueCultistsLimitNotReached();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Proxy initializer\\r\\n    /// @dev Called by address which created current instance\\r\\n    /// @param packedAddresses Packed addresses (registry, crossErasMemory, geography, banners, erc20ForSettlementPurchase, erc20ForRegionInclusion, regionOwnershipToken, distributions, rewardPool)\\r\\n    /// @param assetIds Asset ids\\r\\n    /// @param implementationAddresses Implementation addresses\\r\\n    function init(\\r\\n        bytes calldata packedAddresses,\\r\\n        bytes28[] calldata assetIds,\\r\\n        address[] calldata implementationAddresses\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Adds an address as world asset\\r\\n    /// @dev Even though function is opened, it can only be called by factory contract\\r\\n    /// @param eraNumber Era number\\r\\n    /// @param worldAssetAddress World asset address\\r\\n    /// @param assetType Asset type\\r\\n    function addWorldAsset(\\r\\n        uint256 eraNumber,\\r\\n        address worldAssetAddress,\\r\\n        bytes32 assetType\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Sets provided address as implementation for provided asset ids\\r\\n    /// @dev Even though function is opened, it can be called only by mightyCreator\\r\\n    /// @param assetIds Asset ids\\r\\n    /// @param implementationAddresses Implementation addresses\\r\\n    function setImplementations(\\r\\n        bytes28[] calldata assetIds,\\r\\n        address[] calldata implementationAddresses\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Mints workers to provided address\\r\\n    /// @dev Even though function is opened, it can only be called by mighty creator\\r\\n    /// @param eraNumber Era number\\r\\n    /// @param to Address which will receive workers\\r\\n    /// @param value Amount of workers to mint\\r\\n    function mintWorkers(\\r\\n        uint256 eraNumber,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Mints units to provided address\\r\\n    /// @dev Even though function is opened, it can only be called by mighty creator\\r\\n    /// @param eraNumber Era number\\r\\n    /// @param unitTypeId Type id of unit to mint\\r\\n    /// @param to Address which will receive units\\r\\n    /// @param value Amount of units to mint\\r\\n    function mintUnits(\\r\\n        uint256 eraNumber,\\r\\n        bytes32 unitTypeId,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Mints resource to provided address\\r\\n    /// @dev Even though function is opened, it can only be called by mighty creator\\r\\n    /// @param eraNumber Era number\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    /// @param to Address which will receive resources\\r\\n    /// @param value Amount of resources to mint\\r\\n    function mintResources(\\r\\n        uint256 eraNumber,\\r\\n        bytes32 resourceTypeId,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Sets game end time\\r\\n    /// @dev Even though function is opened, it can only be called by mighty creator or reward pool\\r\\n    /// @param gameEndTime Game end time\\r\\n    function setGameEndTime(uint256 gameEndTime) external;\\r\\n\\r\\n    /// @notice Sets game begin time\\r\\n    /// @dev Even though function is opened, it can only be called by mighty creator\\r\\n    /// @param gameBeginTime Game begin time\\r\\n    function setGameBeginTime(uint256 gameBeginTime) external;\\r\\n\\r\\n    /// @notice Destroys current era if conditions are met\\r\\n    /// @dev Anyone can call this function\\r\\n    function destroyCurrentEra() external;\\r\\n\\r\\n    /// @notice Returns region radius which is used to determine average region size\\r\\n    /// @dev Immutable\\r\\n    /// @return regionRadius Region radius\\r\\n    function getRegionRadius() external pure returns (uint64 regionRadius);\\r\\n\\r\\n    /// @notice Returns region seed which is used to determine region ids for positions\\r\\n    /// @dev Immutable\\r\\n    /// @return regionSeed Region seed\\r\\n    function getRegionSeed() external pure returns (bytes32 regionSeed);\\r\\n\\r\\n    /// @notice Returns tile bonuses seed\\r\\n    /// @dev Immutable\\r\\n    /// @return tileBonusesSeed Tile bonuses seed\\r\\n    function getTileBonusesSeed() external pure returns (bytes32 tileBonusesSeed);\\r\\n\\r\\n    /// @notice Returns region tier seed\\r\\n    /// @dev Updated when era is changed\\r\\n    /// @return regionTierSeed Region tier seed\\r\\n    function getRegionTierSeed() external view returns (bytes32 regionTierSeed);\\r\\n}\\r\\n\",\"keccak256\":\"0x83bc13d95de563a64672109b094f1b1d9eea987d92d0f154971d4b01774b87c0\",\"license\":\"MIT\"},\"contracts/core/assets/IWorldAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../IWorld.sol\\\";\\r\\nimport \\\"./IWorldAssetFactory.sol\\\";\\r\\n\\r\\ninterface IWorldAsset {\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by mighty creator\\r\\n    error OnlyMightyCreator();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by world asset from same era\\r\\n    error OnlyWorldAssetFromSameEra();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called in active game (started and not finished)\\r\\n    error OnlyActiveGame();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice World\\r\\n    /// @dev Value is dereferenced from proxy storage\\r\\n    function world() external view returns (IWorld);\\r\\n\\r\\n    /// @notice Registry\\r\\n    /// @dev Value is dereferenced from world\\r\\n    function registry() external view returns (IRegistry);\\r\\n\\r\\n    /// @notice Era\\r\\n    /// @dev Value is dereferenced from proxy storage and world\\r\\n    function era() external view returns (IEra);\\r\\n\\r\\n    /// @notice Returns world asset factory from registry\\r\\n    /// @dev Value is dereferenced from registry\\r\\n    function worldAssetFactory() external view returns (IWorldAssetFactory);\\r\\n}\\r\\n\",\"keccak256\":\"0x66dfc3351fa843a05ba500c3f1fe2cc98e72b15368925882ba1d7c4b8e8ab8c3\",\"license\":\"MIT\"},\"contracts/core/assets/IWorldAssetFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/// @title Army factory interface\\r\\n/// @notice Contains instance creator function\\r\\ninterface IWorldAssetFactory {\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by world or world asset\\r\\n    error OnlyWorldOrWorldAsset();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Creates new world asset, sets it into the world and initializes it\\r\\n    /// @param worldAddress World address\\r\\n    /// @param eraNumber Era number\\r\\n    /// @param assetGroupId Asset group id\\r\\n    /// @param assetTypeId Asset type id\\r\\n    /// @param initParams Init params\\r\\n    /// @return worldAssetAddress World asset address\\r\\n    function create(\\r\\n        address worldAddress,\\r\\n        uint256 eraNumber,\\r\\n        bytes32 assetGroupId,\\r\\n        bytes32 assetTypeId,\\r\\n        bytes memory initParams\\r\\n    ) external returns (address worldAssetAddress);\\r\\n}\\r\\n\",\"keccak256\":\"0xd682f8efaf44d830e23277e9d50b3761db83f19d2f963c383b899df922c1e806\",\"license\":\"MIT\"},\"contracts/core/assets/IWorldAssetStorageAccessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../IWorld.sol\\\";\\r\\n\\r\\n/// @title World asset storage accessor interface\\r\\n/// @notice Contains function to identify world asset group and type\\r\\ninterface IWorldAssetStorageAccessor {\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Returns world\\r\\n    /// @dev Reads data from proxy's storage\\r\\n    /// @return world World\\r\\n    function world() external view returns (IWorld world);\\r\\n\\r\\n    /// @notice Returns era number\\r\\n    /// @dev Reads data from proxy's storage\\r\\n    /// @return eraNumber Era number\\r\\n    function eraNumber() external view returns (uint256 eraNumber);\\r\\n\\r\\n    /// @notice Returns world asset group id\\r\\n    /// @dev Reads data from proxy's storage\\r\\n    /// @return assetGroupId World asset group id\\r\\n    function assetGroupId() external view returns (bytes32 assetGroupId);\\r\\n\\r\\n    /// @notice Returns world asset type id\\r\\n    /// @dev Reads data from proxy's storage\\r\\n    /// @return assetTypeId World asset type id\\r\\n    function assetTypeId() external view returns (bytes32 assetTypeId);\\r\\n}\\r\\n\",\"keccak256\":\"0x759555e54d4e18a1e27ac3d6dc507aefecb144b5fd0d46a05486b17c1376281c\",\"license\":\"MIT\"},\"contracts/core/assets/WorldAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../IWorld.sol\\\";\\r\\nimport \\\"./IWorldAsset.sol\\\";\\r\\nimport \\\"./WorldAssetStorageAccessorWithPush0.sol\\\";\\r\\n\\r\\n/// @title Abstract world asset\\r\\n/// @notice World asset must inherit this basic contract\\r\\n/// @dev IMPORTANT: be aware of proxy type of world asset deployed in 'WorldAssetFactory'\\r\\n/// @dev Different network is optimized differently for contract deployment\\r\\n/// @dev In order to support most of them it is required to recompile 'WorldAsset' contracts with 'WorldAssetStorageAccessorXXX' type specified in 'WorldAssetFactory'\\r\\nabstract contract WorldAsset is IWorldAsset, WorldAssetStorageAccessorWithPush0, Initializable {\\r\\n    /// @dev Only mighty creator modifier\\r\\n    /// @dev Modifier is calling internal function in order to reduce contract size\\r\\n    modifier onlyMightyCreator() {\\r\\n        _onlyMightyCreator();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Only world asset from same era modifier\\r\\n    /// @dev Modifier is calling internal function in order to reduce contract size\\r\\n    modifier onlyWorldAssetFromSameEra() {\\r\\n        _onlyWorldAssetFromSameEra();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Only active game modifier\\r\\n    /// @dev Modifier is calling internal function in order to reduce contract size\\r\\n    modifier onlyActiveGame() {\\r\\n        _onlyActiveGame();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev World asset initializer\\r\\n    /// @param initParams Encoded init params (every world asset has own knowledge how to extract data from it)\\r\\n    function init(bytes memory initParams) public virtual;\\r\\n\\r\\n    /// @inheritdoc IWorldAsset\\r\\n    function world() public view override(IWorldAsset, WorldAssetStorageAccessorWithPush0) returns (IWorld) {\\r\\n        return WorldAssetStorageAccessorWithPush0.world();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IWorldAsset\\r\\n    function registry() public view override returns (IRegistry) {\\r\\n        return world().registry();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IWorldAsset\\r\\n    function era() public view override returns (IEra) {\\r\\n        return world().eras(eraNumber());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IWorldAsset\\r\\n    function worldAssetFactory() public view override returns (IWorldAssetFactory) {\\r\\n        return registry().worldAssetFactory();\\r\\n    }\\r\\n\\r\\n    /// @dev Allows caller to be only mighty creator\\r\\n    function _onlyMightyCreator() internal view {\\r\\n        if (msg.sender != registry().mightyCreator()) revert OnlyMightyCreator();\\r\\n    }\\r\\n\\r\\n    /// @dev Allows caller to be only world or world asset\\r\\n    function _onlyWorldAssetFromSameEra() internal view {\\r\\n        if (msg.sender != address(world()) &&\\r\\n            world().worldAssets(WorldAssetStorageAccessorWithPush0.eraNumber(), msg.sender) == bytes32(0)) revert OnlyWorldAssetFromSameEra();\\r\\n    }\\r\\n\\r\\n    /// @dev Allows function to be callable only while game is active\\r\\n    function _onlyActiveGame() internal view {\\r\\n        uint256 _gameBeginTime = world().gameBeginTime();\\r\\n        uint256 _gameEndTime = world().gameEndTime();\\r\\n        if (_gameBeginTime == 0 || block.timestamp < _gameBeginTime) revert OnlyActiveGame();\\r\\n        if (_gameEndTime != 0 && block.timestamp >= _gameEndTime) revert OnlyActiveGame();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb6fc3712ebcfd4ec2d6aa2559b76218544926dbd80a88d01e6ed506f9063cd00\",\"license\":\"MIT\"},\"contracts/core/assets/WorldAssetStorageAccessorWithPush0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./IWorldAssetStorageAccessor.sol\\\";\\r\\n\\r\\n/// @title World asset storage accessor\\r\\n/// @notice Any world asset which requires to identify itself as a specific type should inherit this contract\\r\\nabstract contract WorldAssetStorageAccessorWithPush0 is IWorldAssetStorageAccessor {\\r\\n    /// @inheritdoc IWorldAssetStorageAccessor\\r\\n    function world() public view virtual override returns (IWorld) {\\r\\n        address currentAddress = address(this);\\r\\n        address worldAddress;\\r\\n        bytes memory worldAddressMemoryContainer = new bytes(20);\\r\\n\\r\\n        assembly {\\r\\n            //42 is where 'worldAddress' in proxy code\\r\\n            extcodecopy(currentAddress, add(worldAddressMemoryContainer, 32), 42, 20)\\r\\n            worldAddress := mload(add(worldAddressMemoryContainer, 20))\\r\\n        }\\r\\n\\r\\n        return IWorld(worldAddress);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IWorldAssetStorageAccessor\\r\\n    function eraNumber() public view override returns (uint256) {\\r\\n        address currentAddress = address(this);\\r\\n        uint256 _eraNumber;\\r\\n        bytes memory eraNumberMemoryContainer = new bytes(32);\\r\\n\\r\\n        assembly {\\r\\n            //with Push0\\r\\n            //154 is where 'eraNumber' in proxy code\\r\\n            extcodecopy(currentAddress, add(eraNumberMemoryContainer, 32), 154, 32)\\r\\n\\r\\n            _eraNumber := mload(add(eraNumberMemoryContainer, 32))\\r\\n        }\\r\\n\\r\\n        return _eraNumber;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IWorldAssetStorageAccessor\\r\\n    function assetGroupId() public view override returns (bytes32) {\\r\\n        address currentAddress = address(this);\\r\\n        bytes32 _assetGroupId;\\r\\n        bytes memory assetGroupIdMemoryContainer = new bytes(32);\\r\\n\\r\\n        assembly {\\r\\n            //with Push0\\r\\n            //90 is where 'assetGroupId' in proxy code\\r\\n            extcodecopy(currentAddress, add(assetGroupIdMemoryContainer, 32), 90, 32)\\r\\n\\r\\n            _assetGroupId := mload(add(assetGroupIdMemoryContainer, 32))\\r\\n        }\\r\\n\\r\\n        return _assetGroupId;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IWorldAssetStorageAccessor\\r\\n    function assetTypeId() public view override returns (bytes32) {\\r\\n        address currentAddress = address(this);\\r\\n        bytes32 _assetTypeId;\\r\\n        bytes memory assetTypeIdMemoryContainer = new bytes(32);\\r\\n\\r\\n        assembly {\\r\\n            //with Push0\\r\\n            //122 is where 'assetTypeId' in proxy code\\r\\n            extcodecopy(currentAddress, add(assetTypeIdMemoryContainer, 32), 122, 32)\\r\\n\\r\\n            _assetTypeId := mload(add(assetTypeIdMemoryContainer, 32))\\r\\n        }\\r\\n\\r\\n        return _assetTypeId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x16fafc80686c7b4c6e41f3511e5162069bdfd8b55c068c372b1e38fd0878498a\",\"license\":\"MIT\"},\"contracts/core/assets/army/IArmy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../../IWorld.sol\\\";\\r\\nimport \\\"../battle/IBattle.sol\\\";\\r\\nimport \\\"../settlement/ISettlement.sol\\\";\\r\\nimport \\\"../siege/ISiege.sol\\\";\\r\\n\\r\\n/// @title Army interface\\r\\n/// @notice Functions to read state/modify state in order to get current army parameters and/or interact with it\\r\\ninterface IArmy {\\r\\n    struct ManeuverInfo {\\r\\n        uint64 beginTime;\\r\\n        uint64 endTime;\\r\\n        uint64 destinationPosition;\\r\\n        uint64 secretDestinationRegionId;\\r\\n        bytes32 secretDestinationPosition;\\r\\n    }\\r\\n\\r\\n    struct StunInfo {\\r\\n        uint64 beginTime;\\r\\n        uint64 endTime;\\r\\n    }\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Settlement address to which this army belongs\\r\\n    /// @dev Immutable, initialized on the army creation\\r\\n    function relatedSettlement() external view returns (ISettlement);\\r\\n\\r\\n    /// @notice Position where army currently stands on\\r\\n    /// @dev Updated when army updates position. It does not take into account if army is maneuvering\\r\\n    /// @dev To proper query current position use #getCurrentPosition\\r\\n    function currentPosition() external view returns (uint64);\\r\\n\\r\\n    /// @notice Battle in which army is on\\r\\n    /// @dev If army is not in battle returns address(0). It does not take into account if battle is ended but army is not left the battle\\r\\n    function battle() external view returns (IBattle);\\r\\n\\r\\n    /// @notice Maneuver info\\r\\n    /// @dev Updated when army begins maneuvering. It does not take into account if army is ended maneuver by time\\r\\n    function maneuverInfo() external view returns (\\r\\n        uint64 beginTime,\\r\\n        uint64 endTime,\\r\\n        uint64 destinationPosition,\\r\\n        uint64 secretDestinationRegionId,\\r\\n        bytes32 secretDestinationPosition\\r\\n    );\\r\\n\\r\\n    /// @notice Stun info\\r\\n    /// @dev Updated when army stun is applied\\r\\n    function stunInfo() external view returns (uint64 beginTime, uint64 endTime);\\r\\n\\r\\n    /// @notice Mapping containing additional unit battle multiplier\\r\\n    /// @dev Updated when #increaseUnitBattleMultiplier or #decreaseUnitBattleMultiplier is called\\r\\n    function additionalUnitsBattleMultipliers(bytes32 unitTypeId) external view returns (uint256);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when #updatePosition is called (even though event can be emitted only on the next action related to the current army, de-facto army will update position based on 'maneuverInfo.endTime'\\r\\n    /// @param settlementAddress Address of the settlement where army currently staying on\\r\\n    /// @param position Position\\r\\n    event UpdatedPosition(address settlementAddress, uint64 position);\\r\\n\\r\\n    /// @notice Emitted when #createBattle is called. Army which attacks another army will emit this event\\r\\n    /// @param battleAddress Created battle address\\r\\n    /// @param targetArmyAddress Address of the attacked army\\r\\n    event BattleCreated(address battleAddress, address targetArmyAddress);\\r\\n\\r\\n    /// @notice Emitted when army joins battle. At the battle creation both armies (attacker and attacked) will emit this event. Attacker army will be side A and at attacked army will be sideB\\r\\n    /// @param battleAddress Address of the battle army joined in\\r\\n    /// @param side Side to which army joined (sideA = 1, sideB = 2)\\r\\n    event JoinedBattle(address battleAddress, uint256 side);\\r\\n\\r\\n    /// @notice Emitted when #updateState is called (even though event can be emitted only on the next action related to the current army, de-facto army will exit battle when battle is ended)\\r\\n    /// @param battleAddress Address of the battle army was in\\r\\n    event ExitedFromBattle(address battleAddress);\\r\\n\\r\\n    /// @notice Emitted when #beginOpenManeuver or #beginSecretManeuver or #revealSecretManeuver is called\\r\\n    /// @param position Position army is maneuvering to (0 if secret maneuver)\\r\\n    /// @param secretDestinationRegionId Secret destination regionId (not zero if secret maneuver)\\r\\n    /// @param secretDestinationPosition Secret destination position (not zero if secret maneuver)\\r\\n    /// @param beginTime Time at which maneuver began\\r\\n    /// @param endTime Time at which maneuver will end (0 if secret maneuver)\\r\\n    /// @param tokensToSpendOnAcceleration Amount of tokens to spend on acceleration (Food for open maneuver, Wood for secret maneuver)\\r\\n    event ManeuveringBegan(\\r\\n        uint64 position,\\r\\n        uint64 secretDestinationRegionId,\\r\\n        bytes32 secretDestinationPosition,\\r\\n        uint256 beginTime,\\r\\n        uint256 endTime,\\r\\n        uint256 tokensToSpendOnAcceleration\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when #cancelSecretManeuver is called\\r\\n    event SecretManeuverCancelled();\\r\\n\\r\\n    /// @notice Emitted when #_applyStun is called\\r\\n    /// @param stunBeginTime Stun begin time\\r\\n    /// @param stunEndTime Stun end time\\r\\n    event StunApplied(uint64 stunBeginTime, uint64 stunEndTime);\\r\\n\\r\\n    /// @notice Emitted when #demilitarize is called\\r\\n    /// @param unitTypeIds Unit type ids demilitarized\\r\\n    /// @param unitsAmounts Amount of units demilitarized\\r\\n    event UnitsDemilitarized(bytes32[] unitTypeIds, uint256[] unitsAmounts);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which only possible to be called by ruler, world or world asset\\r\\n    error OnlyRulerOrWorldAssetFromSameEra();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which is blocked when army is stunned\\r\\n    error ArmyIsStunned();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which is blocked when army is maneuvering\\r\\n    error ArmyIsManeuvering();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which is blocked when army is in battle\\r\\n    error ArmyIsInBattle();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which is blocked when army is in siege\\r\\n    error ArmyIsInSiege();\\r\\n\\r\\n    /// @notice Thrown when attempting to begin maneuver to same position\\r\\n    error ArmyCannotManeuverToSamePosition();\\r\\n\\r\\n    /// @notice Thrown when attempting to maneuver to position without settlement\\r\\n    error ArmyCannotManeuverToPositionWithoutSettlement();\\r\\n\\r\\n    /// @notice Thrown when attempting to maneuver without units to non-home position\\r\\n    error ArmyWithoutUnitsCannotManeuverToNotHomeSettlement();\\r\\n\\r\\n    /// @notice Thrown when attempting to maneuver without units but with acceleration\\r\\n    error ArmyWithoutUnitsCannotAccelerate();\\r\\n\\r\\n    /// @notice Thrown when attempting to secretly maneuver without units\\r\\n    error ArmyWithoutUnitsCannotBeginSecretManeuver();\\r\\n\\r\\n    /// @notice Thrown when attempting to reveal or cancel secret maneuver\\r\\n    error ArmyIsNotManeuveringSecretly();\\r\\n\\r\\n    /// @notice Thrown when attempting to reveal secret maneuver with invalid reveal info\\r\\n    error WrongSecretManeuverRevealInfo();\\r\\n\\r\\n    /// @notice Thrown when attempting to reveal secret maneuver with valid reveal info but wrong region\\r\\n    error SecretManeuverRevealNotPossibleToNotSpecifiedRegion();\\r\\n\\r\\n    /// @notice Thrown when attempting to reveal secret maneuver at invalid time\\r\\n    error SecretManeuverRevealNotPossibleAtThisTime();\\r\\n\\r\\n    /// @notice Thrown when attempting to demilitarize with invalid input\\r\\n    error WrongDemilitarizationInput();\\r\\n\\r\\n    /// @notice Thrown when attempting to demilitarize more units than army currently have\\r\\n    error NotEnoughUnitsForDemilitarization();\\r\\n\\r\\n    /// @notice Thrown when attempting to start battle by attacking army not on same position as current army\\r\\n    error ArmyCannotAttackAnotherArmyIfTheyAreNotOnSamePosition();\\r\\n\\r\\n    /// @notice Thrown when attempting to start battle by providing army address to attack which is not part of current era\\r\\n    error ArmyCannotAttackNotCurrentEraArmy();\\r\\n\\r\\n    /// @notice Thrown when attempting to start battle by providing army address which is same as current army\\r\\n    error ArmyCannotAttackItself();\\r\\n\\r\\n    /// @notice Thrown when attempting to join battle by providing invalid battle address\\r\\n    error ArmyCannotJoinToNotCurrentEraBattle();\\r\\n\\r\\n    /// @notice Thrown when attempting to join battle with army which has zero units in it\\r\\n    error ArmyWithoutUnitsCannotJoinBattle();\\r\\n\\r\\n    /// @notice Thrown when attempting to join battle by providing invalid side\\r\\n    error WrongJoinSide();\\r\\n\\r\\n    /// @notice Thrown when attempting to join battle while its not in lobby phase\\r\\n    error ArmyCannotJoinToBattleNotInLobbyPhase();\\r\\n\\r\\n    /// @notice Thrown when attempting to join battle which is not at same position as current army\\r\\n    error ArmyCannotJoinToBattleNotAtSamePosition();\\r\\n\\r\\n    /// @notice Thrown when attempting to modify siege of own settlement\\r\\n    error ArmyCannotBesiegeOwnSettlement();\\r\\n\\r\\n    /// @notice Thrown when attempting to modify siege by providing invalid robbery multiplier\\r\\n    error WrongRobberyMultiplierSpecified();\\r\\n\\r\\n    /// @notice Thrown when attempting to modify siege in result of which army will become liquidatable\\r\\n    error ArmyCannotModifySiegeUnitsToLiquidatableState();\\r\\n\\r\\n    /// @notice Thrown when attempting to use more resources for acceleration than related building treasury has\\r\\n    error ArmyCannotUseMoreResourcesForAccelerationThanBuildingTreasuryHas();\\r\\n\\r\\n    /// @notice Thrown when attempting to use accelerate maneuver from cultists settlement with non zero cultists\\r\\n    error ArmyCannotAccelerateManeuverFromCultistsSettlementWithNonZeroCultistsArmy();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Updates army state to the current block\\r\\n    /// @dev Called on every action which are based on army state and time\\r\\n    function updateState() external;\\r\\n\\r\\n    /// @notice Begins open maneuver to specified position\\r\\n    /// @dev Even though position can be artificial, army can move only to settlement\\r\\n    /// @param position Position of settlement to move to\\r\\n    /// @param foodToSpendOnAcceleration Amount of food army will take from current position settlements FARM in order to decrease total time army will take to get to destination position\\r\\n    function beginOpenManeuver(uint64 position, uint256 foodToSpendOnAcceleration) external;\\r\\n\\r\\n    /// @notice Begins secret maneuver to secret position\\r\\n    /// @dev Caller must be aware of the rules applied to revealing destination position otherwise army may be punished\\r\\n    /// @param secretDestinationRegionId Secret destination region id\\r\\n    /// @param secretDestinationPosition Secret destination position\\r\\n    function beginSecretManeuver(uint64 secretDestinationRegionId, bytes32 secretDestinationPosition) external;\\r\\n\\r\\n    /// @notice Reveals secret maneuver\\r\\n    /// @dev In order to successfully reveal 'secretDestinationPosition' - 'destination position' and 'revealKey' must be valid\\r\\n    /// @dev Validity of verified by 'keccak256(abi.encodePacked(destinationPosition, revealKey)) == secretDestinationPosition'\\r\\n    /// @param destinationPosition Destination position\\r\\n    /// @param revealKey Reveal key\\r\\n    /// @param woodToSpendOnAcceleration Wood to spend on acceleration\\r\\n    function revealSecretManeuver(uint64 destinationPosition, bytes32 revealKey, uint256 woodToSpendOnAcceleration) external;\\r\\n\\r\\n    /// @notice Cancels secret maneuver\\r\\n    /// @dev Can be cancelled by army owner\\r\\n    function cancelSecretManeuver() external;\\r\\n\\r\\n    /// @notice Demilitarizes part of the army. Demilitarization provides prosperity to the settlement army is currently staying on\\r\\n    /// @dev Even though demilitarization of 0 units may seem reasonable, it is disabled\\r\\n    /// @param unitTypeIds Unit type ids for demilitarization\\r\\n    /// @param unitsAmounts Amount of units to demilitarize\\r\\n    function demilitarize(bytes32[] memory unitTypeIds, uint256[] memory unitsAmounts) external;\\r\\n\\r\\n    /// @notice Begins battle with another army if both are not in battle\\r\\n    /// @dev Creates IBattle and sets both armies in created battle\\r\\n    /// @param armyAddress Address of the army this army will attack\\r\\n    /// @param maxUnitTypeIdsToAttack Max unit type ids to attack\\r\\n    /// @param maxUnitsToAttack Max units to attack\\r\\n    function beginBattle(\\r\\n        address armyAddress,\\r\\n        bytes32[] calldata maxUnitTypeIdsToAttack,\\r\\n        uint256[] calldata maxUnitsToAttack\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Joins current army in battle to the provided side\\r\\n    /// @dev Maneuvering army is able to join battle only if caller is another army (drags it into battle)\\r\\n    /// @param battleAddress Battle address army will join\\r\\n    /// @param side Side of the battle army will join (sideA = 1, sideB = 2)\\r\\n    function joinBattle(address battleAddress, uint256 side) external;\\r\\n\\r\\n    /// @notice Burns units from the army\\r\\n    /// @dev Can only be called by world or world asset\\r\\n    /// @param unitTypeIds Unit type ids for burning\\r\\n    /// @param unitsAmounts Amount of units for burning for every unit type\\r\\n    function burnUnits(bytes32[] memory unitTypeIds, uint256[] memory unitsAmounts) external;\\r\\n\\r\\n    /// @notice Liquidates units from the army\\r\\n    /// @dev Can only be called by world or world asset\\r\\n    /// @param unitTypeIds Unit type ids for liquidation\\r\\n    /// @param unitsAmounts Amount of units for liquidation\\r\\n    function liquidateUnits(bytes32[] memory unitTypeIds, uint256[] memory unitsAmounts) external;\\r\\n\\r\\n    /// @notice Calculates current position taking to the account #maneuverInfo\\r\\n    /// @dev This method should be used to determine real army position\\r\\n    /// @return position Position\\r\\n    function getCurrentPosition() external view returns (uint64 position);\\r\\n\\r\\n    /// @notice Modifies army siege params\\r\\n    /// @dev Provides ability to atomically setup/re-setup siege\\r\\n    /// @param unitTypeIds Unit type ids\\r\\n    /// @param toAddIndication Indication array whether to add units or to withdraw (add = true, withdraw = false)\\r\\n    /// @param unitsAmounts Amounts of units to add/withdraw\\r\\n    /// @param newRobberyMultiplier New robbery multiplier\\r\\n    function modifySiege(\\r\\n        bytes32[] calldata unitTypeIds,\\r\\n        bool[] calldata toAddIndication,\\r\\n        uint256[] calldata unitsAmounts,\\r\\n        uint256 newRobberyMultiplier\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Swaps accumulated robbery points in siege for resource from building treasury\\r\\n    /// @dev Amount of points will be taken may be lesser if building does not have resources in its treasury\\r\\n    /// @param buildingAddress Address of the building treasury of which will be robbed\\r\\n    /// @param pointsToSpend Amount of points to spend for resources\\r\\n    function swapRobberyPointsForResourceFromBuildingTreasury(address buildingAddress, uint256 pointsToSpend) external;\\r\\n\\r\\n    /// @notice Calculates total siege support of the army\\r\\n    /// @dev For every unit type placed in siege calculates sum of all of them\\r\\n    /// @return totalSiegeSupport Total siege support of the army\\r\\n    function getTotalSiegeSupport() external view returns (uint256 totalSiegeSupport);\\r\\n\\r\\n    /// @notice Return owner of the army\\r\\n    /// @dev Same as owner of the settlement to which this army belongs\\r\\n    /// @return ownerAddress Address of the owner of the army\\r\\n    function getOwner() external view returns (address ownerAddress);\\r\\n\\r\\n    /// @notice Calculates is army at home position\\r\\n    /// @dev Takes into account if army maneuver is ended (by time)\\r\\n    /// @return isAtHomePosition Is army at home position\\r\\n    function isAtHomePosition() external view returns (bool isAtHomePosition);\\r\\n\\r\\n    /// @notice Calculates is army maneuvering (openly or secretly)\\r\\n    /// @dev Takes into account if army maneuver is ended (by time)\\r\\n    /// @return isManeuvering Is maneuvering\\r\\n    function isManeuvering() external view returns (bool isManeuvering);\\r\\n\\r\\n    /// @notice Increases unit battle multiplier\\r\\n    /// @dev Can only be called by world or world asset\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @param unitBattleMultiplier Unit battle multiplier\\r\\n    function increaseUnitBattleMultiplier(bytes32 unitTypeId, uint256 unitBattleMultiplier) external;\\r\\n\\r\\n    /// @notice Decreases unit battle multiplier\\r\\n    /// @dev Can only be called by world or world asset\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @param unitBattleMultiplier Unit battle multiplier\\r\\n    function decreaseUnitBattleMultiplier(bytes32 unitTypeId, uint256 unitBattleMultiplier) external;\\r\\n\\r\\n    /// @notice Applies army stun by settlement ruler\\r\\n    /// @dev Provides ability to self stun owned army\\r\\n    /// @param stunDuration Stun duration\\r\\n    function applySelfStun(uint64 stunDuration) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd391d4e9d7c5cec4c98427df38b30abfe717e223e578d16d3ab86d2f881b5633\",\"license\":\"MIT\"},\"contracts/core/assets/battle/Battle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./IBattle.sol\\\";\\r\\nimport \\\"../army/IArmy.sol\\\";\\r\\nimport \\\"../../../libraries/MathExtension.sol\\\";\\r\\nimport \\\"../../IRegistry.sol\\\";\\r\\nimport \\\"../WorldAsset.sol\\\";\\r\\nimport \\\"../../../const/GameAssetTypes.sol\\\";\\r\\n\\r\\ncontract Battle is WorldAsset, IBattle {\\r\\n    struct BattleWithCultistsInitiationInfo {\\r\\n        bytes32[] maxUnitTypeIdsToAttack;\\r\\n        uint256[] maxUnitsToAttack;\\r\\n    }\\r\\n\\r\\n    /// @dev Specifies amount of cultists to draw into the battle if battle is initiated by attacking them\\r\\n    BattleWithCultistsInitiationInfo private battleWithCultistsInitiationInfo;\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    uint64 public override position;\\r\\n    /// @inheritdoc IBattle\\r\\n    mapping(uint256 => mapping(bytes32 => uint256)) public override sideUnitsAmount;\\r\\n    /// @inheritdoc IBattle\\r\\n    mapping(address => mapping(bytes32 => uint256)) public override armyUnitsAmount;\\r\\n    /// @inheritdoc IBattle\\r\\n    mapping(address => mapping(bytes32 => uint256)) public override armyUnitsAdditionalMultipliers;\\r\\n    /// @inheritdoc IBattle\\r\\n    mapping(uint256 => mapping(bytes32 => uint256)) public override casualties;\\r\\n    /// @inheritdoc IBattle\\r\\n    mapping(address => uint256) public override armySide;\\r\\n    /// @inheritdoc IBattle\\r\\n    BattleTimeInfo public override battleTimeInfo;\\r\\n    /// @inheritdoc IBattle\\r\\n    uint256 public override winningSide;\\r\\n\\r\\n    /// @inheritdoc WorldAsset\\r\\n    function init(bytes memory initParams) public override initializer {\\r\\n        (\\r\\n            address attackerArmyAddress,\\r\\n            address attackedArmyAddress,\\r\\n            bytes32[] memory maxUnitTypeIdsToAttack,\\r\\n            uint256[] memory maxUnitsToAttack\\r\\n        ) = abi.decode(initParams, (address, address, bytes32[], uint256[]));\\r\\n\\r\\n        IArmy attackerArmy = IArmy(attackerArmyAddress);\\r\\n        IArmy attackedArmy = IArmy(attackedArmyAddress);\\r\\n\\r\\n        position = attackerArmy.getCurrentPosition();\\r\\n\\r\\n        battleTimeInfo.beginTime = uint64(block.timestamp);\\r\\n\\r\\n        bool isCultistsAttacked = _isCultistsArmy(attackedArmyAddress);\\r\\n\\r\\n        if (!isCultistsAttacked) {\\r\\n            if (_isArmyUnitsExceeds(attackedArmyAddress, maxUnitTypeIdsToAttack, maxUnitsToAttack)) revert BattleCannotBeCreatedWhenArmyUnitsExceedDesiredAmountToAttack();\\r\\n        } else {\\r\\n            uint256 totalUnitsToAttack = 0;\\r\\n\\r\\n            for (uint256 i = 0; i < maxUnitTypeIdsToAttack.length; i++) {\\r\\n                bytes32 unitTypeId = maxUnitTypeIdsToAttack[i];\\r\\n                uint256 maxUnitAmountToAttack = maxUnitsToAttack[i];\\r\\n\\r\\n                battleWithCultistsInitiationInfo.maxUnitTypeIdsToAttack.push(maxUnitTypeIdsToAttack[i]);\\r\\n                battleWithCultistsInitiationInfo.maxUnitsToAttack.push(maxUnitsToAttack[i]);\\r\\n\\r\\n                totalUnitsToAttack += maxUnitAmountToAttack;\\r\\n            }\\r\\n\\r\\n            if (totalUnitsToAttack == 0) revert BattleCannotBeCreatedByDesiringToAttackCultistsArmyWithoutUnits();\\r\\n        }\\r\\n\\r\\n        (, uint64 attackedArmyManeuverEndTime,,,) = attackedArmy.maneuverInfo();\\r\\n\\r\\n        uint256 maxBattleDuration = 0;\\r\\n        // If attackedArmy maneuvering openly (has endTime and its bigger than battle begin time) -> battle duration is reduced\\r\\n        if (attackedArmyManeuverEndTime > battleTimeInfo.beginTime) {\\r\\n            maxBattleDuration = attackedArmyManeuverEndTime - battleTimeInfo.beginTime;\\r\\n\\r\\n            // However it cannot be reduced lower than minimum battle duration\\r\\n            if (maxBattleDuration < registry().getMinimumBattleDuration()) revert BattleCannotBeCreatedWhenAttackedArmyIsAlmostOnAnotherPosition();\\r\\n        }\\r\\n\\r\\n        battleTimeInfo.duration = getBattleDuration(\\r\\n            isCultistsAttacked,\\r\\n            maxBattleDuration,\\r\\n            _calculateUnitsAmount(attackerArmyAddress),\\r\\n            _calculateUnitsAmount(attackedArmyAddress)\\r\\n        );\\r\\n\\r\\n        attackerArmy.joinBattle(address(this), 1);\\r\\n        attackedArmy.joinBattle(address(this), 2);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function isLobbyTime() public view override returns (bool) {\\r\\n        uint256 _gameEndTime = world().gameEndTime();\\r\\n        uint256 currentTimestamp = _gameEndTime == 0 ? block.timestamp : Math.min(block.timestamp, _gameEndTime);\\r\\n\\r\\n        uint256 lobbyEndTime = battleTimeInfo.beginTime + battleTimeInfo.duration;\\r\\n        return currentTimestamp >= battleTimeInfo.beginTime && currentTimestamp < lobbyEndTime;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function acceptArmyInBattle(\\r\\n        address armyAddress,\\r\\n        uint256 side\\r\\n    ) public override onlyWorldAssetFromSameEra {\\r\\n        bytes32[] memory allUnitTypeIds = registry().getUnitTypeIds();\\r\\n\\r\\n        // 1. Add units to battle based on army type\\r\\n        // If cultists -> add selected amount\\r\\n        // Else -> Add all\\r\\n        bool isCultistsArmy = _isCultistsArmy(armyAddress);\\r\\n        bytes32[] memory unitTypeIds = isCultistsArmy\\r\\n            ? battleWithCultistsInitiationInfo.maxUnitTypeIdsToAttack\\r\\n            : allUnitTypeIds;\\r\\n\\r\\n        for (uint256 i = 0; i < unitTypeIds.length; i++) {\\r\\n            bytes32 unitTypeId = unitTypeIds[i];\\r\\n\\r\\n            uint256 actualUnitsAmount = era().units(unitTypeId).balanceOf(armyAddress);\\r\\n            uint256 amountOfUnitsToJoinBattle = actualUnitsAmount;\\r\\n\\r\\n            if (isCultistsArmy) {\\r\\n                uint256 desiredUnitsAmount = battleWithCultistsInitiationInfo.maxUnitsToAttack[i];\\r\\n                if (actualUnitsAmount < desiredUnitsAmount) revert BattleCannotAcceptCultistsArmyWhenCultistsAmountChangedToLowerValueThanDesired();\\r\\n\\r\\n                amountOfUnitsToJoinBattle = desiredUnitsAmount;\\r\\n            }\\r\\n\\r\\n            uint256 additionalUnitMultiplier = IArmy(armyAddress).additionalUnitsBattleMultipliers(unitTypeId);\\r\\n            uint256 multipliedUnitsAmount = amountOfUnitsToJoinBattle * (1e18 + additionalUnitMultiplier) / 1e18;\\r\\n\\r\\n            sideUnitsAmount[side][unitTypeId] += multipliedUnitsAmount;\\r\\n            armyUnitsAmount[armyAddress][unitTypeId] = multipliedUnitsAmount;\\r\\n            armyUnitsAdditionalMultipliers[armyAddress][unitTypeId] = additionalUnitMultiplier;\\r\\n        }\\r\\n\\r\\n        // 2. Check if opposite side has units in order to launch battle casualties calculation\\r\\n        bool hasUnitsInOppositeSide = false;\\r\\n        uint256 oppositeSide = side == 1 ? 2 : 1;\\r\\n        for (uint256 i = 0; i < allUnitTypeIds.length; i++) {\\r\\n            if (sideUnitsAmount[oppositeSide][allUnitTypeIds[i]] > 0) {\\r\\n                hasUnitsInOppositeSide = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        armySide[armyAddress] = side;\\r\\n\\r\\n        if (hasUnitsInOppositeSide) {\\r\\n            _calculateAndSaveCasualties();\\r\\n        }\\r\\n\\r\\n        emit ArmyJoined(armyAddress, side);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function canEndBattle() public view override returns (bool) {\\r\\n        uint256 _gameEndTime = world().gameEndTime();\\r\\n        uint256 currentTimestamp = _gameEndTime == 0 ? block.timestamp : Math.min(block.timestamp, _gameEndTime);\\r\\n\\r\\n        return battleTimeInfo.beginTime > 0 && currentTimestamp >= battleTimeInfo.beginTime + battleTimeInfo.duration;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function isEndedBattle() public view override returns (bool) {\\r\\n        return battleTimeInfo.endTime != 0;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function calculateArmyCasualties(address armyAddress)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool, uint256[] memory)\\r\\n    {\\r\\n        uint256 side = armySide[armyAddress];\\r\\n\\r\\n        bytes32[] memory unitTypeIds = registry().getUnitTypeIds();\\r\\n\\r\\n        uint256[] memory result = new uint256[](unitTypeIds.length);\\r\\n\\r\\n        bool isArmyWon = side == winningSide;\\r\\n\\r\\n        for (uint256 i = 0; i < unitTypeIds.length; i++) {\\r\\n            bytes32 unitTypeId = unitTypeIds[i];\\r\\n\\r\\n            uint256 _sideUnitsAmount = sideUnitsAmount[side][unitTypeId];\\r\\n            uint256 _armyUnitsAmount = armyUnitsAmount[armyAddress][unitTypeId];\\r\\n\\r\\n            if (_sideUnitsAmount == 0 || _armyUnitsAmount == 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 percent = (_armyUnitsAmount * 1e18) / _sideUnitsAmount;\\r\\n            uint256 sideUnitsCasualties = casualties[side][unitTypeId];\\r\\n            uint256 armyUnitMultiplier = 1e18 + armyUnitsAdditionalMultipliers[armyAddress][unitTypeId];\\r\\n\\r\\n            uint256 armyCasualties = (sideUnitsCasualties * percent) / armyUnitMultiplier;\\r\\n\\r\\n            if (armyCasualties == 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 integerArmyCasualties = MathExtension.roundDownWithPrecision(armyCasualties, 1e18);\\r\\n            if (!isArmyWon) {\\r\\n                uint256 roundedUpIntegerArmyCasualties = MathExtension.roundUpWithPrecision(armyCasualties, 1e18);\\r\\n                integerArmyCasualties = _armyUnitsAmount >= roundedUpIntegerArmyCasualties\\r\\n                    ? roundedUpIntegerArmyCasualties\\r\\n                    : integerArmyCasualties;\\r\\n            }\\r\\n\\r\\n            result[i] = integerArmyCasualties;\\r\\n        }\\r\\n\\r\\n        return (isArmyWon, result);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function calculateBattleDuration(\\r\\n        uint256 globalMultiplier,\\r\\n        uint256 baseBattleDuration,\\r\\n        uint256 minimumBattleDuration,\\r\\n        bool isCultistsAttacked,\\r\\n        uint256 side1UnitsAmount,\\r\\n        uint256 side2UnitsAmount,\\r\\n        uint256 maxBattleDuration\\r\\n    ) public view override returns (uint64) {\\r\\n        if (side1UnitsAmount == 0 || side2UnitsAmount == 0) revert BattleCannotBeCreatedWithArmiesHavingZeroUnits();\\r\\n\\r\\n        uint64 battleDuration = uint64(baseBattleDuration / globalMultiplier);\\r\\n        if (!isCultistsAttacked) {\\r\\n            if (side1UnitsAmount >= side2UnitsAmount && side1UnitsAmount / side2UnitsAmount > 1) {\\r\\n                battleDuration = uint64(battleDuration * 2 * side2UnitsAmount / side1UnitsAmount);\\r\\n            }\\r\\n\\r\\n            if (side2UnitsAmount > side1UnitsAmount && side2UnitsAmount / side1UnitsAmount > 1) {\\r\\n                battleDuration = uint64(battleDuration * 2 * side1UnitsAmount / side2UnitsAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (maxBattleDuration != 0 && maxBattleDuration < battleDuration) {\\r\\n            battleDuration = uint64(maxBattleDuration);\\r\\n        }\\r\\n\\r\\n        if (battleDuration < minimumBattleDuration) {\\r\\n            battleDuration = uint64(minimumBattleDuration);\\r\\n        }\\r\\n\\r\\n        return battleDuration;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function getBattleDuration(\\r\\n        bool isCultistsAttacked,\\r\\n        uint256 maxBattleDuration,\\r\\n        uint256 side1UnitsAmount,\\r\\n        uint256 side2UnitsAmount\\r\\n    ) public view override returns (uint64) {\\r\\n        uint256 globalMultiplier = registry().getGlobalMultiplier();\\r\\n        uint256 baseBattleDuration = registry().getBaseBattleDuration();\\r\\n        uint256 minimumBattleDuration = registry().getMinimumBattleDuration();\\r\\n\\r\\n        return calculateBattleDuration(\\r\\n            globalMultiplier,\\r\\n            baseBattleDuration,\\r\\n            minimumBattleDuration,\\r\\n            isCultistsAttacked,\\r\\n            side1UnitsAmount,\\r\\n            side2UnitsAmount,\\r\\n            maxBattleDuration\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function endBattle() public override {\\r\\n        if (!canEndBattle()) revert BattleCannotBeFinishedAtThisTime();\\r\\n        if (isEndedBattle()) revert BattleCannotBeFinishedMoreThanOnce();\\r\\n\\r\\n        battleTimeInfo.endTime = uint64(battleTimeInfo.beginTime + battleTimeInfo.duration);\\r\\n\\r\\n        emit BattleEnded(battleTimeInfo.endTime);\\r\\n\\r\\n        // In case if battle is ended on cultists position & cultists are in this battle\\r\\n        // => update cultists army state (aka remove them from ended battle)\\r\\n        ISettlement settlementOnThisPosition = era().settlementByPosition(position);\\r\\n        bytes32 settlementAssetTypeId = IWorldAssetStorageAccessor(address(settlementOnThisPosition)).assetTypeId();\\r\\n\\r\\n        if (settlementAssetTypeId == CULTISTS_SETTLEMENT_TYPE_ID) {\\r\\n            IArmy cultistsArmy = settlementOnThisPosition.army();\\r\\n            if (address(cultistsArmy.battle()) == address(this)) {\\r\\n                cultistsArmy.updateState();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function calculateStage1Casualties()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256[] memory _side1Casualties,\\r\\n            uint256[] memory _side2Casualties,\\r\\n            bytes memory stageParams\\r\\n        )\\r\\n    {\\r\\n        bytes32[] memory unitTypeIds = registry().getUnitTypeIds();\\r\\n\\r\\n        _side1Casualties = new uint256[](unitTypeIds.length);\\r\\n        _side2Casualties = new uint256[](unitTypeIds.length);\\r\\n\\r\\n        uint256 side1Offense;\\r\\n        uint256 side2Offense;\\r\\n\\r\\n        uint256 side1Defence;\\r\\n        uint256 side2Defence;\\r\\n\\r\\n        // 1st stage\\r\\n        for (uint256 i = 0; i < unitTypeIds.length; i++) {\\r\\n            bytes32 unitTypeId = unitTypeIds[i];\\r\\n\\r\\n            IRegistry.UnitStats memory unitStats = registry().getUnitStats(unitTypeId);\\r\\n\\r\\n            side1Offense += sideUnitsAmount[1][unitTypeId] * unitStats.offenseStage1 * 1e18;\\r\\n            side2Offense += sideUnitsAmount[2][unitTypeId] * unitStats.offenseStage1 * 1e18;\\r\\n\\r\\n            side1Defence += sideUnitsAmount[1][unitTypeId] * unitStats.defenceStage1 * 1e18;\\r\\n            side2Defence += sideUnitsAmount[2][unitTypeId] * unitStats.defenceStage1 * 1e18;\\r\\n        }\\r\\n\\r\\n        stageParams = abi.encode(side1Offense, side2Offense, side1Defence, side2Defence);\\r\\n\\r\\n        uint256 side1LossPercentageAfterStage1 = _calculateSideLossPercentage(\\r\\n            side2Offense,\\r\\n            side1Defence,\\r\\n            battleTimeInfo.duration,\\r\\n            registry().getBaseBattleDuration() / registry().getGlobalMultiplier()\\r\\n        );\\r\\n\\r\\n        uint256 side2LossPercentageAfterStage1 = _calculateSideLossPercentage(\\r\\n            side1Offense,\\r\\n            side2Defence,\\r\\n            battleTimeInfo.duration,\\r\\n            registry().getBaseBattleDuration() / registry().getGlobalMultiplier()\\r\\n        );\\r\\n\\r\\n        // 2nd stage\\r\\n        for (uint256 i = 0; i < unitTypeIds.length; i++) {\\r\\n            bytes32 unitTypeId = unitTypeIds[i];\\r\\n\\r\\n            uint256 side1UnitsLost = (sideUnitsAmount[1][unitTypeId] * side1LossPercentageAfterStage1) / 1e18;\\r\\n            if (side1UnitsLost > sideUnitsAmount[1][unitTypeId]) {\\r\\n                _side1Casualties[i] = sideUnitsAmount[1][unitTypeId];\\r\\n            } else {\\r\\n                _side1Casualties[i] = side1UnitsLost;\\r\\n            }\\r\\n\\r\\n            uint256 side2UnitsLost = (sideUnitsAmount[2][unitTypeId] * side2LossPercentageAfterStage1) / 1e18;\\r\\n            if (side2UnitsLost > sideUnitsAmount[2][unitTypeId]) {\\r\\n                _side2Casualties[i] = sideUnitsAmount[2][unitTypeId];\\r\\n            } else {\\r\\n                _side2Casualties[i] = side2UnitsLost;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function calculateStage2Casualties(\\r\\n        uint256[] memory stage1Side1Casualties,\\r\\n        uint256[] memory stage1Side2Casualties\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256[] memory _side1Casualties,\\r\\n            uint256[] memory _side2Casualties,\\r\\n            bytes memory stageParams\\r\\n        )\\r\\n    {\\r\\n        bytes32[] memory unitTypeIds = registry().getUnitTypeIds();\\r\\n\\r\\n        _side1Casualties = new uint256[](unitTypeIds.length);\\r\\n        _side2Casualties = new uint256[](unitTypeIds.length);\\r\\n\\r\\n        uint256 side1Offense;\\r\\n        uint256 side2Offense;\\r\\n\\r\\n        uint256 side1Defence;\\r\\n        uint256 side2Defence;\\r\\n\\r\\n        for (uint256 i = 0; i < unitTypeIds.length; i++) {\\r\\n            bytes32 unitTypeId = unitTypeIds[i];\\r\\n\\r\\n            IRegistry.UnitStats memory unitStats = registry().getUnitStats(unitTypeId);\\r\\n\\r\\n            uint256 unitsARemaining = sideUnitsAmount[1][unitTypeId] - stage1Side1Casualties[i];\\r\\n            uint256 unitsBRemaining = sideUnitsAmount[2][unitTypeId] - stage1Side2Casualties[i];\\r\\n\\r\\n            side1Offense += unitsARemaining * unitStats.offenseStage2 * 1e18;\\r\\n            side2Offense += unitsBRemaining * unitStats.offenseStage2 * 1e18;\\r\\n\\r\\n            side1Defence += unitsARemaining * unitStats.defenceStage2 * 1e18;\\r\\n            side2Defence += unitsBRemaining * unitStats.defenceStage2 * 1e18;\\r\\n        }\\r\\n\\r\\n        stageParams = abi.encode(side1Offense, side2Offense, side1Defence, side2Defence);\\r\\n\\r\\n        // In case if no units left in either side -> no stage 2 casualties\\r\\n        if (side1Defence == 0 || side2Defence == 0) {\\r\\n            return (\\r\\n                _side1Casualties,\\r\\n                _side2Casualties,\\r\\n                stageParams\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 side1LossPercentageAfterStage2 = _calculateSideLossPercentage(\\r\\n            side2Offense,\\r\\n            side1Defence,\\r\\n            battleTimeInfo.duration,\\r\\n            registry().getBaseBattleDuration() / registry().getGlobalMultiplier()\\r\\n        );\\r\\n\\r\\n        uint256 side2LossPercentageAfterStage2 = _calculateSideLossPercentage(\\r\\n            side1Offense,\\r\\n            side2Defence,\\r\\n            battleTimeInfo.duration,\\r\\n            registry().getBaseBattleDuration() / registry().getGlobalMultiplier()\\r\\n        );\\r\\n\\r\\n       // result\\r\\n       for (uint256 i = 0; i < unitTypeIds.length; i++) {\\r\\n           bytes32 unitTypeId = unitTypeIds[i];\\r\\n\\r\\n           {\\r\\n               uint256 side1Units = sideUnitsAmount[1][unitTypeId] - stage1Side1Casualties[i];\\r\\n               uint256 side1UnitsLost = (side1Units * side1LossPercentageAfterStage2) / 1e18;\\r\\n               if (side1UnitsLost >= side1Units) {\\r\\n                   _side1Casualties[i] = side1Units;\\r\\n               } else {\\r\\n                   _side1Casualties[i] = side1UnitsLost;\\r\\n               }\\r\\n           }\\r\\n\\r\\n           {\\r\\n               uint256 side2Units = sideUnitsAmount[2][unitTypeId] - stage1Side2Casualties[i];\\r\\n               uint256 side2UnitsLost = (side2Units * side2LossPercentageAfterStage2) / 1e18;\\r\\n               if (side2UnitsLost >= side2Units) {\\r\\n                   _side2Casualties[i] = side2Units;\\r\\n               } else {\\r\\n                   _side2Casualties[i] = side2UnitsLost;\\r\\n               }\\r\\n           }\\r\\n       }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBattle\\r\\n    function calculateAllCasualties()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256[] memory,\\r\\n            uint256[] memory,\\r\\n            uint256 //Winning side (0 - both sides lost, 1 - side A Won, 2 - side B Won\\r\\n        )\\r\\n    {\\r\\n        //calculate stage1 casualties (based on initial sides)\\r\\n        (\\r\\n            uint256[] memory stage1Side1Casualties,\\r\\n            uint256[] memory stage1Side2Casualties,\\r\\n            bytes memory stage1Params\\r\\n        ) = calculateStage1Casualties();\\r\\n\\r\\n        //calculate stage2 casualties (based on (initial-stage1Losses))\\r\\n        (\\r\\n            uint256[] memory stage2Side1Casualties,\\r\\n            uint256[] memory stage2Side2Casualties,\\r\\n            bytes memory stage2Params\\r\\n        ) = calculateStage2Casualties(\\r\\n            stage1Side1Casualties,\\r\\n            stage1Side2Casualties\\r\\n        );\\r\\n\\r\\n        uint256 calculatedWinningSide = _calculateWinningSide(\\r\\n            stage1Params,\\r\\n            stage2Params\\r\\n        );\\r\\n\\r\\n        uint256[] memory side1Casualties = new uint256[](stage1Side1Casualties.length);\\r\\n        uint256[] memory side2Casualties = new uint256[](stage1Side2Casualties.length);\\r\\n\\r\\n        for (uint256 i = 0; i < stage1Side1Casualties.length; i++) {\\r\\n            side1Casualties[i] = stage1Side1Casualties[i] + stage2Side1Casualties[i];\\r\\n            side2Casualties[i] = stage1Side2Casualties[i] + stage2Side2Casualties[i];\\r\\n        }\\r\\n\\r\\n        return (side1Casualties, side2Casualties, calculatedWinningSide);\\r\\n    }\\r\\n\\r\\n    /// @dev Calculate side loss percentage (in 1e18 precision)\\r\\n    function _calculateSideLossPercentage(\\r\\n        uint256 sideOffence,\\r\\n        uint256 sideDefence,\\r\\n        uint256 battleDuration,\\r\\n        uint256 baseBattleDuration\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 loweredByBattleTimeOffence = (sideOffence * battleDuration) / baseBattleDuration;\\r\\n        return (loweredByBattleTimeOffence * 1e18) / sideDefence;\\r\\n    }\\r\\n\\r\\n    /// @dev Calculates total amount of units of specified army\\r\\n    function _calculateUnitsAmount(address armyAddress) internal view returns (uint256) {\\r\\n        bytes32[] memory unitTypeIds = registry().getUnitTypeIds();\\r\\n\\r\\n        uint256 unitsAmount = 0;\\r\\n        for (uint256 i = 0; i < unitTypeIds.length; i++) {\\r\\n            bytes32 unitTypeId = unitTypeIds[i];\\r\\n            unitsAmount += era().units(unitTypeId).balanceOf(armyAddress);\\r\\n        }\\r\\n\\r\\n        return unitsAmount;\\r\\n    }\\r\\n\\r\\n    /// @dev Calculates and saves casualties\\r\\n    function _calculateAndSaveCasualties() internal {\\r\\n        (\\r\\n            uint256[] memory _side1Casualties,\\r\\n            uint256[] memory _side2Casualties,\\r\\n            uint256 _winningSide\\r\\n        ) = calculateAllCasualties();\\r\\n\\r\\n        bytes32[] memory unitTypeIds = registry().getUnitTypeIds();\\r\\n\\r\\n        for (uint256 i = 0; i < unitTypeIds.length; i++) {\\r\\n            bytes32 unitTypeId = unitTypeIds[i];\\r\\n\\r\\n            casualties[1][unitTypeId] = _side1Casualties[i];\\r\\n            casualties[2][unitTypeId] = _side2Casualties[i];\\r\\n        }\\r\\n\\r\\n        winningSide = _winningSide;\\r\\n    }\\r\\n\\r\\n    /// @dev Calculates winning side by side-stage params\\r\\n    function _calculateWinningSide(\\r\\n        bytes memory stage1Params,\\r\\n        bytes memory stage2Params\\r\\n    ) internal view returns (uint256) {\\r\\n        (\\r\\n            uint256 stage1Side1Offence,\\r\\n            uint256 stage1Side2Offence,\\r\\n            uint256 stage1Side1Defence,\\r\\n            uint256 stage1Side2Defence\\r\\n        ) = abi.decode(stage1Params, (uint256, uint256, uint256, uint256));\\r\\n\\r\\n        (\\r\\n            uint256 stage2Side1Offence,\\r\\n            uint256 stage2Side2Offence,\\r\\n            uint256 stage2Side1Defence,\\r\\n            uint256 stage2Side2Defence\\r\\n        ) = abi.decode(stage2Params, (uint256, uint256, uint256, uint256));\\r\\n\\r\\n        uint256 calculatedWinningSide = 0;\\r\\n\\r\\n        // Loss coefficient split in 2 because, for example, in 1st stage there could be no units left in either side\\r\\n        // And this means -> no second stage\\r\\n        uint256 side1LossCoefficient = stage1Side2Offence * 1e18 / stage1Side1Defence;\\r\\n        uint256 side2LossCoefficient = stage1Side1Offence * 1e18 / stage1Side2Defence;\\r\\n\\r\\n        if (stage2Side1Defence > 0 && stage2Side2Defence > 0) {\\r\\n            side1LossCoefficient += stage2Side2Offence * 1e18 / stage2Side1Defence;\\r\\n            side2LossCoefficient += stage2Side1Offence * 1e18 / stage2Side2Defence;\\r\\n        }\\r\\n\\r\\n        if (side1LossCoefficient > side2LossCoefficient) {\\r\\n            calculatedWinningSide = 2;\\r\\n        }\\r\\n\\r\\n        if (side1LossCoefficient < side2LossCoefficient) {\\r\\n            calculatedWinningSide = 1;\\r\\n        }\\r\\n\\r\\n        return calculatedWinningSide;\\r\\n    }\\r\\n\\r\\n    /// @dev Checks if provided army address belongs to cultists settlement or not\\r\\n    function _isCultistsArmy(address armyAddress) internal view returns (bool) {\\r\\n        address armiesSettlementAddress = address(IArmy(armyAddress).relatedSettlement());\\r\\n        return IWorldAssetStorageAccessor(armiesSettlementAddress).assetTypeId() == CULTISTS_SETTLEMENT_TYPE_ID;\\r\\n    }\\r\\n\\r\\n    /// @dev Calculates if provided army has more than specified units\\r\\n    function _isArmyUnitsExceeds(\\r\\n        address armyAddress,\\r\\n        bytes32[] memory unitTypeIds,\\r\\n        uint256[] memory maxUnits\\r\\n    ) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < unitTypeIds.length; i++) {\\r\\n            uint256 balance = era().units(unitTypeIds[i]).balanceOf(armyAddress);\\r\\n            if (balance > maxUnits[i]) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x77db9028ddd277dcf842da1ae4fc81856d8786b6d8a883d0db7e8ebe41bf5248\",\"license\":\"MIT\"},\"contracts/core/assets/battle/IBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../../IWorld.sol\\\";\\r\\n\\r\\n/// @title Battle interface\\r\\n/// @notice Functions to read state/modify state in order to get current battle parameters and/or interact with it\\r\\ninterface IBattle {\\r\\n    struct BattleTimeInfo {\\r\\n        uint64 beginTime;\\r\\n        uint64 duration;\\r\\n        uint64 endTime;\\r\\n    }\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Position at which battle is being held\\r\\n    /// @dev Immutable, initialized on the battle creation\\r\\n    function position() external view returns (uint64);\\r\\n\\r\\n    /// @notice Mapping that contains units amount by side and unit type\\r\\n    /// @dev Updated when army joins side\\r\\n    /// @param side Side of which query units amount (sideA = 1, sideB = 2)\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return unitsAmount Amount of units by specified side and unit type\\r\\n    function sideUnitsAmount(uint256 side, bytes32 unitTypeId) external view returns (uint256 unitsAmount);\\r\\n\\r\\n    /// @notice Mapping that contains amount of units by army address and unit type\\r\\n    /// @dev Updated when army joins battle\\r\\n    /// @param armyAddress Army address\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return unitsAmount Amount of units by army address and unit type\\r\\n    function armyUnitsAmount(address armyAddress, bytes32 unitTypeId) external view returns (uint256 unitsAmount);\\r\\n\\r\\n    /// @notice Mapping that contains unit multiplier by army address and unit type\\r\\n    /// @dev Updated when army joins battle\\r\\n    /// @param armyAddress Army address\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return unitAmountMultiplier Unit amount multiplier\\r\\n    function armyUnitsAdditionalMultipliers(address armyAddress, bytes32 unitTypeId) external view returns (uint256 unitAmountMultiplier);\\r\\n\\r\\n    /// @notice Mapping that contains amount of casualties\\r\\n    /// @dev Updated when #acceptArmyInBattle is called\\r\\n    /// @param side Side of which query casualties amount (sideA = 1, sideB = 2)\\r\\n    /// @param unitTypeId Unit type id\\r\\n    /// @return casualtiesCount Amount of casualties by side and unit type\\r\\n    function casualties(uint256 side, bytes32 unitTypeId) external view returns (uint256 casualtiesCount);\\r\\n\\r\\n    /// @notice Mapping that contains side at which joined army is on\\r\\n    /// @dev Updated when #acceptArmyInBattle is called\\r\\n    /// @param armyAddress Army address\\r\\n    /// @return armySide Side of specified army (sideA = 1, sideB = 2)\\r\\n    function armySide(address armyAddress) external view returns (uint256 armySide);\\r\\n\\r\\n    /// @notice Battle time info\\r\\n    /// @dev Updated when battle initialized, first armies joined and ended (#initBattle, #acceptArmyInBattle, #endBattle)\\r\\n    /// @return beginTime Time when battle is began\\r\\n    /// @return duration Battle duration, initialized when first two armies joined\\r\\n    /// @return endTime Time when battle is ended\\r\\n    function battleTimeInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint64 beginTime,\\r\\n            uint64 duration,\\r\\n            uint64 endTime\\r\\n        );\\r\\n\\r\\n    /// @notice Winning side\\r\\n    /// @dev Updated when #endBattle is called\\r\\n    /// @return winningSide Winning side (no winner = 0, sideA = 1, sideB = 2)\\r\\n    function winningSide() external view returns (uint256 winningSide);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when army joined battle\\r\\n    /// @param armyAddress Address of the joined army\\r\\n    /// @param side Side to which army is joined (sideA = 1, sideB = 2)\\r\\n    event ArmyJoined(address armyAddress, uint256 side);\\r\\n\\r\\n    /// @notice Emitted when #endBattle is called\\r\\n    /// @param endTime Time at which battle is ended\\r\\n    event BattleEnded(uint256 endTime);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to begin battle by attacking army with MAX amount of units to attack, but their value increased to more than MAX\\r\\n    error BattleCannotBeCreatedWhenArmyUnitsExceedDesiredAmountToAttack();\\r\\n\\r\\n    /// @notice Thrown when attempting to begin battle by attacking cultists army with desire to draw zero units to the battle\\r\\n    error BattleCannotBeCreatedByDesiringToAttackCultistsArmyWithoutUnits();\\r\\n\\r\\n    /// @notice Thrown when attempting to begin battle with armies either of which has zero units\\r\\n    error BattleCannotBeCreatedWithArmiesHavingZeroUnits();\\r\\n\\r\\n    /// @notice Thrown when attempting to start battle by attacking army when maneuver duration left less than minimum battle duration\\r\\n    error BattleCannotBeCreatedWhenAttackedArmyIsAlmostOnAnotherPosition();\\r\\n\\r\\n    /// @notice Thrown when attempting to accept cultists army to the battle but their amount got smaller than desired to attack\\r\\n    error BattleCannotAcceptCultistsArmyWhenCultistsAmountChangedToLowerValueThanDesired();\\r\\n\\r\\n    /// @notice Thrown when attempting to finish battle while time for it has not yet come\\r\\n    error BattleCannotBeFinishedAtThisTime();\\r\\n\\r\\n    /// @notice Thrown when attempting to finish battle when it is already finished\\r\\n    error BattleCannotBeFinishedMoreThanOnce();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Accepts army in battle\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param armyAddress Army address\\r\\n    /// @param side Side to which army will join\\r\\n    function acceptArmyInBattle(address armyAddress, uint256 side) external;\\r\\n\\r\\n    /// @notice Ends battle\\r\\n    /// @dev Sets end time\\r\\n    function endBattle() external;\\r\\n\\r\\n    /// @notice Calculates casualties for first battle stage\\r\\n    /// @dev Uses values from battles' sideUnitsAmount in order to calculate casualties (can be executed while battle is still not fully formed)\\r\\n    /// @return sideACasualties Side A casualties\\r\\n    /// @return sideBCasualties Side B casualties\\r\\n    /// @return stageParams Stage params (encoded abi.encode(sideAOffense, sideBOffense, sideADefence, sideBDefence))\\r\\n    function calculateStage1Casualties()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory sideACasualties,\\r\\n            uint256[] memory sideBCasualties,\\r\\n            bytes memory stageParams\\r\\n        );\\r\\n\\r\\n    /// @notice Calculates casualties for second battle stage (based on casualties from first battle stage)\\r\\n    /// @dev Uses values from battles' sideUnitsAmount in order to calculate casualties (can be executed while battle is still not fully formed)\\r\\n    /// @param stage1SideACasualties Stage 1 side A casualties\\r\\n    /// @param stage1SideBCasualties Stage 1 side B casualties\\r\\n    /// @return sideACasualties Side A casualties\\r\\n    /// @return sideBCasualties Side B casualties\\r\\n    /// @return stageParams Stage params (encoded abi.encode(sideAOffense, sideBOffense, sideADefence, sideBDefence))\\r\\n    function calculateStage2Casualties(\\r\\n        uint256[] memory stage1SideACasualties,\\r\\n        uint256[] memory stage1SideBCasualties\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory sideACasualties,\\r\\n            uint256[] memory sideBCasualties,\\r\\n            bytes memory stageParams\\r\\n        );\\r\\n\\r\\n    /// @notice Calculates casualties for all battle stages\\r\\n    /// @dev Uses values from battles' sideUnitsAmount in order to calculate casualties (can be executed while battle is still not fully formed)\\r\\n    /// @return sideACasualties Side A casualties\\r\\n    /// @return sideBCasualties Side A casualties\\r\\n    /// @return winningSide Winning side (0 - both sides lost, 1 - side A Won, 2 - side B Won\\r\\n    function calculateAllCasualties()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory sideACasualties,\\r\\n            uint256[] memory sideBCasualties,\\r\\n            uint256 winningSide\\r\\n        );\\r\\n\\r\\n    /// @notice Calculates battle duration\\r\\n    /// @dev Returns same value as #calculateBattlesDuration but without the need to provide all parameters\\r\\n    /// @param isCultistsAttacked Is cultists attacked\\r\\n    /// @param maxBattleDuration Max allowed battle duration\\r\\n    /// @param sideAUnitsAmount Side A units amount\\r\\n    /// @param sideBUnitsAmount Side B units amount\\r\\n    /// @return battleDuration Battle duration\\r\\n    function getBattleDuration(\\r\\n        bool isCultistsAttacked,\\r\\n        uint256 maxBattleDuration,\\r\\n        uint256 sideAUnitsAmount,\\r\\n        uint256 sideBUnitsAmount\\r\\n    ) external view returns (uint64 battleDuration);\\r\\n\\r\\n    /// @notice Calculates if battle can be ended\\r\\n    /// @dev Checks if endTime is set and current block.timestamp > beginTime + duration\\r\\n    /// @return canEndBattle Can battle be ended\\r\\n    function canEndBattle() external view returns (bool canEndBattle);\\r\\n\\r\\n    /// @notice Calculates if battle is ended\\r\\n    /// @dev Checks if endTime is not zero\\r\\n    /// @return isEndedBattle Is ended battle\\r\\n    function isEndedBattle() external view returns (bool isEndedBattle);\\r\\n\\r\\n    /// @notice Calculates casualties for specified army\\r\\n    /// @dev Provides valid results only for ended battle\\r\\n    /// @param armyAddress Address of army presented in battle\\r\\n    /// @return isArmyWon Is army won\\r\\n    /// @return unitsAmounts Amount of casualties for related unit types\\r\\n    function calculateArmyCasualties(address armyAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool isArmyWon,\\r\\n            uint256[] memory unitsAmounts\\r\\n        );\\r\\n\\r\\n    /// @notice Calculates if lobby is opened\\r\\n    /// @dev Calculates if lobby is opened\\r\\n    /// @return isLobbyTime Is lobby is opened\\r\\n    function isLobbyTime() external view returns (bool isLobbyTime);\\r\\n\\r\\n    /// @notice Calculates battle duration based on specified parameters\\r\\n    /// @dev globalMultiplier, baseBattleDuration parameters from registry\\r\\n    /// @param globalMultiplier Global multiplier (from registry)\\r\\n    /// @param baseBattleDuration Base battle duration (from registry)\\r\\n    /// @param minBattleDuration Minimum battle duration (from registry)\\r\\n    /// @param isCultistsAttacked Is cultists attacked\\r\\n    /// @param units1 Amount of units from attacker army\\r\\n    /// @param units2 Amount of units from attacked army\\r\\n    /// @param maxBattleDuration Max allowed battle duration\\r\\n    /// @return battleDuration Battle duration\\r\\n    function calculateBattleDuration(\\r\\n        uint256 globalMultiplier,\\r\\n        uint256 baseBattleDuration,\\r\\n        uint256 minBattleDuration,\\r\\n        bool isCultistsAttacked,\\r\\n        uint256 units1,\\r\\n        uint256 units2,\\r\\n        uint256 maxBattleDuration\\r\\n    ) external view returns (uint64 battleDuration);\\r\\n}\\r\\n\",\"keccak256\":\"0x86e876b929e90f81ec992f20fbd062bd4fcc41777f2a5cb9e32a8ea33e886ca3\",\"license\":\"MIT\"},\"contracts/core/assets/building/IBuilding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../../IWorld.sol\\\";\\r\\nimport \\\"../settlement/ISettlement.sol\\\";\\r\\n\\r\\n/// @title Building interface\\r\\n/// @notice Functions to read state/modify state in order to get current building parameters and/or interact with it\\r\\ninterface IBuilding {\\r\\n    struct BasicProduction {\\r\\n        uint256 level;\\r\\n        uint256 coefficient;\\r\\n    }\\r\\n\\r\\n    struct AdvancedProduction {\\r\\n        uint256 level;\\r\\n        uint256 coefficient;\\r\\n        uint256 additionalWorkersCapacityMultiplier;\\r\\n        uint256 toBeProducedTicks;\\r\\n    }\\r\\n\\r\\n    struct ProductionInfo {\\r\\n        uint256 lastUpdateStateTime;\\r\\n        uint256 lastUpdateStateRegionTime;\\r\\n        uint256 readyToBeDistributed;\\r\\n        uint256 totalDebt;\\r\\n    }\\r\\n\\r\\n    struct ProductionResultItem {\\r\\n        bytes32 resourceTypeId;\\r\\n        uint256 balanceDelta;\\r\\n        bool isProduced;\\r\\n    }\\r\\n\\r\\n    struct ProductionConfigItem {\\r\\n        bytes32 resourceTypeId;\\r\\n        uint256 amountPerTick;\\r\\n        bool isProducing;\\r\\n    }\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Building type id\\r\\n    /// @dev Immutable, initialized on the building creation\\r\\n    function buildingTypeId() external view returns (bytes32 buildingTypeId);\\r\\n\\r\\n    /// @notice Settlement address to which this building belongs\\r\\n    /// @dev Immutable, initialized on the building creation\\r\\n    function relatedSettlement() external view returns (ISettlement);\\r\\n\\r\\n    /// @notice Basic production\\r\\n    /// @dev Contains basic production upgrade data\\r\\n    /// @return level Basic production level\\r\\n    /// @return coefficient Basic production coefficient\\r\\n    function basicProduction() external view returns (\\r\\n        uint256 level,\\r\\n        uint256 coefficient\\r\\n    );\\r\\n\\r\\n    /// @notice Advanced production\\r\\n    /// @dev Contains advanced production upgrade data\\r\\n    /// @return level Advanced production level\\r\\n    /// @return coefficient Advanced production coefficient\\r\\n    /// @return additionalWorkersCapacityMultiplier Additional workers capacity multiplier\\r\\n    /// @return toBeProducedTicks To be produced ticks of producing resource\\r\\n    function advancedProduction() external view returns (\\r\\n        uint256 level,\\r\\n        uint256 coefficient,\\r\\n        uint256 additionalWorkersCapacityMultiplier,\\r\\n        uint256 toBeProducedTicks\\r\\n    );\\r\\n\\r\\n    /// @notice Upgrade cooldown end time\\r\\n    /// @dev Updated when #upgradeBasicProduction or #upgradeAdvancedProduction is called\\r\\n    /// @return upgradeCooldownEndTime Upgrade cooldown end time\\r\\n    function upgradeCooldownEndTime() external view returns (uint256 upgradeCooldownEndTime);\\r\\n\\r\\n    /// @notice Amount of prosperity given\\r\\n    /// @dev Contains last written given prosperity amount by building treasury\\r\\n    /// @return givenProsperityAmount Given prosperity amount\\r\\n    function givenProsperityAmount() external view returns (uint256 givenProsperityAmount);\\r\\n\\r\\n    /// @notice Contains production info of the building\\r\\n    /// @dev Contains information related to how production is calculated\\r\\n    /// @return lastUpdateStateTime Time at which last #updateState is called\\r\\n    /// @return lastUpdateStateRegionTime Region time at which last #updateState is called\\r\\n    /// @return readyToBeDistributed Amount of produced resource ready to be distributed\\r\\n    /// @return totalDebt Total debt\\r\\n    function productionInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 lastUpdateStateTime,\\r\\n            uint256 lastUpdateStateRegionTime,\\r\\n            uint256 readyToBeDistributed,\\r\\n            uint256 totalDebt\\r\\n        );\\r\\n\\r\\n    /// @notice Distribution id\\r\\n    /// @dev Initialized on creation and updated on #resetDistribution\\r\\n    function distributionId() external view returns (uint256);\\r\\n\\r\\n    /// @notice Produced resource debt\\r\\n    /// @dev Updated when #distributeToSingleHolder or #distributeToAllShareholders is called\\r\\n    function producedResourceDebt(address holder) external view returns (uint256);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when #doBasicProductionUpgrade is called\\r\\n    /// @param newBasicProductionLevel New basic production level\\r\\n    event BasicProductionUpgraded(uint256 newBasicProductionLevel, uint256 newBasicProductionCoefficient);\\r\\n\\r\\n    /// @notice Emitted when #doAdvancedProductionUpgrade is called\\r\\n    /// @param newAdvancedProductionLevel New advanced production level\\r\\n    event AdvancedProductionUpgraded(uint256 newAdvancedProductionLevel, uint256 newAdvancedProductionCoefficient);\\r\\n\\r\\n    /// @notice Emitted when #increaseAdditionalWorkersCapacityMultiplier or #decreaseAdditionalWorkersCapacityMultiplier\\r\\n    /// @param newAdditionalWorkersCapacityMultiplier New additional workers capacity multiplier\\r\\n    event AdvancedProductionAdditionalWorkersCapacityMultiplierUpdated(uint256 newAdditionalWorkersCapacityMultiplier);\\r\\n\\r\\n    /// @notice Emitted when #distribute is called (when resources from production are distributed to building token holders)\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    /// @param holder Receiver address\\r\\n    /// @param amount Amount of distributed resources\\r\\n    event DistributedToShareHolder(bytes32 resourceTypeId, address holder, uint256 amount);\\r\\n\\r\\n    /// @notice Emitted when #_setDefaultDistribution is called\\r\\n    /// @param newDistributionId New distribution id\\r\\n    event DistributionCreated(uint256 newDistributionId);\\r\\n\\r\\n    /// @notice Emitted when productionInfo is updated\\r\\n    /// @param lastUpdateStateTime Last update state time\\r\\n    /// @param lastUpdateStateRegionTime Last update state region time\\r\\n    /// @param readyToBeDistributed Ready to be distributed\\r\\n    /// @param totalDebt Total debt\\r\\n    event ProductionInfoUpdated(\\r\\n        uint256 lastUpdateStateTime,\\r\\n        uint256 lastUpdateStateRegionTime,\\r\\n        uint256 readyToBeDistributed,\\r\\n        uint256 totalDebt\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when producedResourceDebt updated for distributionNftHolder\\r\\n    /// @param distributionNftHolder Distribution nft holder\\r\\n    /// @param newDebt New debt\\r\\n    event ProducedResourceDebtUpdated(\\r\\n        address distributionNftHolder,\\r\\n        uint256 newDebt\\r\\n    );\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can be called only by Distributions\\r\\n    error OnlyDistributions();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can be called only by settlement owner\\r\\n    error OnlySettlementOwner();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can be called only by ruler or world asset\\r\\n    error OnlyRulerOrWorldAssetFromSameEra();\\r\\n\\r\\n    /// @notice Thrown when attempting to reset distribution of building tokens when its not allowed\\r\\n    error DistributionResetNotAllowedWhenTreasuryThresholdNotMet();\\r\\n\\r\\n    /// @notice Thrown when attempting to upgrade building when upgrades are on cooldown\\r\\n    error BuildingCannotBeUpgradedWhileUpgradeIsOnCooldown();\\r\\n\\r\\n    /// @notice Thrown when attempting to transfer producing resource from building\\r\\n    error CannotTransferProducingResourceFromBuilding();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Resets current building distribution\\r\\n    /// @dev Creates new distribution Nft and mints it to current settlement owner\\r\\n    function resetDistribution() external;\\r\\n\\r\\n    /// @notice Callback which recalculates production. Called when resources related to production of this building is transferred from/to this building\\r\\n    /// @dev Even though function is opened, it is auto-called by transfer method. Standalone calls provide 0 impact.\\r\\n    function handleProductionResourcesChanged() external;\\r\\n\\r\\n    /// @notice Updates state of this building up to block.timestamp\\r\\n    /// @dev Updates building production minting treasury and increasing #production.readyToBeDistributed\\r\\n    function updateState() external;\\r\\n\\r\\n    /// @notice Updates debts for shareholders whenever their share part changes\\r\\n    /// @dev Even though function is opened, it can be called only by distributions\\r\\n    /// @param from From address\\r\\n    /// @param to To address\\r\\n    /// @param amount Amount\\r\\n    function updateDebtsAccordingToNewDistributionsAmounts(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Distributes produced resource to single shareholder\\r\\n    /// @dev Useful to taking part of the resource from the building for single shareholder (to not pay gas for minting for all shareholders)\\r\\n    /// @param holder Holder\\r\\n    function distributeToSingleShareholder(address holder) external;\\r\\n\\r\\n    /// @notice Distributes produces resource to all shareholders\\r\\n    /// @dev Useful to get full produced resources to all shareholders\\r\\n    function distributeToAllShareholders() external;\\r\\n\\r\\n    /// @notice Calculates building coefficient by provided level\\r\\n    /// @dev Used to determine max treasury amount and new production coefficients\\r\\n    /// @param level Building level\\r\\n    /// @return buildingCoefficient Building coefficient\\r\\n    function getBuildingCoefficient(uint256 level) external pure returns (uint256 buildingCoefficient);\\r\\n\\r\\n    /// @notice Calculates amount of workers currently sitting in this building\\r\\n    /// @dev Same as workers.balanceOf(buildingAddress)\\r\\n    /// @return assignedWorkersAmount Amount of assigned workers\\r\\n    function getAssignedWorkers() external view returns (uint256 assignedWorkersAmount);\\r\\n\\r\\n    /// @notice Calculates real amount of provided resource in building related to its production at provided time\\r\\n    /// @dev Useful for determination how much of production resource (either producing and spending) at the specific time\\r\\n    /// @param resourceTypeId Type id of resource related to production\\r\\n    /// @param timestamp Time at which calculate amount of resources in building. If timestamp=0 -> calculates as block.timestamp\\r\\n    /// @return resourcesAmount Real amount of provided resource in building related to its production at provided time\\r\\n    function getResourcesAmount(bytes32 resourceTypeId, uint256 timestamp) external view returns (uint256 resourcesAmount);\\r\\n\\r\\n    /// @notice Calculates production resources changes at provided time\\r\\n    /// @dev Useful for determination how much of all production will be burned/produced at the specific time\\r\\n    /// @param timestamp Time at which calculate amount of resources in building. If timestamp=0 -> calculates as block.timestamp\\r\\n    /// @return productionResult Production resources changes at provided time\\r\\n    function getProductionResult(uint256 timestamp) external view returns (ProductionResultItem[] memory productionResult);\\r\\n\\r\\n    /// @notice Calculates upgrade price by provided level\\r\\n    /// @dev Useful for determination how much upgrade will cost at any level\\r\\n    /// @param level Level at which calculate price\\r\\n    /// @return price Amount of resources needed for upgrade\\r\\n    function getUpgradePrice(uint256 level) external view returns (uint256 price);\\r\\n\\r\\n    /// @notice Calculates basic upgrade duration for provided level\\r\\n    /// @dev If level=1 then returned value will be duration which is taken for upgrading from 1 to 2 level\\r\\n    /// @param level At which level calculate upgrade duration\\r\\n    /// @return upgradeCooldownDuration Upgrade cooldown duration\\r\\n    function getBasicUpgradeCooldownDuration(uint256 level) external view returns (uint256 upgradeCooldownDuration);\\r\\n\\r\\n    /// @notice Calculates advanced upgrade duration for provided level\\r\\n    /// @dev If level=1 then returned value will be duration which is taken for upgrading from 1 to 2 level\\r\\n    /// @param level At which level calculate upgrade duration\\r\\n    /// @return upgradeCooldownDuration Upgrade cooldown duration\\r\\n    function getAdvancedUpgradeCooldownDuration(uint256 level) external view returns (uint256 upgradeCooldownDuration);\\r\\n\\r\\n    /// @notice Upgrades basic production\\r\\n    /// @dev Necessary resources for upgrade will be taken either from msg.sender or resourcesOwner (if resource.allowance allows it)\\r\\n    /// @dev If resourcesOwner == address(0) -> resources will be taken from msg.sender\\r\\n    /// @dev If resourcesOwner != address(0) and resourcesOwner has given allowance to msg.sender >= upgradePrice -> resources will be taken from resourcesOwner\\r\\n    /// @param resourcesOwner Resources owner\\r\\n    function upgradeBasicProduction(address resourcesOwner) external;\\r\\n\\r\\n    /// @notice Upgrades advanced production\\r\\n    /// @dev Necessary resources for upgrade will be taken either from msg.sender or resourcesOwner (if resource.allowance allows it)\\r\\n    /// @dev If resourcesOwner == address(0) -> resources will be taken from msg.sender\\r\\n    /// @dev If resourcesOwner != address(0) and resourcesOwner has given allowance to msg.sender >= upgradePrice -> resources will be taken from resourcesOwner\\r\\n    /// @param resourcesOwner Resources owner\\r\\n    function upgradeAdvancedProduction(address resourcesOwner) external;\\r\\n\\r\\n    /// @notice Calculates current level\\r\\n    /// @dev Takes into an account if upgrades are ended or not\\r\\n    /// @return level Current building level\\r\\n    function getBuildingLevel() external view returns (uint256 level);\\r\\n\\r\\n    /// @notice Returns production config for current building\\r\\n    /// @dev Main config that determines which resources is produced/spend by production of this building\\r\\n    /// @dev ProductionConfigItem.amountPerTick is value how much of resource is spend/produced by 1 worker in 1 tick of production\\r\\n    /// @return productionConfigItems Production config for current building\\r\\n    function getConfig() external view returns (ProductionConfigItem[] memory productionConfigItems);\\r\\n\\r\\n    /// @notice Transfers game resources and workers from building to provided addresses\\r\\n    /// @dev Removes resources+workers from building in single transaction\\r\\n    /// @param workersReceiverAddress Workers receiver address (building or settlement)\\r\\n    /// @param workersAmount Workers amount (in 1e18 precision)\\r\\n    /// @param resourcesReceiverAddress Resources receiver address\\r\\n    /// @param resourceTypeIds Resource type ids\\r\\n    /// @param resourcesAmounts Resources amounts\\r\\n    function removeResourcesAndWorkers(\\r\\n        address workersReceiverAddress,\\r\\n        uint256 workersAmount,\\r\\n        address resourcesReceiverAddress,\\r\\n        bytes32[] calldata resourceTypeIds,\\r\\n        uint256[] calldata resourcesAmounts\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Calculates maximum amount of treasury by provided level\\r\\n    /// @dev Can be used to determine maximum amount of treasury by any level\\r\\n    /// @param level Building level\\r\\n    /// @param maxTreasury Maximum amount of treasury\\r\\n    function getMaxTreasuryByLevel(uint256 level) external view returns (uint256 maxTreasury);\\r\\n\\r\\n    /// @notice Steals resources from treasury\\r\\n    /// @dev Called by siege, resources will be stolen into stealer settlement building treasury\\r\\n    /// @param stealerSettlementAddress Settlement address which will get resources\\r\\n    /// @param amount Amount of resources to steal and burn\\r\\n    /// @return stolenAmount Amount of stolen resources\\r\\n    /// @return burnedAmount Amount of burned resources\\r\\n    function stealTreasury(\\r\\n        address stealerSettlementAddress,\\r\\n        uint256 amount\\r\\n    ) external returns (uint256 stolenAmount, uint256 burnedAmount);\\r\\n\\r\\n    /// @notice Burns building treasury\\r\\n    /// @dev Can be called by world asset\\r\\n    /// @param amount Amount of resources to burn from treasury\\r\\n    function burnTreasury(\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Increases additional workers capacity multiplier\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param capacityAmount Capacity amount\\r\\n    function increaseAdditionalWorkersCapacityMultiplier(uint256 capacityAmount) external;\\r\\n\\r\\n    /// @notice Decreases additional workers capacity multiplier\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param capacityAmount Capacity amount\\r\\n    function decreaseAdditionalWorkersCapacityMultiplier(uint256 capacityAmount) external;\\r\\n\\r\\n    /// @notice Calculates workers capacity (maximum amount of workers)\\r\\n    /// @dev Used in determination of determinate maximum amount of workers\\r\\n    /// @return workersCapacity Workers capacity\\r\\n    function getWorkersCapacity() external view returns (uint256 workersCapacity);\\r\\n\\r\\n    /// @notice Calculates producing resource type id for this building\\r\\n    /// @dev Return value is value from #getConfig where 'isProducing'=true\\r\\n    /// @return resourceTypeId Type id of producing resource\\r\\n    function getProducingResourceTypeId() external view returns (bytes32 resourceTypeId);\\r\\n\\r\\n    /// @notice Calculates treasury amount at specified time\\r\\n    /// @dev Useful for determination how much treasury will be at specific time\\r\\n    /// @param timestamp Time at which calculate amount of treasury in building. If timestamp=0 -> calculates as block.timestamp\\r\\n    /// @return treasuryAmount Treasury amount at specified time\\r\\n    function getTreasuryAmount(uint256 timestamp) external view returns (uint256 treasuryAmount);\\r\\n\\r\\n    /// @notice Calculates if building is capable to accept resource\\r\\n    /// @dev Return value based on #getConfig\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    /// @return isResourceAcceptable Is building can accept resource\\r\\n    function isResourceAcceptable(bytes32 resourceTypeId) external view returns (bool isResourceAcceptable);\\r\\n\\r\\n    /// @notice Calculates capacity of available workers for advanced production\\r\\n    /// @dev Difference between #getWorkersCapacity and #getAdditionalWorkersFromAdditionalWorkersCapacityMultiplier\\r\\n    function getAvailableForAdvancedProductionWorkersCapacity() external view returns (uint256);\\r\\n\\r\\n    /// @notice Calculates additional workers 'granted' from capacity multiplier\\r\\n    /// @dev Return value based on current advancedProduction.additionalWorkersCapacityMultiplier\\r\\n    function getAdditionalWorkersFromAdditionalWorkersCapacityMultiplier() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x2d951cf56ad3cd2104e765b9fcf66c3468b26d665b918e5feaaa090ef638d840\",\"license\":\"MIT\"},\"contracts/core/assets/era/IEra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../settlement/ISettlement.sol\\\";\\r\\nimport \\\"../tileCapturingSystem/ITileCapturingSystem.sol\\\";\\r\\nimport \\\"../tokens/resources/IResource.sol\\\";\\r\\n\\r\\n/// @title Era interface\\r\\n/// @notice Functions to read state/modify state in order to get current era parameters and/or interact with it\\r\\ninterface IEra {\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Mapping containing activated regions by provided region id\\r\\n    /// @dev Updated when #activateRegion is called\\r\\n    function regions(uint64 regionId) external view returns (IRegion);\\r\\n\\r\\n    /// @notice Mapping containing settlement by provided position\\r\\n    /// @dev Updated when new settlement is created\\r\\n    function settlementByPosition(uint64 position) external view returns (ISettlement);\\r\\n\\r\\n    /// @notice Mapping containing settlement address by provided banner id\\r\\n    /// @dev Updated when #addUserSettlement is called\\r\\n    function settlementByBannerId(uint256 bannerId) external view returns (ISettlement);\\r\\n\\r\\n    /// @notice Total cultists\\r\\n    /// @dev Updated when #increaseTotalCultists or #decreaseTotalCultists is called\\r\\n    function totalCultists() external view returns (uint256);\\r\\n\\r\\n    /// @notice Era creation time\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function creationTime() external view returns (uint256);\\r\\n\\r\\n    /// @notice Workers token\\r\\n    /// @dev Updated when #setWorkersContract is called\\r\\n    function workers() external view returns (IWorkers);\\r\\n\\r\\n    /// @notice Prosperity token\\r\\n    /// @dev Updated when #setProsperityContract is called\\r\\n    function prosperity() external view returns (IProsperity);\\r\\n\\r\\n    /// @notice Mapping containing game resources by resource type id\\r\\n    /// @dev Updated when #addResource is called\\r\\n    function resources(bytes32 resourceTypeId) external view returns (IResource);\\r\\n\\r\\n    /// @notice Mapping containing units by unit type id\\r\\n    /// @dev Updated when #addUnit is called\\r\\n    function units(bytes32 unitTypeId) external view returns (IUnits);\\r\\n\\r\\n    /// @notice Tile capturing system\\r\\n    /// @dev Updated when #setTileCapturingSystemContract is called\\r\\n    function tileCapturingSystem() external view returns (ITileCapturingSystem);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when era resource is created\\r\\n    /// @param resourceAddress Resource address\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    event ResourceCreated(\\r\\n        address resourceAddress,\\r\\n        bytes32 resourceTypeId\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when era units is created\\r\\n    /// @param unitsAddress Units address\\r\\n    /// @param unitTypeId Unit type id\\r\\n    event UnitsCreated(\\r\\n        address unitsAddress,\\r\\n        bytes32 unitTypeId\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when era workers is created\\r\\n    /// @param workersAddress Workers address\\r\\n    event WorkersCreated(\\r\\n        address workersAddress\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when era prosperity is created\\r\\n    /// @param prosperityAddress Prosperity address\\r\\n    event ProsperityCreated(\\r\\n        address prosperityAddress\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when era tile capturing system is created\\r\\n    /// @param tileCapturingSystemAddress Tile capturing system address\\r\\n    event TileCapturingSystemCreated(\\r\\n        address tileCapturingSystemAddress\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when #activateRegion is called\\r\\n    /// @param regionAddress Region address\\r\\n    /// @param regionId Region id\\r\\n    event RegionActivated(\\r\\n        address regionAddress,\\r\\n        uint256 regionId\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when #newAssetSettlement is called\\r\\n    /// @param settlementAddress Created settlement address\\r\\n    /// @param assetTypeId Asset type id\\r\\n    /// @param regionAddress Address of the region where settlement is created\\r\\n    /// @param position Position\\r\\n    /// @param bannerId Banner id\\r\\n    event SettlementCreated(\\r\\n        address settlementAddress,\\r\\n        bytes32 assetTypeId,\\r\\n        address regionAddress,\\r\\n        uint64 position,\\r\\n        uint256 bannerId\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when #restoreUserSettlement is called\\r\\n    /// @param settlementAddress Settlement address\\r\\n    /// @param position Position\\r\\n    event SettlementRestored(\\r\\n        address settlementAddress,\\r\\n        uint64 position\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when #increaseTotalCultists or #decreaseTotalCultists is called\\r\\n    /// @param newTotalCultists New total cultists\\r\\n    event TotalCultistsChanged(uint256 newTotalCultists);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to activate region more than once\\r\\n    error EraCannotActivateRegionMoreThanOnce();\\r\\n\\r\\n    /// @notice Thrown when attempting to activate region which is not included to the game\\r\\n    error EraCannotActivateNotIncludedRegion();\\r\\n\\r\\n    /// @notice Thrown when attempting to restore user settlement from inactive era\\r\\n    error UserSettlementCannotBeRestoredFromInactiveEra();\\r\\n\\r\\n    /// @notice Thrown when attempting to restore user settlement if it is rotten\\r\\n    error UserSettlementCannotBeRestoredIfItsRotten();\\r\\n\\r\\n    /// @notice Thrown when attempting to create user settlement on position with another settlement\\r\\n    error UserSettlementCannotBeCreatedOnPositionWithAnotherSettlement();\\r\\n\\r\\n    /// @notice Thrown when attempting to create user settlement on position which is to close to another settlement\\r\\n    error UserSettlementCannotBeCreatedOnPositionWhichIsToCloseToAnotherSettlement();\\r\\n\\r\\n    /// @notice Thrown when attempting to create user settlement with banner nft id which is already taken by another settlement\\r\\n    error UserSettlementCannotBeCreatedIfBannerNftIdIsAlreadyTakenByAnotherSettlement();\\r\\n\\r\\n    /// @notice Thrown when attempting to create user settlement in inactive era\\r\\n    error UserSettlementCannotBeCreatedInInactiveEra();\\r\\n\\r\\n    /// @notice Thrown when attempting to create user settlement in region which already has maximum amount of allowed settlement\\r\\n    error UserSettlementCannotBeCreatedInRegionWithMaximumAllowedSettlements();\\r\\n\\r\\n    /// @notice Thrown when attempting to create user settlement on position which is not connected to another settlement\\r\\n    error UserSettlementCannotBeCreatedOnPositionWhichIsNotConnectedToAnotherSettlement();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Activates region\\r\\n    /// @dev Even though function is opened, it can be called only by mightyCreator\\r\\n    /// @param regionId Region id\\r\\n    function activateRegion(uint64 regionId) external;\\r\\n\\r\\n    /// @notice Restores settlement from previous era by provided position\\r\\n    /// @dev Any address can restore user settlement\\r\\n    /// @param position Position\\r\\n    function restoreUserSettlement(\\r\\n        uint64 position\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Creates user settlement\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param position Position\\r\\n    /// @param regionId Region id to which position belongs\\r\\n    /// @param bannerId Banners token id which will represent to which settlement will be attached to\\r\\n    /// @return settlementAddress Settlement address\\r\\n    function createUserSettlement(\\r\\n        uint64 position,\\r\\n        uint64 regionId,\\r\\n        uint256 bannerId\\r\\n    ) external returns (address settlementAddress);\\r\\n\\r\\n    /// @notice Creates settlement by type\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param bannerId Banners token id which will represent to which settlement will be attached to\\r\\n    /// @param position Position\\r\\n    /// @param regionId Region id to which position belongs\\r\\n    /// @param assetTypeId Asset type id\\r\\n    function createSettlementByType(\\r\\n        uint256 bannerId,\\r\\n        uint64 position,\\r\\n        uint64 regionId,\\r\\n        bytes32 assetTypeId\\r\\n    ) external returns (address);\\r\\n\\r\\n    /// @notice Increases total cultists\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param value Amount of cultists minted\\r\\n    function increaseTotalCultists(\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Decreases total cultists\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param value Amount of cultists burned\\r\\n    function decreaseTotalCultists(\\r\\n        uint256 value\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x89895bae7b1eda0cadc1fd8be4cb7d0c0e0ef8aa95ba544661589e2de809f7b3\",\"license\":\"MIT\"},\"contracts/core/assets/region/IRegion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../workersPool/IWorkersPool.sol\\\";\\r\\nimport \\\"../era/IEra.sol\\\";\\r\\nimport \\\"../unitsPool/IUnitsPool.sol\\\";\\r\\nimport \\\"../settlement/ISettlement.sol\\\";\\r\\nimport \\\"../settlementsMarket/ISettlementMarket.sol\\\";\\r\\n\\r\\n/// @title Region interface\\r\\n/// @notice Functions to read state/modify state in order to get current region parameters and/or interact with it\\r\\ninterface IRegion {\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Workers pool\\r\\n    /// @dev Immutable, initialized on the region creation\\r\\n    function workersPool() external view returns (IWorkersPool);\\r\\n\\r\\n    /// @notice Mapping containing units pool for provided unit type id\\r\\n    /// @dev Immutable, initialized on the region creation\\r\\n    function unitsPools(bytes32 unitTypeId) external view returns (IUnitsPool);\\r\\n\\r\\n    /// @notice Mapping containing units market for provided unit type\\r\\n    /// @dev Immutable, initialized on the region creation\\r\\n    function settlementsMarket() external view returns (ISettlementsMarket);\\r\\n\\r\\n    /// @notice Cultists settlement of this region\\r\\n    /// @dev Immutable, initialized on the region creation\\r\\n    function cultistsSettlement() external view returns (ISettlement);\\r\\n\\r\\n    /// @notice Last cultists summon interval number of this region\\r\\n    /// @dev Updated when #_summonCultists is called\\r\\n    function lastCultistsSummonIntervalNumber() external view returns (uint256);\\r\\n\\r\\n    /// @notice Amount of corruptionIndex in this region\\r\\n    /// @dev Updated when #increaseCorruptionIndex or #decreaseCorruptionIndex is called\\r\\n    function corruptionIndex() external view returns (int256);\\r\\n\\r\\n    /// @notice Region id\\r\\n    /// @dev Immutable, initialized on the region creation\\r\\n    function regionId() external view returns (uint64);\\r\\n\\r\\n    /// @notice Last update time\\r\\n    /// @dev Updated when #updateRegionTime is called\\r\\n    function lastUpdateTime() external view returns (uint256);\\r\\n\\r\\n    /// @notice Last apply state region time\\r\\n    /// @dev Updated when #updateRegionTime is called\\r\\n    function lastUpdateRegionTime() external view returns (uint256);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when region initialized\\r\\n    /// @param workersPoolAddress Workers pool address\\r\\n    event WorkersPoolCreated(address workersPoolAddress);\\r\\n\\r\\n    /// @notice Emitted when region initialized\\r\\n    /// @param settlementsMarketAddress Settlements market address\\r\\n    event SettlementsMarketCreated(address settlementsMarketAddress);\\r\\n\\r\\n    /// @notice Emitted when region initialized\\r\\n    /// @param unitsPoolAddress Units pool address\\r\\n    /// @param unitTypeId Unit type id\\r\\n    event UnitsPoolCreated(address unitsPoolAddress, bytes32 unitTypeId);\\r\\n\\r\\n    /// @notice Emitted when #increaseCorruptionIndex is called\\r\\n    /// @param settlementAddress An address of settlement which triggered corruptionIndex increase (can be address(0))\\r\\n    /// @param addedCorruptionIndexAmount Amount of added corruptionIndex\\r\\n    event CorruptionIndexIncreased(address settlementAddress, uint256 addedCorruptionIndexAmount);\\r\\n\\r\\n    /// @notice Emitted when #decreaseCorruptionIndex is called\\r\\n    /// @param settlementAddress An address of settlement which triggered corruptionIndex decrease (can be address(0))\\r\\n    /// @param reducedCorruptionIndexAmount Amount of reduced corruptionIndex\\r\\n    event CorruptionIndexDecreased(address settlementAddress, uint256 reducedCorruptionIndexAmount);\\r\\n\\r\\n    /// @notice Emitted when #updateState is called\\r\\n    /// @param lastUpdateTime Time at which region time changed\\r\\n    /// @param lastUpdateRegionTime Region time at 'lastUpdateTime'\\r\\n    event RegionTimeChanged(uint256 lastUpdateTime, uint256 lastUpdateRegionTime);\\r\\n\\r\\n    /// @notice Emitted when #handleCultistsSummoned or #handleCultistsDefeated is called\\r\\n    /// @param newRegionCultistsAmount New region cultists amount\\r\\n    event RegionCultistsChanged(uint256 newRegionCultistsAmount);\\r\\n\\r\\n    /// @notice Emitted when #_summonCultists is called\\r\\n    /// @param newCultistsSummonIntervalNumber New cultists summon interval number\\r\\n    event LastCultistsSummonIntervalNumberUpdated(uint256 newCultistsSummonIntervalNumber);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by current era Units\\r\\n    error OnlyEraUnits();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Persists region time upto specified global time\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param globalTime Global time\\r\\n    function updateRegionTime(uint256 globalTime) external;\\r\\n\\r\\n    /// @notice Creates cultists settlement\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param cultistsPosition Cultists position\\r\\n    function createCultistsSettlement(uint64 cultistsPosition) external;\\r\\n\\r\\n    /// @notice Buys specified units for specified amount of tokens in current region\\r\\n    /// @dev If tokensOwner == address(0) -> tokens will be taken from msg.sender\\r\\n    /// @dev If tokensOwner != address(0) and tokensOwner has given allowance to msg.sender >= amount of tokens for units -> tokens will be taken from tokensOwner\\r\\n    /// @param tokensOwner Tokens owner\\r\\n    /// @param settlementAddress Settlement's address army of which will receive units\\r\\n    /// @param unitTypeIds Unit type ids\\r\\n    /// @param unitsAmounts Units amounts\\r\\n    /// @param maxTokensToSell Maximum amounts of tokens to sell for each unit types\\r\\n    function buyUnitsBatch(\\r\\n        address tokensOwner,\\r\\n        address settlementAddress,\\r\\n        bytes32[] memory unitTypeIds,\\r\\n        uint256[] memory unitsAmounts,\\r\\n        uint256[] memory maxTokensToSell\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Increases corruptionIndex in region\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param settlementAddress An address of the settlement which triggered corruptionIndex increase (address(0) if triggered by non-settlement action)\\r\\n    /// @param value Amount of corruptionIndex\\r\\n    function increaseCorruptionIndex(\\r\\n        address settlementAddress,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Decreases corruptionIndex in region\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param settlementAddress An address of the settlement which triggered corruptionIndex decrease (address(0) if triggered by non-settlement action)\\r\\n    /// @param value Amount of corruptionIndex\\r\\n    function decreaseCorruptionIndex(\\r\\n        address settlementAddress,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Region cultists summon handler\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param value Amount of cultists minted\\r\\n    function handleCultistsSummoned(\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Region cultists defeat handler\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param value Amount of cultists burned\\r\\n    function handleCultistsDefeated(\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Calculates penalty according to current cultists count\\r\\n    /// @dev Uses unit.balanceOf to determine penalty\\r\\n    /// @return penalty Penalty from cultists\\r\\n    function getPenaltyFromCultists() external view returns (uint256 penalty);\\r\\n\\r\\n    /// @notice Updates region state\\r\\n    /// @dev This function is called every time when production should be modified\\r\\n    function updateState() external;\\r\\n\\r\\n    /// @notice Calculates region time with provided timestamp\\r\\n    /// @dev Takes into an account previous value and current cultists penalty and extrapolates to value at provided timestamp\\r\\n    /// @param timestamp Timestamp\\r\\n    /// @return regionTime Extrapolated region time\\r\\n    function getRegionTime(uint256 timestamp) external view returns (uint256 regionTime);\\r\\n}\\r\\n\",\"keccak256\":\"0xa985fa175f109634d7d040e5f01bce84131215c12c924034bb90d2dcd8f4bbf9\",\"license\":\"MIT\"},\"contracts/core/assets/settlement/ISettlement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../building/IBuilding.sol\\\";\\r\\nimport \\\"../army/IArmy.sol\\\";\\r\\nimport \\\"../siege/ISiege.sol\\\";\\r\\nimport \\\"../region/IRegion.sol\\\";\\r\\n\\r\\n/// @title Settlement interface\\r\\n/// @notice Functions to read state/modify state in order to get current settlement parameters and/or interact with it\\r\\ninterface ISettlement {\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Region to which this settlement belongs\\r\\n    /// @dev Immutable, initialized on the settlement creation\\r\\n    function relatedRegion() external view returns (IRegion);\\r\\n\\r\\n    /// @notice Banner token id to which current settlement belongs\\r\\n    /// @dev Immutable, initialized on the settlement creation\\r\\n    function bannerId() external view returns (uint256);\\r\\n\\r\\n    /// @notice Siege of the settlement\\r\\n    /// @dev If any army is besieging settlement not address(0), otherwise address(0)\\r\\n    function siege() external view returns (ISiege);\\r\\n\\r\\n    /// @notice Mapping containing settlements buildings\\r\\n    /// @dev Types of buildings supported can be queried from registry\\r\\n    function buildings(bytes32 buildingTypeId) external view returns (IBuilding);\\r\\n\\r\\n    /// @notice Current governors generation\\r\\n    /// @dev Modified when #removeGovernors is called\\r\\n    function currentGovernorsGeneration() external view returns (uint256);\\r\\n\\r\\n    /// @notice Current settlements governors\\r\\n    /// @dev Modified when #addGovernor or #removeGovernor is called\\r\\n    function governors(uint256 era, address isGovernor) external view returns (bool);\\r\\n\\r\\n    /// @notice Settlements army\\r\\n    /// Immutable, initialized on the settlement creation\\r\\n    function army() external view returns (IArmy);\\r\\n\\r\\n    /// @notice Amount of extended prosperity (currently gained units liquidation)\\r\\n    /// @dev Used for determination amount of real prosperity this settlement has\\r\\n    function extendedProsperityAmount() external view returns (uint256);\\r\\n\\r\\n    /// @notice Position on which settlement is created\\r\\n    /// @dev Immutable, initialized on the settlement creation\\r\\n    function position() external view returns (uint64);\\r\\n\\r\\n    /// @notice Amount of corruptionIndex produced by this settlement\\r\\n    /// @dev Modified when #increaseProducedCorruptionIndex or #decreaseProducedCorruptionIndex is called\\r\\n    function producedCorruptionIndex() external view returns (int256);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when new building is placed, all building are placed on settlement creation\\r\\n    /// @param buildingAddress New building address\\r\\n    /// @param buildingTypeId Building type id\\r\\n    event BuildingCreated(address buildingAddress, bytes32 buildingTypeId);\\r\\n\\r\\n    /// @notice Emitted when settlements army is created, is it created on settlement creation\\r\\n    /// @param armyAddress Army address\\r\\n    /// @param position Position\\r\\n    event ArmyCreated(address armyAddress, uint64 position);\\r\\n\\r\\n    /// @notice Emitted when siege is created on settlement\\r\\n    /// @param siegeAddress Siege address\\r\\n    event SiegeCreated(address siegeAddress);\\r\\n\\r\\n    /// @notice Emitted when #addGovernor or #removeGovernor is called\\r\\n    /// @param currentGovernorsGeneration Current governors generation\\r\\n    /// @param governorAddress Address of the governor event is applicable\\r\\n    /// @param modifiedByAddress Address which modified governor status\\r\\n    /// @param newStatus Is governor became active/inactive\\r\\n    event GovernorStatusChanged(uint256 currentGovernorsGeneration, address governorAddress, address modifiedByAddress, bool newStatus);\\r\\n\\r\\n    /// @notice Emitted when #removeGovernors is called\\r\\n    /// @param newGovernorsGeneration New governors generation\\r\\n    event GovernorsGenerationChanged(uint256 newGovernorsGeneration);\\r\\n\\r\\n    /// @notice Emitted when #destroyRottenSettlement is called\\r\\n    event Destroyed();\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can be called only by settlement owner\\r\\n    error OnlySettlementOwner();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can be called only by ruler or world asset\\r\\n    error OnlyRulerOrWorldAsset();\\r\\n\\r\\n    /// @notice Thrown when attempting to add governor by address which is neither settlement owner or another governor\\r\\n    error GovernorCannotBeAddedIfSenderNotSettlementOwnerOrAnotherGovernor();\\r\\n\\r\\n    /// @notice Thrown when attempting to destroy settlement but its not rotten\\r\\n    error SettlementCannotBeDestroyedIfItsNotRotten();\\r\\n\\r\\n    /// @notice Thrown when attempting to destroy settlement when it is already rebuilt\\r\\n    error SettlementCannotBeDestroyedIfItsAlreadyRebuilt();\\r\\n\\r\\n    /// @notice Thrown when attempting to transfer workers from settlement with non integer value\\r\\n    error SettlementCannotSendWorkersWithFractions();\\r\\n\\r\\n    /// @notice Thrown when attempting to transfer workers from settlement to building over maximum allowed workers capacity\\r\\n    error SettlementCannotSendWorkersToBuildingOverMaximumAllowedCapacity();\\r\\n\\r\\n    /// @notice Thrown when attempting to decrease corruptionIndex via payment in inactive era\\r\\n    error SettlementCannotDecreaseCorruptionIndexViaPaymentInInactiveEra();\\r\\n\\r\\n    /// @notice Thrown when attempting to specify 'tokensAmount' parameter anything but zero whenever world.erc20ForSettlementPurchase is zero address\\r\\n    error SettlementCannotDecreaseCorruptionIndexViaPaymentWrongParamProvided();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Withdraws resources from settlement to specified address\\r\\n    /// @dev In case if someone accidentally transfers game resource to the settlement\\r\\n    /// @param resourceTypeId Resource type id\\r\\n    /// @param to Address that will receive resources\\r\\n    /// @param amount Amount to transfer\\r\\n    function withdrawResources(\\r\\n        bytes32 resourceTypeId,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Transfers game resources from msg.sender and workers from settlement to building\\r\\n    /// @dev Assigns resources+workers to building in single transaction\\r\\n    /// @dev If resourcesOwner == address(0) -> resources will be taken from msg.sender\\r\\n    /// @dev If resourcesOwner != address(0) and resourcesOwner has given allowance to msg.sender >= resourcesAmount -> resources will be taken from resourcesOwner\\r\\n    /// @param buildingAddress Building address\\r\\n    /// @param workersAmount Workers amount (in 1e18 precision)\\r\\n    /// @param resourceTypeIds Resource type ids\\r\\n    /// @param resourcesAmounts Resources amounts\\r\\n    function assignResourcesAndWorkersToBuilding(\\r\\n        address resourcesOwner,\\r\\n        address buildingAddress,\\r\\n        uint256 workersAmount,\\r\\n        bytes32[] memory resourceTypeIds,\\r\\n        uint256[] memory resourcesAmounts\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Updates settlement health to current block\\r\\n    /// @dev Can be called by everyone\\r\\n    function updateFortHealth() external;\\r\\n\\r\\n    /// @notice Applies production of every building which produces prosperity\\r\\n    /// @dev Can be used by everyone\\r\\n    function updateProsperityAmount() external;\\r\\n\\r\\n    /// @notice Calculates current settlement owner\\r\\n    /// @dev Settlements owner is considered an address, which holds bannerId Nft\\r\\n    /// @return settlementOwner Settlement owner\\r\\n    function getSettlementOwner() external view returns (address settlementOwner);\\r\\n\\r\\n    /// @notice Adds settlement governor\\r\\n    /// @dev Settlement owner and other governor can add governor\\r\\n    /// @param governorAddress Address to add as the governor\\r\\n    function addGovernor(address governorAddress) external;\\r\\n\\r\\n    /// @notice Removes settlement governor\\r\\n    /// @dev Only settlement owner can remove governor\\r\\n    /// @param governorAddress Address to remove from governors\\r\\n    function removeGovernor(address governorAddress) external;\\r\\n\\r\\n    /// @notice Removes all settlement governors\\r\\n    /// @dev Only settlement owner can remove all governors\\r\\n    function removeGovernors() external;\\r\\n\\r\\n    /// @notice Swaps current settlement prosperity for exact workers\\r\\n    /// @dev Only ruler or world asset can perform swap\\r\\n    /// @param workersToBuy Exact amount of workers to buy\\r\\n    /// @param maxProsperityToSell Maximum amount of prosperity to spend for exact workers\\r\\n    function swapProsperityForExactWorkers(uint256 workersToBuy, uint256 maxProsperityToSell) external;\\r\\n\\r\\n    /// @notice Calculates whether provided address is settlement ruler or not\\r\\n    /// @dev Settlements ruler is an address which owns settlement or an address(es) by which settlement is/are governed\\r\\n    /// @param potentialRuler Address to check\\r\\n    /// @return isRuler Banner, whether specified address is ruler or not\\r\\n    function isRuler(address potentialRuler) external view returns (bool isRuler);\\r\\n\\r\\n    /// @notice Extends current settlement prosperity by specified amount\\r\\n    /// @dev Even though function is opened it can be called only by world or world asset\\r\\n    /// @param prosperityAmount Amount of prosperity to which extend current prosperity\\r\\n    function extendProsperity(uint256 prosperityAmount) external;\\r\\n\\r\\n    /// @notice Begins tile capture\\r\\n    /// @param position Position\\r\\n    /// @param prosperityStake Prosperity stake\\r\\n    function beginTileCapture(uint64 position, uint256 prosperityStake) external;\\r\\n\\r\\n    /// @notice Cancels tile capture\\r\\n    /// @param position Position\\r\\n    function cancelTileCapture(uint64 position) external;\\r\\n\\r\\n    /// @notice Gives up captured tile\\r\\n    /// @param position Position\\r\\n    function giveUpCapturedTile(uint64 position) external;\\r\\n\\r\\n    /// @notice Claims captured tile\\r\\n    /// @param position Position\\r\\n    function claimCapturedTile(uint64 position) external;\\r\\n\\r\\n    /// @notice Increases produced corruptionIndex\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param amount Amount\\r\\n    function increaseProducedCorruptionIndex(uint256 amount) external;\\r\\n\\r\\n    /// @notice Decreases produced corruptionIndex\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param amount Amount\\r\\n    function decreaseProducedCorruptionIndex(uint256 amount) external;\\r\\n\\r\\n    /// @notice Calculates is settlement rotten or not\\r\\n    /// @return isRottenSettlement Is rotten settlement\\r\\n    function isRottenSettlement() external returns (bool isRottenSettlement);\\r\\n\\r\\n    /// @notice Destroys current settlement\\r\\n    /// @dev Settlement will be removed only from crossErasMemory in order to give free space to new settlements\\r\\n    function destroyRottenSettlement() external;\\r\\n\\r\\n    /// @notice Lowers settlement corruptionIndex by paying to the reward pool\\r\\n    /// @dev If world.erc20ForSettlementPurchase is address zero -> function is expected to receive Ether as msg.value in order to decrease corruptionIndex. If not address zero -> 'tokensAmount' parameter is used and it will be taken via 'erc20.transferFrom'\\r\\n    /// @dev Only settlement in active era can decrease its corruptionIndex\\r\\n    /// @param tokensAmount Amount of tokens will be taken from sender (if world.erc20ForSettlementPurchase is not address zero)\\r\\n    function payToDecreaseCorruptionIndex(uint256 tokensAmount) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0x3fd2e3fee2daab2ca99b542f801d86bc023c1ed38c6c48079a080806bc136de8\",\"license\":\"MIT\"},\"contracts/core/assets/settlementsMarket/ISettlementMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../region/IRegion.sol\\\";\\r\\n\\r\\n/// @title Region settlements market interface\\r\\n/// @notice Functions to read state/modify state in order to buy settlement\\r\\ninterface ISettlementsMarket {\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Region to which this market belongs\\r\\n    /// @dev Immutable, initialized on the market creation\\r\\n    function relatedRegion() external view returns (IRegion);\\r\\n\\r\\n    /// @notice Time at which market was created\\r\\n    /// @dev Immutable, initialized on the market creation\\r\\n    function marketCreationTime() external view returns (uint256);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when #buySettlement is called\\r\\n    /// @param settlementAddress Settlement address\\r\\n    /// @param settlementCost Settlement cost\\r\\n    event SettlementBought(address settlementAddress, uint256 settlementCost);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to buy settlement for free by mighty creator after game began\\r\\n    error SettlementCannotBeBoughtForFreeAfterGameBegan();\\r\\n\\r\\n    /// @notice Thrown when attempting to buy settlement for specified banner nft id and not owning it\\r\\n    error SettlementCannotBeBoughtForNotOwnerBannerNft();\\r\\n\\r\\n    /// @notice Thrown when attempting to buy settlement on non existent position\\r\\n    error SettlementCannotBeBoughtOnNonExistentPosition();\\r\\n\\r\\n    /// @notice Thrown when attempting to buy settlement on position which is not related to this settlement market\\r\\n    error SettlementCannotBeBoughtOnPositionWhichIsNotRelatedToThisSettlementMarket();\\r\\n\\r\\n    /// @notice Thrown when attempting to buy settlement due to new settlement cost is higher than max tokens to use specified\\r\\n    error SettlementCannotBeBoughtDueToCostIsHigherThanMaxTokensToUseSpecified();\\r\\n\\r\\n    /// @notice Thrown when attempting to buy settlement due to insufficient value sent (only if world.erc20ForSettlementPurchase == address(0), which is equivalent of native token)\\r\\n    error SettlementCannotBeBoughtDueInsufficientValueSent();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Updates settlement market state to the current block\\r\\n    /// @dev Called on every action which are based on settlement market state\\r\\n    function updateState() external;\\r\\n\\r\\n    /// @notice Buys settlement in region\\r\\n    /// @dev Even though function is opened, it can only be called by mighty creator and only before game begin time\\r\\n    /// @param position Position\\r\\n    /// @param bannerId MithraeumBanners token id which will represent to which settlement will be attached to\\r\\n    function buySettlementForFreeByMightyCreator(\\r\\n        uint64 position,\\r\\n        uint256 bannerId\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Buys settlement in region\\r\\n    /// @dev Tokens will be deducted from msg.sender\\r\\n    /// @param position Position\\r\\n    /// @param bannerId MithraeumBanners token id which will represent to which settlement will be attached to\\r\\n    /// @param maxTokensToUse Maximum amount of tokens to be withdrawn for settlement\\r\\n    function buySettlement(\\r\\n        uint64 position,\\r\\n        uint256 bannerId,\\r\\n        uint256 maxTokensToUse\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Returns amount of tokens new settlement will cost\\r\\n    /// @dev Calculates cost of placing new settlement in tokens\\r\\n    /// @param timestamp Time at which calculate new settlement cost. If timestamp=0 -> calculates as block.timestamp\\r\\n    /// @return cost Amount of tokens new settlement will cost\\r\\n    function getNewSettlementCost(uint256 timestamp) external view returns (uint256 cost);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd00b7c6d08dd7fe44bfb05ed226b4112d88ab2753a34f42c201ee655971d7e2\",\"license\":\"MIT\"},\"contracts/core/assets/siege/ISiege.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../settlement/ISettlement.sol\\\";\\r\\n\\r\\n/// @title Siege interface\\r\\n/// @notice Functions to read state/modify state in order to get current siege parameters and/or interact with it\\r\\ninterface ISiege {\\r\\n    struct ArmyInfo {\\r\\n        uint256 robberyMultiplier;\\r\\n        uint256 pointsDebt;\\r\\n        uint256 points;\\r\\n    }\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Settlement address to which this siege belongs\\r\\n    /// @dev Immutable, initialized on the siege creation\\r\\n    function relatedSettlement() external view returns (ISettlement);\\r\\n\\r\\n    /// @notice Mapping containing army information related to current siege\\r\\n    /// @dev Updated when #modifyArmySiege, #swapRobberyPointsForResourceFromBuildingTreasury is called\\r\\n    function armyInfo(address armyAddress) external view returns (\\r\\n        uint256 robberyMultiplier,\\r\\n        uint256 pointsDebt,\\r\\n        uint256 points\\r\\n    );\\r\\n\\r\\n    /// @notice Mapping containing amount of stored units in siege for specified army\\r\\n    /// @dev Updated when #modifyArmySiege is called\\r\\n    function besiegingArmyUnitsByType(address armyAddress, bytes32 unitTypeId) external view returns (uint256);\\r\\n\\r\\n    /// @notice Total siege power\\r\\n    /// @dev Updated when #modifyArmySiege is called\\r\\n    function totalSiegePower() external view returns (uint256);\\r\\n\\r\\n    /// @notice Amount of robbery point per one damage\\r\\n    /// @dev Updated when siege parameters related to armies were changed\\r\\n    function robberyPointsPerOneDamage() external view returns (uint256);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when #modifyArmySiege is called\\r\\n    /// @param armyAddress Army address\\r\\n    /// @param unitTypeIds Unit type ids\\r\\n    /// @param toAddIndication Indication array whether units where added or withdrawn (added = true, withdrawn = false)\\r\\n    /// @param unitsAmounts Units amounts\\r\\n    /// @param newRobberyMultiplier New robbery multiplier\\r\\n    /// @param newTotalSiegePower New total siege power\\r\\n    event ArmySiegeModified(\\r\\n        address armyAddress,\\r\\n        bytes32[] unitTypeIds,\\r\\n        bool[] toAddIndication,\\r\\n        uint256[] unitsAmounts,\\r\\n        uint256 newRobberyMultiplier,\\r\\n        uint256 newTotalSiegePower\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when army robbery points updated\\r\\n    /// @param armyAddress Army address\\r\\n    /// @param buildingAddress Building address\\r\\n    /// @param stolenAmount Amount of resources stolen\\r\\n    /// @param burnedAmount Burned amount of resources\\r\\n    /// @param pointsSpent Amount of points spent\\r\\n    /// @param newRobberyPointsAmount New robbery points amount\\r\\n    event BuildingRobbed(\\r\\n        address armyAddress,\\r\\n        address buildingAddress,\\r\\n        uint256 stolenAmount,\\r\\n        uint256 burnedAmount,\\r\\n        uint256 pointsSpent,\\r\\n        uint256 newRobberyPointsAmount\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when #liquidate is called\\r\\n    /// @param armyAddress Army address which was liquidated\\r\\n    event ArmyLiquidated(address armyAddress);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to liquidate army from siege when it is not liquidatable\\r\\n    error SiegeCannotLiquidateArmy();\\r\\n\\r\\n    /// @notice Thrown when attempting to modify siege units with invalid units amount specified\\r\\n    error SiegeCannotBeModifiedDueToInvalidUnitsAmountSpecified();\\r\\n\\r\\n    /// @notice Thrown when attempting to swap robbery points with wrong building address specified\\r\\n    error RobberyPointsSwapNotAllowedDueToSpecifiedBuildingAddressIsNotPartOfEra();\\r\\n\\r\\n    /// @notice Thrown when attempting to swap robbery points with wrong max points to spend specified\\r\\n    error RobberyPointsSwapNotAllowedDueToWrongMaxPointsToSpendSpecified();\\r\\n\\r\\n    /// @notice Thrown when attempting to swap robbery points with specified building address not belonging to the settlement of this siege\\r\\n    error RobberyPointsSwapNotAllowedDueToSpecifiedBuildingAddressDoesNotBelongToSettlementOfThisSiege();\\r\\n\\r\\n    /// @notice Thrown when attempting to swap robbery points in result of which zero resources was stolen and burned\\r\\n    error RobberyPointsSwapNotAllowedDueToNothingWasStolenAndBurned();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Swaps army robbery points for resources from building in related settlement\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param buildingAddress Address of building to rob\\r\\n    /// @param pointsToSpend Amount of points to spend for robbing\\r\\n    function swapRobberyPointsForResourceFromBuildingTreasury(address buildingAddress, uint256 pointsToSpend) external;\\r\\n\\r\\n    /// @notice Updates siege with new amount of damage fort has taken\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param damage Damage which has been done to the settlement\\r\\n    function applyDamage(uint256 damage) external;\\r\\n\\r\\n    /// @notice Modifies army robbery multiplier\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param armyAddress Army address\\r\\n    /// @param unitTypeIds Unit type ids\\r\\n    /// @param toAddIndication Indication array whether to add units or to withdraw (add = true, withdraw = false)\\r\\n    /// @param unitsAmounts Units amounts\\r\\n    /// @param newRobberyMultiplier New robbery multiplier\\r\\n    function modifyArmySiege(\\r\\n        address armyAddress,\\r\\n        bytes32[] calldata unitTypeIds,\\r\\n        bool[] calldata toAddIndication,\\r\\n        uint256[] calldata unitsAmounts,\\r\\n        uint256 newRobberyMultiplier\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Calculates if besieging units of provided army can be liquidated from current siege\\r\\n    /// @dev Does not take into an account if army's battle is ended and army isn't left the battle\\r\\n    /// @param armyAddress Address of the army\\r\\n    /// @return canLiquidate Can army be liquidated from current siege\\r\\n    function canLiquidateArmyBesiegingUnits(address armyAddress) external view returns (bool canLiquidate);\\r\\n\\r\\n    /// @notice Calculates amount of robbery points army will have at specified time\\r\\n    /// @dev If timestamp=0, returns value as if timestamp=block.timestamp\\r\\n    /// @param armyAddress Address of the army\\r\\n    /// @param timestamp Time at which calculate points\\r\\n    /// @return robberyPoints Amount of robbery points army will have at specified time\\r\\n    function getArmyRobberyPoints(address armyAddress, uint256 timestamp) external view returns (uint256 robberyPoints);\\r\\n\\r\\n    /// @notice Returns amount of besieging units for specified army in siege\\r\\n    /// @dev Function returns only amounts without types, index in returned array for each unit type is same as in 'registry.getUnits'\\r\\n    /// @param armyAddress Address of the army\\r\\n    /// @return unitsAmounts Amount of units that army has in siege\\r\\n    function getArmyBesiegingUnitsAmounts(address armyAddress) external view returns (uint256[] memory unitsAmounts);\\r\\n\\r\\n    /// @notice Liquidates army\\r\\n    /// @dev Can be called by anyone, caller will receive a reward\\r\\n    /// @param armyAddress Address of army to liquidate\\r\\n    function liquidate(address armyAddress) external;\\r\\n\\r\\n    /// @notice Calculates army units siege power\\r\\n    /// @dev Value are calculated for specified army that is present in siege\\r\\n    /// @param armyAddress Address of army\\r\\n    /// @return armySiegePower Army units siege power\\r\\n    function calculateArmyUnitsSiegePower(address armyAddress) external returns (uint256 armySiegePower);\\r\\n\\r\\n    /// @notice Calculates army total siege power (including its current robbery multiplier)\\r\\n    /// @dev Value are calculated for specified army that is present in siege\\r\\n    /// @param armyAddress Army address\\r\\n    /// @return armyTotalSiegePower Army total siege power\\r\\n    function calculateArmyTotalSiegePower(address armyAddress) external returns (uint256 armyTotalSiegePower);\\r\\n}\\r\\n\",\"keccak256\":\"0x8b6630ad0807fa59f241f1454f694d4cfe0ea82130ab9cab0a0d0cb469b304e5\",\"license\":\"MIT\"},\"contracts/core/assets/tileCapturingSystem/ITileCapturingSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/// @title Tile capturing system interface\\r\\n/// @notice Functions to read state/modify state in order to get current system parameters and/or interact with it\\r\\ninterface ITileCapturingSystem {\\r\\n    struct TileInfo {\\r\\n        address ownerSettlementAddress;\\r\\n        address usurperSettlementAddress;\\r\\n        uint256 usurperProsperityStake;\\r\\n        uint64 usurperCaptureBeginTime;\\r\\n        uint64 usurperCaptureEndTime;\\r\\n    }\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Mapping containing settlements' current capturing tile\\r\\n    /// @dev Updated when #beginTileCaptureBySettlement or #claimTileCaptureBySettlement, #cancelTileCaptureBySettlement is called\\r\\n    function settlementCapturingTile(address settlementAddress) external view returns (uint64);\\r\\n\\r\\n    /// @notice Mapping containing tile info by provided position\\r\\n    /// @dev Updated when #beginTileCaptureBySettlement or #claimTileCaptureBySettlement, #cancelTileCaptureBySettlement is called\\r\\n    function tilesInfo(uint64 position) external view returns (\\r\\n        address ownerSettlementAddress,\\r\\n        address usurperSettlementAddress,\\r\\n        uint256 usurperProsperityStake,\\r\\n        uint64 usurperCaptureBeginTime,\\r\\n        uint64 usurperCaptureEndTime\\r\\n    );\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when #beginTileCaptureBySettlement is called\\r\\n    /// @param previousUsurperAddress Previous usurper address\\r\\n    /// @param position Position\\r\\n    /// @param settlementAddress Settlement address\\r\\n    /// @param prosperityStake Prosperity stake\\r\\n    /// @param captureBeginTime Capture begin time\\r\\n    /// @param captureEndTime Capture end time\\r\\n    event TileCapturingBegan(\\r\\n        address previousUsurperAddress,\\r\\n        uint64 position,\\r\\n        address settlementAddress,\\r\\n        uint256 prosperityStake,\\r\\n        uint64 captureBeginTime,\\r\\n        uint64 captureEndTime\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when #cancelTileCaptureBySettlement\\r\\n    /// @param position Position\\r\\n    /// @param settlementAddress Settlement address\\r\\n    event TileCapturingCancelled(\\r\\n        uint64 position,\\r\\n        address settlementAddress\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when #claimTileCaptureBySettlement\\r\\n    /// @param previousSettlementOwnerAddress Previous settlement owner address\\r\\n    /// @param position Position\\r\\n    /// @param settlementAddress Settlement address\\r\\n    /// @param prosperityStake Prosperity stake\\r\\n    event CapturedTileClaimed(\\r\\n        address previousSettlementOwnerAddress,\\r\\n        uint64 position,\\r\\n        address settlementAddress,\\r\\n        uint256 prosperityStake\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when #giveUpCapturedTile\\r\\n    /// @param position Position\\r\\n    /// @param settlementAddress Settlement address\\r\\n    event CapturedTileGivenUp(\\r\\n        uint64 position,\\r\\n        address settlementAddress\\r\\n    );\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to begin tile capture of non existent position\\r\\n    error CannotBeginTileCaptureDueToNonExistentPositionSpecified();\\r\\n\\r\\n    /// @notice Thrown when attempting to begin tile capture of position on not activated region\\r\\n    error CannotBeginTileCaptureOnNotActivatedRegion();\\r\\n\\r\\n    /// @notice Thrown when attempting to begin tile capture on position with settlement on it\\r\\n    error CannotBeginTileCaptureOnPositionWithSettlement();\\r\\n\\r\\n    /// @notice Thrown when attempting to begin tile capture by settlement which is already capturing tile\\r\\n    error CannotBeginTileCaptureBySettlementWhichIsAlreadyCapturingTile();\\r\\n\\r\\n    /// @notice Thrown when attempting to begin tile capture by settlement which already has maximum allowed tiles with same bonus as specified tile\\r\\n    error CannotBeginTileCaptureBySettlementAlreadyHavingMaximumCapturedTilesWithSameBonus();\\r\\n\\r\\n    /// @notice Thrown when attempting to begin tile capture of position without tile bonus\\r\\n    error CannotBeginTileCaptureOfPositionWithoutBonus();\\r\\n\\r\\n    /// @notice Thrown when attempting to begin tile capture with not having specified amount of prosperity\\r\\n    error CannotBeginTileCaptureDueToNotHavingSpecifiedProsperity();\\r\\n\\r\\n    /// @notice Thrown when attempting to begin tile capture with prosperity stake lower than next minimum prosperity stake\\r\\n    error CannotBeginTileCaptureDueToNotReachedNextMinimumProsperityStake();\\r\\n\\r\\n    /// @notice Thrown when attempting to cancel tile capture by settlement which is not currently capturing specified tile\\r\\n    error TileCaptureCannotBeCancelledBySettlementWhichIsNotCurrentTileUsurper();\\r\\n\\r\\n    /// @notice Thrown when attempting to give up captured tile by settlement which is not owner of specified tile\\r\\n    error CapturedTileCannotBeGivenUpByNonSettlementOwner();\\r\\n\\r\\n    /// @notice Thrown when attempting to claim captured tile by settlement which was not capturing specified tile\\r\\n    error ClaimTileCaptureCannotBeDoneByNonUsurperSettlement();\\r\\n\\r\\n    /// @notice Thrown when attempting to claim captured tile at this time (it is still capturing)\\r\\n    error ClaimTileCaptureCannotBeDoneAtThisTime();\\r\\n\\r\\n    /// @notice Thrown when attempting to claim captured tile without necessary prosperity in settlement\\r\\n    error ClaimTileCaptureCannotBeDoneWithoutNecessaryProsperity();\\r\\n\\r\\n    /// @notice Thrown when attempting to apply or remove tile bonus. It should not be thrown ever, if it does this will indicate logic error\\r\\n    error UnknownTileBonus();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Begins tile capturing\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param settlementAddress Settlement address\\r\\n    /// @param position Position\\r\\n    function beginTileCapture(address settlementAddress, uint64 position, uint256 prosperityStake) external;\\r\\n\\r\\n    /// @notice Cancels tile capturing\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param settlementAddress Settlement address\\r\\n    /// @param position Position\\r\\n    function cancelTileCapture(address settlementAddress, uint64 position) external;\\r\\n\\r\\n    /// @notice Gives up captured tile\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param settlementAddress Settlement address\\r\\n    /// @param position Position\\r\\n    function giveUpCapturedTile(address settlementAddress, uint64 position) external;\\r\\n\\r\\n    /// @notice Claims captured tile\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param settlementAddress Settlement address\\r\\n    /// @param position Position\\r\\n    function claimTileCapture(address settlementAddress, uint64 position) external;\\r\\n\\r\\n    /// @notice Returns positions of captured tiles for provided settlement address\\r\\n    /// @dev Returns only claimed tiles\\r\\n    /// @param settlementAddress Settlement address\\r\\n    /// @param tileBonusType Tile bonus type\\r\\n    /// @return positions Positions of captured tiles\\r\\n    function getCapturedTilesBySettlementAddress(address settlementAddress, uint8 tileBonusType) external view returns (uint64[] memory positions);\\r\\n\\r\\n    /// @notice New settlement handler\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    /// @param position Position\\r\\n    function handleSettlementCreatedOnPosition(uint64 position) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x380db93cc220f6a77460247375dd108e6fbc29705fa5bd6f0173597d67b8baa9\",\"license\":\"MIT\"},\"contracts/core/assets/tokens/prosperity/IProsperity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../../../../token/IERC20Burnable.sol\\\";\\r\\nimport \\\"../../../../token/IERC20Int.sol\\\";\\r\\n\\r\\n/// @title Resource interface\\r\\n/// @notice Functions to read state/modify state in order to get current prosperity parameters and/or interact with it\\r\\ninterface IProsperity is IERC20Int, IERC20Burnable {\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Mapping containing amount of prosperity spend for workers buying\\r\\n    /// @dev Only settlements can spend prosperity for workers\\r\\n    /// @param settlementAddress Address of settlement\\r\\n    /// @return amount Amount of prosperity spend for workers buying\\r\\n    function prosperitySpent(address settlementAddress) external view returns (uint256 amount);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which is disabled\\r\\n    error Disabled();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Spends prosperity for specified settlement address\\r\\n    /// @dev Called for settlement when settlement is buying workers\\r\\n    /// @param settlementAddress Address of settlement\\r\\n    /// @param amount Amount of prosperity spend for workers buying\\r\\n    function spend(address settlementAddress, uint256 amount) external;\\r\\n\\r\\n    /// @notice Mints prosperity to specified address\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param to Address which will receive prosperity\\r\\n    /// @param amount Amount of prosperity to mint\\r\\n    function mint(address to, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe5b33625559b153f089e20a0a2c52d9cfc0ea38ecfea6e492a3047a7e6e0346c\",\"license\":\"MIT\"},\"contracts/core/assets/tokens/resources/IResource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../../../token/IERC20Burnable.sol\\\";\\r\\n\\r\\n/// @title Resource interface\\r\\n/// @notice Functions to read state/modify state in order to get current resource parameters and/or interact with it\\r\\ninterface IResource is IERC20Burnable, IERC20 {\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Token name\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function tokenName() external returns (string memory);\\r\\n\\r\\n    /// @notice Token symbol\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function tokenSymbol() external returns (string memory);\\r\\n\\r\\n    /// @notice Resource type id\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function resourceTypeId() external returns (bytes32);\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which only possible to be called by world asset or reward pool\\r\\n    error OnlyWorldAssetFromSameEraOrRewardPool();\\r\\n\\r\\n    /// @notice Thrown when attempting to transfer resources to building which does not use this resource\\r\\n    error ResourceNotAcceptable();\\r\\n\\r\\n    /// @notice Returns state balance for specified token owner\\r\\n    /// @dev Current function returns value of balances 'as is', without recalculation (same as 'balanceOf' you would expect)\\r\\n    /// @param tokensOwner Tokens owner\\r\\n    /// @return balance Balance for token owner\\r\\n    function stateBalanceOf(address tokensOwner) external view returns (uint256 balance);\\r\\n\\r\\n    /// @notice Mints resource to specified address\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param to Address which will receive resources\\r\\n    /// @param amount Amount of resources to mint\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    /// @notice Spends allowance (same as ERC20._spendAllowance)\\r\\n    /// @dev Even though function is opened, it can be called only by world asset\\r\\n    function spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3e68ee8d663eecb14ea03c45ef61f7b48a1b6279ac6582b1f9db135c2c4fbeba\",\"license\":\"MIT\"},\"contracts/core/assets/tokens/units/IUnits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../../../token/IERC20Burnable.sol\\\";\\r\\n\\r\\n/// @title Units interface\\r\\n/// @notice Functions to read state/modify state in order to get current unit parameters and/or interact with it\\r\\ninterface IUnits is IERC20Burnable, IERC20 {\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Token name\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function tokenName() external view returns (string memory);\\r\\n\\r\\n    /// @notice Token symbol\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function tokenSymbol() external view returns (string memory);\\r\\n\\r\\n    /// @notice Unit type id\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function unitTypeId() external view returns (bytes32);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which is disabled\\r\\n    error Disabled();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Mints units to specified address\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param to Address which will receive units\\r\\n    /// @param amount Amount of units to mint\\r\\n    function mint(address to, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4200b0f4359b7a87f6f2f44db0de4d00b48077f84f100f2bad552067c1f713d0\",\"license\":\"MIT\"},\"contracts/core/assets/tokens/workers/IWorkers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../../../token/IERC20Burnable.sol\\\";\\r\\n\\r\\n/// @title Workers interface\\r\\n/// @notice Functions to read state/modify state in order to get current unit parameters and/or interact with it\\r\\ninterface IWorkers is IERC20Burnable, IERC20 {\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to transfer workers with invalid from/to combinations (only specific contract combinations are allowed)\\r\\n    error WorkersTransferInvalidParams();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Mints workers to specified address\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param to Address which will receive workers\\r\\n    /// @param amount Amount of units to mint\\r\\n    function mint(address to, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7699d5728e1ce000dd6afcd86b5cd0e48114a302c93b714b1a2fbb5093579092\",\"license\":\"MIT\"},\"contracts/core/assets/unitsPool/IUnitsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../tokens/units/IUnits.sol\\\";\\r\\nimport \\\"../region/IRegion.sol\\\";\\r\\n\\r\\n/// @title Region units pool interface\\r\\n/// @notice Functions to read state/modify state in order to mint units/swap tokens for units\\r\\ninterface IUnitsPool {\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Region to which this pool belongs\\r\\n    /// @dev Immutable, initialized on the region creation\\r\\n    function relatedRegion() external view returns (IRegion);\\r\\n\\r\\n    /// @notice Unit type id\\r\\n    /// @dev Immutable, initialized on the region creation\\r\\n    function unitTypeId() external view returns (bytes32);\\r\\n\\r\\n    /// @notice Time at which last purchase is performed\\r\\n    /// @dev Updated every time when #swapTokensForExactUnits or #swapTokensForExactUnitsByRegion is called\\r\\n    function lastPurchaseTime() external view returns (uint256);\\r\\n\\r\\n    /// @notice Unit price\\r\\n    /// @dev Updated every time when #swapTokensForExactUnits or #swapTokensForExactUnitsByRegion is called\\r\\n    function unitPrice() external view returns (uint256);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when #swapTokensForExactUnits or #swapTokensForExactUnitsByRegion is called\\r\\n    /// @param spender The address which payed tokens\\r\\n    /// @param armyAddress The address of the army which received units\\r\\n    /// @param boughtUnitsAmount Amount of units bought\\r\\n    /// @param spentTokensAmount Spent tokens amount\\r\\n    event UnitsBought(\\r\\n        address spender,\\r\\n        address armyAddress,\\r\\n        uint256 boughtUnitsAmount,\\r\\n        uint256 spentTokensAmount,\\r\\n        uint256 newUnitPrice\\r\\n    );\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by related region\\r\\n    error OnlyRelatedRegion();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by ruler or world asset\\r\\n    error OnlyRulerOrWorldAsset();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire units while army is maneuvering\\r\\n    error CannotHireUnitsWhileArmyIsManeuvering();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire units while army is stunned\\r\\n    error CannotHireUnitsWhileArmyIsStunned();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire units while army is not on home position\\r\\n    error CannotHireUnitsWhileArmyIsNotOnHomePosition();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire units with invalid units to buy specified\\r\\n    error CannotHireUnitsInvalidUnitsToBuySpecified();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire units in wrong units pool\\r\\n    error CannotHireUnitsForArmyWhichSettlementDoesNotBelongToRelatedRegion();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire more units than army limit allows\\r\\n    error CannotHireUnitsExceedingArmyUnitsLimit();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire more units than transaction limit\\r\\n    error CannotHireUnitsExceedingTransactionLimit();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire units due to their cost is being higher than max tokens to sell specified\\r\\n    error CannotHireUnitsDueToTheirCostIsHigherThanMaxTokensToSellSpecified();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Swaps tokens for units\\r\\n    /// @dev If tokensOwner == address(0) -> tokens will be taken from msg.sender\\r\\n    /// @dev If tokensOwner != address(0) and tokensOwner has given allowance to msg.sender >= amount of tokens for units -> tokens will be taken from tokensOwner\\r\\n    /// @param tokensOwner Tokens owner\\r\\n    /// @param settlementAddress Settlement address, army of which, will receive units\\r\\n    /// @param unitsToBuy Exact amount of units\\r\\n    /// @param maxTokensToSell Maximum amount of tokens to be taken for exact amount of units\\r\\n    /// @return unitsAmount Amount of units bought by tokens\\r\\n    function swapTokensForExactUnits(\\r\\n        address tokensOwner,\\r\\n        address settlementAddress,\\r\\n        uint256 unitsToBuy,\\r\\n        uint256 maxTokensToSell\\r\\n    ) external returns (uint256 unitsAmount);\\r\\n\\r\\n    /// @notice Swaps tokens for units by region\\r\\n    /// @dev Even though function is opened it can be called only by region\\r\\n    /// @dev If tokensOwner == address(0) -> tokens will be taken from msg.sender\\r\\n    /// @dev If tokensOwner != address(0) and tokensOwner has given allowance to msg.sender >= amount of tokens for units -> tokens will be taken from tokensOwner\\r\\n    /// @param tokensOwner Tokens owner\\r\\n    /// @param msgSender msg.sender from region call\\r\\n    /// @param settlementAddress Settlement address, army of which, will receive units\\r\\n    /// @param unitsToBuy Exact amount of units\\r\\n    /// @param maxTokensToSell Maximum amount of tokens to be taken for exact amount of units\\r\\n    /// @return unitsAmount Amount of units bought by tokens\\r\\n    function swapTokensForExactUnitsByRegion(\\r\\n        address tokensOwner,\\r\\n        address msgSender,\\r\\n        address settlementAddress,\\r\\n        uint256 unitsToBuy,\\r\\n        uint256 maxTokensToSell\\r\\n    ) external returns (uint256 unitsAmount);\\r\\n\\r\\n    /// @notice Calculates input of tokens based on output whole amount of units\\r\\n    /// @dev Returns valid output only for integer unitsToBuy value (in 1e0 precision)\\r\\n    /// @param unitsToBuy Amount of units to buy\\r\\n    /// @return tokensToSell Amount of tokens needed for unitsToBuy\\r\\n    /// @return newUnitPrice New unit price\\r\\n    function calculateTokensForExactUnits(uint256 unitsToBuy) external view returns (uint256 tokensToSell, uint256 newUnitPrice);\\r\\n}\\r\\n\",\"keccak256\":\"0xada25373cc73f3fe1cae00521d7de92b41b2a61b4f6d2863e907c5c61e388e60\",\"license\":\"MIT\"},\"contracts/core/assets/workersPool/IWorkersPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../region/IRegion.sol\\\";\\r\\nimport \\\"../tokens/workers/IWorkers.sol\\\";\\r\\nimport \\\"../tokens/prosperity/IProsperity.sol\\\";\\r\\n\\r\\n/// @title Region workers pool interface\\r\\n/// @notice Functions to read state/modify state in order to mint workers/swap prosperity for workers\\r\\ninterface IWorkersPool {\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Region to which this pool belongs\\r\\n    /// @dev Immutable, initialized on the region creation\\r\\n    function relatedRegion() external view returns (IRegion);\\r\\n\\r\\n    /// @notice Time at which last purchase is performed\\r\\n    /// @dev Updated every time when #swapProsperityForExactWorkers is called\\r\\n    function lastPurchaseTime() external view returns (uint256);\\r\\n\\r\\n    /// @notice Worker price\\r\\n    /// @dev Updated every time when #swapProsperityForExactWorkers is called\\r\\n    function workerPrice() external view returns (uint256);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when #swapProsperityForExactWorkers is called\\r\\n    /// @param buyerSettlementAddress Address of the settlement which bought workers\\r\\n    /// @param boughtWorkersAmount Amount of workers bought\\r\\n    /// @param spentProsperityAmount Amount of prosperity spent\\r\\n    event WorkersBought(\\r\\n        address buyerSettlementAddress,\\r\\n        uint256 boughtWorkersAmount,\\r\\n        uint256 spentProsperityAmount\\r\\n    );\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to hire workers with invalid workers to buy specified\\r\\n    error CannotHireWorkersInvalidWorkersToBuySpecified();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire worker due to their cost is being higher than max prosperity to sell specified\\r\\n    error CannotHireWorkersDueToTheirCostIsHigherThanMaxProsperityToSellSpecified();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire workers due to not having enough prosperity in settlement for the purchase\\r\\n    error CannotHireWorkersDueToNotEnoughProsperityInSettlement();\\r\\n\\r\\n    /// @notice Thrown when attempting to hire more workers than transaction limit\\r\\n    error CannotHireWorkersExceedingTransactionLimit();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Swaps prosperity for exact workers\\r\\n    /// @dev Even though function is opened, it can only be called by world asset\\r\\n    /// @param settlementAddress Settlement address\\r\\n    /// @param workersToBuy Exact amount of workers\\r\\n    /// @param maxProsperityToSell Maximum amount of prosperity to be taken for exact amount of workers\\r\\n    /// @return workersCount Amount of workers bought by prosperity\\r\\n    function swapProsperityForExactWorkers(\\r\\n        address settlementAddress,\\r\\n        uint256 workersToBuy,\\r\\n        uint256 maxProsperityToSell\\r\\n    ) external returns (uint256 workersCount);\\r\\n\\r\\n    /// @notice Calculates input of prosperity based on output whole amount of workers\\r\\n    /// @dev Returns valid output only for integer workersToBuy value (in 1e0 precision)\\r\\n    /// @param workersToBuy Amount of workers to buy\\r\\n    /// @return prosperityToSell Amount of prosperity needed for workersToBuy\\r\\n    /// @return newWorkerPrice New worker price\\r\\n    function calculateProsperityForExactWorkers(uint256 workersToBuy) external returns (uint256 prosperityToSell, uint256 newWorkerPrice);\\r\\n}\\r\\n\",\"keccak256\":\"0x0f87e6ac138876ef014f880e15356ed009520d2c58c72f41baeaf46100aa16a0\",\"license\":\"MIT\"},\"contracts/core/crossErasMemory/ICrossErasMemory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../assets/settlement/ISettlement.sol\\\";\\r\\n\\r\\n/// @title Cross era memory interface\\r\\n/// @notice Functions to read state/modify state in order to get cross era memory parameters and/or interact with it\\r\\ninterface ICrossErasMemory {\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Mapping containing settlement by provided position\\r\\n    /// @dev Updated when #placeSettlementOnMap is called\\r\\n    function settlementByPosition(uint64 position) external view returns (ISettlement);\\r\\n\\r\\n    /// @notice Mapping containing settlement address by provided banner id\\r\\n    /// @dev Updated when #addUserSettlement is called\\r\\n    function settlementByBannerId(uint256 bannerId) external view returns (ISettlement);\\r\\n\\r\\n    /// @notice Mapping containing count of user settlement by provided region id\\r\\n    /// @dev Updated when #addUserSettlement or #removeUserSettlement is called\\r\\n    function regionUserSettlementsCount(uint64 regionId) external view returns (uint256);\\r\\n\\r\\n    /// @notice Mapping containing settlement price by provided region id\\r\\n    /// @dev Updated when #changeRegionSettlementPrice is called\\r\\n    function regionSettlementPrice(uint64 regionId) external view returns (uint256);\\r\\n\\r\\n    /// @notice Mapping containing settlement price update time by provided region id\\r\\n    /// @dev Updated when #changeRegionSettlementPrice is called\\r\\n    function regionSettlementPriceUpdateTime(uint64 regionId) external view returns (uint256);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when #placeSettlementOnMap or #removeUserSettlement is called\\r\\n    event SettlementOnPositionUpdated(uint64 position, address settlementAddress);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by active era\\r\\n    error OnlyActiveEra();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by old era\\r\\n    error OnlyWorldAssetFromOldEra();\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which can only be called by world asset from active era\\r\\n    error OnlyWorldAssetFromActiveEra();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Proxy initializer\\r\\n    /// @dev Called by address which created current instance\\r\\n    /// @param worldAddress World address\\r\\n    function init(address worldAddress) external;\\r\\n\\r\\n    /// @notice Adds user settlement\\r\\n    /// @dev Even though this function is opened, it can only be called by world asset\\r\\n    /// @param bannerId Banners token id which will represent to which settlement will be attached to\\r\\n    /// @param regionId Region id\\r\\n    /// @param settlementAddress New settlement address\\r\\n    /// @param isNewSettlement Is new settlement\\r\\n    function addUserSettlement(\\r\\n        uint256 bannerId,\\r\\n        uint64 regionId,\\r\\n        address settlementAddress,\\r\\n        bool isNewSettlement\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Changes region settlement price\\r\\n    /// @dev Even though this function is opened, it can only be called by world asset from active era\\r\\n    /// @param regionId Region id\\r\\n    /// @param settlementPrice Settlement price\\r\\n    /// @param lastUpdateTime Time at which price is changed\\r\\n    function changeRegionSettlementPrice(\\r\\n        uint64 regionId,\\r\\n        uint256 settlementPrice,\\r\\n        uint256 lastUpdateTime\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Places settlement on map (including system ones, like CULTISTS)\\r\\n    /// @dev Even though this function is opened, it can only be called by active era\\r\\n    /// @param position Position\\r\\n    /// @param settlementAddress Settlement address\\r\\n    function placeSettlementOnMap(\\r\\n        uint64 position,\\r\\n        address settlementAddress\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Removes user settlement\\r\\n    /// @dev Even though this function is opened, it can only be called by world asset from its era\\r\\n    /// @param settlementAddress Settlement address\\r\\n    function removeUserSettlement(\\r\\n        address settlementAddress\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc9d2f4de495433799fe0543b53b0253df8928468e1dcfca94db292d96e987596\",\"license\":\"MIT\"},\"contracts/core/distributions/IDistributions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"../IWorld.sol\\\";\\r\\n\\r\\ninterface IDistributions is IERC1155 {\\r\\n    // State variables\\r\\n\\r\\n    /// @notice World\\r\\n    /// @dev Immutable, initialized on creation\\r\\n    function world() external view returns (IWorld);\\r\\n\\r\\n    /// @notice Mapping containing distribution id to assigned building address\\r\\n    /// @dev Updated when #mint is called\\r\\n    function distributionIdToBuildingAddress(uint256 distributionId) external view returns (address);\\r\\n\\r\\n    /// @notice Last nft token id\\r\\n    /// @dev Updated when #mint is called\\r\\n    function lastDistributionId() external view returns (uint256);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call method by not world asset from same era\\r\\n    error OnlyWorldAssetFromSameEra();\\r\\n\\r\\n    /// @notice Thrown when attempting to transfer distribution shares of building to building with equal building types (ex. farm to farm)\\r\\n    error CannotTransferDistributionSharesToBuildingOfSameBuildingType();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Returns set of receivers as an array\\r\\n    /// @dev\\r\\n    /// @param distributionId Distribution id\\r\\n    /// @return receivers An array of receivers\\r\\n    function getDistributionReceivers(uint256 distributionId) external view returns (address[] memory receivers);\\r\\n\\r\\n    /// @notice Mints new distribution Nft to specified address\\r\\n    /// @dev Can be called only by world asset from active era\\r\\n    /// @param to An address which will receive new nft\\r\\n    /// @return newDistributionId Newly minted distribution id\\r\\n    function mint(address to) external returns (uint256 newDistributionId);\\r\\n\\r\\n    /// @notice Returns items per nft\\r\\n    /// @dev Used to determine percent holdings\\r\\n    /// @return itemsPerNft Items per nft\\r\\n    function getItemsPerNft() external pure returns (uint256 itemsPerNft);\\r\\n}\\r\\n\",\"keccak256\":\"0x4388e31e449224a5779a133f114562fe2b15b417149d5cfeaeb4d57e7814c146\",\"license\":\"MIT\"},\"contracts/core/geography/IGeography.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../assets/settlement/ISettlement.sol\\\";\\r\\n\\r\\ninterface IGeography {\\r\\n    enum TileBonusType {\\r\\n        NO_BONUS, //0\\r\\n        ADVANCED_PRODUCTION, //1\\r\\n        ARMY_BATTLE_STATS //2\\r\\n    }\\r\\n\\r\\n    struct TileBonus {\\r\\n        TileBonusType tileBonusType;\\r\\n        uint8 tileBonusVariation;\\r\\n    }\\r\\n\\r\\n    // State variables\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when #includeRegion is called\\r\\n    /// @param regionId Region id\\r\\n    event RegionIncluded(\\r\\n        uint64 regionId\\r\\n    );\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to include first region by non mighty creator address\\r\\n    error FirstRegionCanOnlyBeIncludedByMightyCreator();\\r\\n\\r\\n    /// @notice Thrown when attempting to include region by providing invalid region inclusion proof\\r\\n    error CannotIncludeRegionWithInvalidRegionInclusionProofProvided();\\r\\n\\r\\n    /// @notice Thrown when attempting to include already included region\\r\\n    error CannotIncludeAlreadyIncludedRegion();\\r\\n\\r\\n    /// @notice Thrown when attempting to include region with insufficient value sent (only if world.erc20ForRegionInclusion == address(0), which is equivalent of native token)\\r\\n    error CannotIncludeRegionDueToInsufficientValueSent();\\r\\n\\r\\n    /// @notice Thrown when attempting to include region with insufficient amount of user settlements in neighboring region\\r\\n    error CannotIncludeRegionDueToInsufficientUserSettlementsCountInNeighboringRegion();\\r\\n\\r\\n    /// @notice Thrown when attempting to _getNeighborPosition with invalid neighbor direction. It should not be thrown ever, if it does this will indicate logic error\\r\\n    error InvalidNeighborDirectionSpecified();\\r\\n\\r\\n    /// @notice Thrown when attempting to calculate tile bonus. It should not be thrown ever, if it does this will indicate logic error\\r\\n    error InvalidTileBonusConfiguration();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Proxy initializer\\r\\n    /// @dev Called by address which created current instance\\r\\n    /// @param worldAddress World address\\r\\n    function init(address worldAddress) external;\\r\\n\\r\\n    /// @notice Returns region owner\\r\\n    /// @dev Updated when #includeRegion is called\\r\\n    /// @param regionId Region id\\r\\n    /// @return regionOwner Region owner\\r\\n    function getRegionOwner(uint64 regionId) external view returns (address regionOwner);\\r\\n\\r\\n    /// @notice Returns region tier\\r\\n    /// @dev Updated when #includeRegion is called\\r\\n    /// @param regionId Region id\\r\\n    /// @return regionTier Region tier\\r\\n    function getRegionTier(uint64 regionId) external view returns (uint256 regionTier);\\r\\n\\r\\n    /// @notice Returns created regions count\\r\\n    /// @dev Updated when #includeRegion is called\\r\\n    /// @return regionsCount Regions count\\r\\n    function getRegionsCount() external view returns (uint256 regionsCount);\\r\\n\\r\\n    /// @notice Includes new region to the game\\r\\n    /// @dev In case if there is more than zero regions in the game caller must provide two neighboring positions: first for new region, second of already existing region\\r\\n    /// @dev In case if zero included regions -> second param is ignored\\r\\n    /// @param newRegionPosition New region position\\r\\n    /// @param neighborRegionPosition Neighbor region position\\r\\n    function includeRegion(\\r\\n        uint64 newRegionPosition,\\r\\n        uint64 neighborRegionPosition\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Checks if region is included to the game\\r\\n    /// @dev Used to determine whether region can be activated or not\\r\\n    /// @param regionId Region id\\r\\n    /// @return isRegionIncluded Is region included\\r\\n    function isRegionIncluded(uint64 regionId) external view returns (bool isRegionIncluded);\\r\\n\\r\\n    /// @notice Returns region id by position\\r\\n    /// @param position Provided position\\r\\n    /// @return regionId Region id\\r\\n    /// @return isPositionExist Is position exist (may not exist due to region cavities)\\r\\n    function getRegionIdByPosition(uint64 position) external view returns (uint64 regionId, bool isPositionExist);\\r\\n\\r\\n    /// @notice Calculates all ring positions by provided position and radius\\r\\n    /// @param position Position\\r\\n    /// @param radius Ring radius\\r\\n    /// @return ringPositions Ring positions\\r\\n    /// @return ringPositionsLength Ring positions length (array is initialized 6 * radius, however not all values should be used)\\r\\n    function getRingPositions(uint64 position, uint256 radius) external pure returns (uint64[] memory ringPositions, uint256 ringPositionsLength);\\r\\n\\r\\n    /// @notice Returns tile bonus by provided position\\r\\n    /// @param tileBonusesSeed Tile bonuses seed\\r\\n    /// @param chanceForTileWithBonus Chance for tile with bonus (in 1e18 precision)\\r\\n    /// @param position Position\\r\\n    /// @return tileBonus Tile bonus struct\\r\\n    function getTileBonus(bytes32 tileBonusesSeed, uint256 chanceForTileWithBonus, uint64 position) external pure returns (TileBonus memory tileBonus);\\r\\n\\r\\n    /// @notice Calculates distance between positions\\r\\n    /// @param position1 First position\\r\\n    /// @param position2 Second position\\r\\n    /// @param distance Distance\\r\\n    function getDistanceBetweenPositions(uint64 position1, uint64 position2) external pure returns (uint64 distance);\\r\\n}\\r\\n\",\"keccak256\":\"0x522e564ce24f7c0cc03e35705cc2804aa9f48050dfe3266681432445572fa63a\",\"license\":\"MIT\"},\"contracts/core/regionOwnershipToken/IRegionOwnershipToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\n\\r\\ninterface IRegionOwnershipToken is IERC721Enumerable {\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to call action which only possible to be called by geography\\r\\n    error OnlyGeography();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Updates base token uri\\r\\n    /// @dev Only owner can modify base token uri\\r\\n    /// @param _uri New base token uri\\r\\n    function updateURI(string memory _uri) external;\\r\\n\\r\\n    /// @notice Returns all token ids for specified holder address\\r\\n    /// @dev Used to query all token ids without asking them one by one (may not work for holder with very large amount of nfts)\\r\\n    /// @param holderAddress Holder address\\r\\n    /// @return tokenIds Token ids holder owns\\r\\n    function getTokenIdsByAddress(address holderAddress) external view returns (uint256[] memory tokenIds);\\r\\n\\r\\n    /// @notice Mints region ownership token\\r\\n    /// @dev Can only be called by geography contract\\r\\n    /// @param to Mint to address\\r\\n    /// @param regionId Region id\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 regionId\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x1135e56337567f99d7dc9c0b2c6271e4c61104861c40287340accccc52686477\",\"license\":\"MIT\"},\"contracts/core/rewardPool/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IRewardPool {\\r\\n    // State variables\\r\\n\\r\\n    /// @notice Represents how much of ingots must be given for one unit of token by default (in 64.64 format)\\r\\n    /// @dev Updated when #handleEraDestroyed is called\\r\\n    function defaultTokenPrice() external view returns (int128);\\r\\n\\r\\n    /// @notice Represents how much bless tokens must be repaid first to the mighty creator\\r\\n    /// @dev Updated when #investIntoPrizePool is called\\r\\n    function toBeRepaidTokenAmount() external view returns (uint256);\\r\\n\\r\\n    /// @notice Represents last synced reward pool total balance after repayment and function(s) are done\\r\\n    /// @dev Updated when #investIntoPrizePool or #swapIngotsForTokens or #withdrawRepayment are called\\r\\n    function lastSyncedTokenBalance() external view returns (uint256);\\r\\n\\r\\n    // Events\\r\\n\\r\\n    /// @notice Emitted when 'lastSyncedTokenBalance' updated\\r\\n    /// @param newLastSyncedTokenBalance New last synced token balance\\r\\n    event LastSyncedTokenBalanceUpdated(uint256 newLastSyncedTokenBalance);\\r\\n\\r\\n    /// @notice Emitted when 'toBeRepaidTokenAmount' updated\\r\\n    /// @param newToBeRepaidTokenAmount New to be repaid token amount\\r\\n    event ToBeRepaidTokenAmountUpdated(uint256 newToBeRepaidTokenAmount);\\r\\n\\r\\n    /// @notice Emitted when eth balance updated\\r\\n    /// @param newEthBalance New eth balance\\r\\n    event EthBalanceUpdated(uint256 newEthBalance);\\r\\n\\r\\n    // Errors\\r\\n\\r\\n    /// @notice Thrown when attempting to receive ether while having non native token reward\\r\\n    error UnableToReceiveEther();\\r\\n\\r\\n    /// @notice Thrown when attempting to swap ingots for tokens but specified ingots amount are not enough even for one unit of token\\r\\n    error NoTokensWillBeReceived();\\r\\n\\r\\n    /// @notice Thrown when attempting to swap ingots for tokens but amount of tokens to be received less than specified minimum amount\\r\\n    error TokensToBeReceivedLessThanMinimumRequired();\\r\\n\\r\\n    /// @notice Thrown when attempting to swap ingots for tokens but not enough tokens left for specified ingots amount\\r\\n    error NotEnoughTokensLeft();\\r\\n\\r\\n    // Functions\\r\\n\\r\\n    /// @notice Proxy initializer\\r\\n    /// @dev Called by address which created current instance\\r\\n    /// @param worldAddress World address\\r\\n    function init(address worldAddress) external;\\r\\n\\r\\n    /// @notice Swap provided amount of ingots\\r\\n    /// @dev If resourcesOwner == address(0) -> resources will be taken from msg.sender\\r\\n    /// @dev If resourcesOwner != address(0) and resourcesOwner has given allowance to msg.sender >= ingotsAmount -> resources will be taken from resourcesOwner\\r\\n    /// @param resourcesOwner Resources owner\\r\\n    /// @param ingotsAmount Amount of ingots to swap\\r\\n    /// @param minTokensToReceive Minimum amount of tokens to receive\\r\\n    function swapIngotsForTokens(\\r\\n        address resourcesOwner,\\r\\n        uint256 ingotsAmount,\\r\\n        uint256 minTokensToReceive\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Invests specified amount of tokens into prize pool\\r\\n    /// @dev Bless tokens must be sent to this function (if its type=eth) or will be deducted from msg.sender (if its type=erc20)\\r\\n    /// @param amountToInvest Amount of tokens to invest\\r\\n    function investIntoPrizePool(uint256 amountToInvest) external payable;\\r\\n\\r\\n    /// @notice Withdraws potential bless token added balance to the mighty creator\\r\\n    /// @dev Triggers withdraw of potential added balance\\r\\n    function withdrawRepayment() external;\\r\\n\\r\\n    /// @notice Calculates amount of tokens to be received by provided ingots amount\\r\\n    /// @dev Used to determine how much tokens will be received by provided ingots amount\\r\\n    /// @param ingotsAmountIn Ingots amount in\\r\\n    /// @return tokensAmountOut Tokens amount out\\r\\n    function getTokensAmountOut(uint256 ingotsAmountIn) external view returns (uint256 tokensAmountOut);\\r\\n\\r\\n    /// Calculates minimum amount of ingots required for specified amount of tokens to receive\\r\\n    /// @dev Used to determine how much tokens will be received by provided ingots amount\\r\\n    /// @param tokensAmountOut Tokens amount out\\r\\n    /// @return ingotsAmountIn Ingots amount in\\r\\n    function getIngotsAmountIn(uint256 tokensAmountOut) external view returns (uint256 ingotsAmountIn);\\r\\n\\r\\n    /// @notice Calculates current price of token in ingots\\r\\n    /// @return price Price\\r\\n    function getCurrentPrice() external view returns (uint256 price);\\r\\n}\\r\\n\",\"keccak256\":\"0x647f7520741dee93a5585868d3a4246614fd229681be7e8ff26f31c85fa5d121\",\"license\":\"MIT\"},\"contracts/libraries/MathExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/// @title Extension of math library\\r\\n/// @notice Contains helper functions for some math operations\\r\\nlibrary MathExtension {\\r\\n    /// @dev Calculates square root of uint256 using Babylonian Method\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Rounds uint256 value with provided precision to its integer value rounding down\\r\\n    function roundDownWithPrecision(uint256 value, uint256 precision) internal pure returns (uint256) {\\r\\n        return (value / precision) * precision;\\r\\n    }\\r\\n\\r\\n    /// @dev Rounds uint256 value with provided precision to its integer value rounding up\\r\\n    function roundUpWithPrecision(uint256 value, uint256 precision) internal pure returns (uint256) {\\r\\n        uint256 roundedValue = roundDownWithPrecision(value, precision);\\r\\n        if (value % precision != 0) {\\r\\n            roundedValue += precision;\\r\\n        }\\r\\n\\r\\n        return roundedValue;\\r\\n    }\\r\\n\\r\\n    /// @dev Check if uint256 value with provided precision integer value or not\\r\\n    function isIntegerWithPrecision(uint256 value, uint256 precision) internal pure returns (bool) {\\r\\n        return value % precision == 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x152c77da80ea68fd426a62c042866fd6305a1a1b48add7dd6474aa0a4a18f72d\",\"license\":\"MIT\"},\"contracts/token/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IERC20Burnable {\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x987331fa32acb2cc7f935508e8c6b3ad0d108ba9ff7ab034968dac0a284205db\",\"license\":\"MIT\"},\"contracts/token/IERC20Int.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Int is IERC20 {\\r\\n    function realBalanceOf(address account) external view returns (int256);\\r\\n\\r\\n    function realTotalSupply() external view returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0x4462fcf9d28c5ffe47f9d9d12abdbf39aa51ed2fb2c2fad78b96372db2224a3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613753806100206000396000f3fe608060405234801561001057600080fd5b50600436106101595760003560e01c80637b103999116100c95780637b103999146102e65780637d884c74146102ee57806384ba89e3146102f65780638dc82a4a146102fe5780638f5803f014610329578063971e03cc1461033c5780639d4095fe14610353578063bb713ee81461035b578063bc68eb4914610372578063d1c9861814610385578063ece56a1a1461038d578063ee260fbb14610395578063f4f67fc1146103c0578063fbf06338146103e057600080fd5b8063057dc9951461015e57806309218e911461018e5780630b4e99c3146101a1578063143e55e0146101b7578063143ef9ac146101cc5780631852b5af146101f757806330b67baa1461020f578063383f9ac314610217578063385693791461026a5780634ddf47d41461029557806371b95cb1146102aa57806373511c02146102bd57806375846135146102de575b600080fd5b61017161016c366004612ebe565b6103e9565b6040516001600160401b0390911681526020015b60405180910390f35b600354610171906001600160401b031681565b6101a96104fb565b604051908152602001610185565b6101bf610538565b6040516101859190612f18565b6101a96101da366004612f44565b600560209081526000928352604080842090915290825290205481565b6101ff6105bc565b6040519015158152602001610185565b6101bf6105d4565b600954610240906001600160401b0380821691600160401b8104821691600160801b9091041683565b604080516001600160401b0394851681529284166020840152921691810191909152606001610185565b6101a9610278366004612f70565b600460209081526000928352604080842090915290825290205481565b6102a86102a3366004612fd8565b6105de565b005b6101716102b836600461306c565b610b22565b6102d06102cb3660046130a5565b610c79565b6040516101859291906130fd565b6101ff610f1c565b6101bf610fef565b6101a9611036565b6101a9611073565b6101a961030c366004612f70565b600760209081526000928352604080842090915290825290205481565b6102a8610337366004612f44565b6110b0565b6103446114ff565b60405161018593929190613118565b6101ff611b16565b610363611be8565b60405161018593929190613188565b61034461038036600461324c565b611d98565b6102a8612300565b6101bf612636565b6101a96103a3366004612f44565b600660209081526000928352604080842090915290825290205481565b6101a96103ce3660046130a5565b60086020526000908152604090205481565b6101a9600a5481565b60008315806103f6575082155b156104145760405163e12ddd0b60e01b815260040160405180910390fd5b600061042089896132db565b9050856104bc578385101580156104405750600161043e85876132db565b115b156104725784846104528360026132ef565b6001600160401b0316610465919061331a565b61046f91906132db565b90505b848411801561048a5750600161048886866132db565b115b156104bc57838561049c8360026132ef565b6001600160401b03166104af919061331a565b6104b991906132db565b90505b82158015906104d35750806001600160401b031683105b156104db5750815b86816001600160401b031610156104ef5750855b98975050505050505050565b604080516020808252818301909252600091309183918291906020820181803683370190505090506020607a60208301853c602001519392505050565b60006105426105d4565b6001600160a01b031663720a70bd610558611036565b6040518263ffffffff1660e01b815260040161057691815260200190565b602060405180830381865afa158015610593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b79190613331565b905090565b600954600160801b90046001600160401b0316151590565b60006105b761267d565b600054610100900460ff16158080156105fe5750600054600160ff909116105b806106185750303b158015610618575060005460ff166001145b61067f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156106a2576000805461ff0019166101001790555b600080600080858060200190518101906106bc91906133a9565b935093509350935060008490506000849050816001600160a01b031663418f35cc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610730919061349f565b6003805467ffffffffffffffff199081166001600160401b03938416179091556009805490911642909216919091179055600061076c866126ba565b9050806107a15761077e8686866127b3565b1561079c57604051634f55a85360e11b815260040160405180910390fd5b61089b565b6000805b86518110156108775760008782815181106107c2576107c26134ba565b6020026020010151905060008783815181106107e0576107e06134ba565b602002602001015190506001600001898481518110610801576108016134ba565b602090810291909101810151825460018101845560009384529190922001558751600290899085908110610837576108376134ba565b6020908102919091018101518254600181018455600093845291909220015561086081856134d0565b93505050808061086f906134e3565b9150506107a5565b50806000036108995760405163a7998b9760e01b815260040160405180910390fd5b505b6000826001600160a01b031663610bb6a06040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff91906134fc565b505060095491935060009250506001600160401b0390811690831611156109ca57600954610936906001600160401b03168361355a565b6001600160401b03169050610949610fef565b6001600160a01b031663d6dd04996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa9190613581565b8110156109ca5760405163f9df86ef60e01b815260040160405180910390fd5b6109e183826109d88c61290b565b6102b88c61290b565b600980546001600160401b0392909216600160401b0267ffffffffffffffff60401b19909216919091179055604051631397487f60e31b81526001600160a01b03861690639cba43f890610a3c90309060019060040161359a565b600060405180830381600087803b158015610a5657600080fd5b505af1158015610a6a573d6000803e3d6000fd5b5050604051631397487f60e31b81526001600160a01b0387169250639cba43f89150610a9d90309060029060040161359a565b600060405180830381600087803b158015610ab757600080fd5b505af1158015610acb573d6000803e3d6000fd5b505050505050505050505050508015610b1e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600080610b2d610fef565b6001600160a01b031663781e0efe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e9190613581565b90506000610b9a610fef565b6001600160a01b031663fe9135f06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb9190613581565b90506000610c07610fef565b6001600160a01b031663d6dd04996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c689190613581565b90506104ef8383838b8a8a8d6103e9565b6001600160a01b03811660009081526008602052604081205460609082610c9e610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cdb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0391908101906135b3565b9050600081516001600160401b03811115610d2057610d20612f92565b604051908082528060200260200182016040528015610d49578160200160208202803683370190505b50600a54909150831460005b8351811015610f10576000848281518110610d7257610d726134ba565b60209081029190910181015160008881526004835260408082208383528452808220546001600160a01b038e16835260058552818320848452909452902054909250811580610dbf575080155b15610dcc57505050610efe565b600082610de183670de0b6b3a764000061331a565b610deb91906132db565b90506000600760008b815260200190815260200160002060008681526020019081526020016000205490506000600660008f6001600160a01b03166001600160a01b03168152602001908152602001600020600087815260200190815260200160002054670de0b6b3a7640000610e6291906134d0565b9050600081610e71858561331a565b610e7b91906132db565b905080600003610e915750505050505050610efe565b6000610ea582670de0b6b3a7640000612ab2565b905089610ed6576000610ec083670de0b6b3a7640000612ad2565b905080871015610ed05781610ed2565b805b9150505b808b8a81518110610ee957610ee96134ba565b60200260200101818152505050505050505050505b80610f08816134e3565b915050610d55565b50969095509350505050565b600080610f276105d4565b6001600160a01b03166344d9bc5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f889190613581565b905060008115610fa157610f9c4283612b02565b610fa3565b425b600954909150600090610fc8906001600160401b03600160401b8204811691166135e7565b6009546001600160401b039182169250168210801590610fe757508082105b935050505090565b6000610ff96105d4565b6001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610593573d6000803e3d6000fd5b604080516020808252818301909252600091309183918291906020820181803683370190505090506020609a60208301853c602001519392505050565b604080516020808252818301909252600091309183918291906020820181803683370190505090506020605a60208301853c602001519392505050565b6110b8612b18565b60006110c2610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261112791908101906135b3565b90506000611134846126ba565b90506000816111435782611192565b600180546040805160208084028201810190925282815292919083018282801561118c57602002820191906000526020600020905b815481526020019060010190808311611178575b50505050505b905060005b81518110156114105760008282815181106111b4576111b46134ba565b6020026020010151905060006111c8610538565b6001600160a01b031663feae7dc3836040518263ffffffff1660e01b81526004016111f591815260200190565b602060405180830381865afa158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190613331565b6001600160a01b03166370a08231896040518263ffffffff1660e01b81526004016112619190612f18565b602060405180830381865afa15801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a29190613581565b90508085156112f35760006001800185815481106112c2576112c26134ba565b90600052602060002001549050808310156112f05760405163da4cfa9760e01b815260040160405180910390fd5b90505b604051630729dd9560e31b8152600481018490526000906001600160a01b038b169063394eeca890602401602060405180830381865afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f9190613581565b90506000670de0b6b3a764000061137683826134d0565b611380908561331a565b61138a91906132db565b60008b81526004602090815260408083208984529091528120805492935083929091906113b89084906134d0565b90915550506001600160a01b038b166000818152600560209081526040808320898452825280832094909455918152600682528281209681529590529093209290925550819050611408816134e3565b915050611197565b5060008085600114611423576001611426565b60025b60ff16905060005b85518110156114935760008281526004602052604081208751829089908590811061145b5761145b6134ba565b602002602001015181526020019081526020016000205411156114815760019250611493565b8061148b816134e3565b91505061142e565b506001600160a01b038716600090815260086020526040902086905581156114bd576114bd612be4565b7ff6a9086f0e560818b9fc087387152503d2864daffa4c3387be717f065c1e0f2287876040516114ee92919061359a565b60405180910390a150505050505050565b6060806060600061150e610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa15801561154b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261157391908101906135b3565b905080516001600160401b0381111561158e5761158e612f92565b6040519080825280602002602001820160405280156115b7578160200160208202803683370190505b50935080516001600160401b038111156115d3576115d3612f92565b6040519080825280602002602001820160405280156115fc578160200160208202803683370190505b50925060008060008060005b85518110156117e0576000868281518110611625576116256134ba565b602002602001015190506000611639610fef565b6001600160a01b03166335ba7989836040518263ffffffff1660e01b815260040161166691815260200190565b60c060405180830381865afa158015611683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a79190613607565b805160008481526000805160206136de83398151915260205260409020549192506116d19161331a565b6116e390670de0b6b3a764000061331a565b6116ed90886134d0565b815160008481526000805160206136fe83398151915260205260409020549198506117179161331a565b61172990670de0b6b3a764000061331a565b61173390876134d0565b60208083015160008581526000805160206136de8339815191529092526040909120549197506117629161331a565b61177490670de0b6b3a764000061331a565b61177e90866134d0565b60208083015160008581526000805160206136fe8339815191529092526040909120549196506117ad9161331a565b6117bf90670de0b6b3a764000061331a565b6117c990856134d0565b9350505080806117d8906134e3565b915050611608565b506040805160208101869052908101849052606081018390526080810182905260a00160408051808303601f190181529190526009549096506000906119159085908590600160401b90046001600160401b031661183c610fef565b6001600160a01b031663781e0efe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d9190613581565b6118a5610fef565b6001600160a01b031663fe9135f06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119069190613581565b61191091906132db565b612d49565b60095490915060009061193e9087908590600160401b90046001600160401b031661183c610fef565b905060005b8751811015611b09576000888281518110611960576119606134ba565b60209081029190910181015160008181526000805160206136de8339815191529092526040822054909250670de0b6b3a7640000906119a090879061331a565b6119aa91906132db565b60008381526000805160206136de8339815191526020526040902054909150811115611a115760008281526000805160206136de83398151915260205260409020548d518e9085908110611a0057611a006134ba565b602002602001018181525050611a31565b808d8481518110611a2457611a246134ba565b6020026020010181815250505b60008281526000805160206136fe8339815191526020526040812054670de0b6b3a764000090611a6290879061331a565b611a6c91906132db565b60008481526000805160206136fe8339815191526020526040902054909150811115611ad35760008381526000805160206136fe83398151915260205260409020548d518e9086908110611ac257611ac26134ba565b602002602001018181525050611af3565b808d8581518110611ae657611ae66134ba565b6020026020010181815250505b5050508080611b01906134e3565b915050611943565b5050505050505050909192565b600080611b216105d4565b6001600160a01b03166344d9bc5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b829190613581565b905060008115611b9b57611b964283612b02565b611b9d565b425b6009549091506001600160401b031615801590611be15750600954611bd4906001600160401b03600160401b8204811691166135e7565b6001600160401b03168110155b9250505090565b606080600080600080611bf96114ff565b9250925092506000806000611c0e8686611d98565b9250925092506000611c208583612d8a565b9050600087516001600160401b03811115611c3d57611c3d612f92565b604051908082528060200260200182016040528015611c66578160200160208202803683370190505b509050600087516001600160401b03811115611c8457611c84612f92565b604051908082528060200260200182016040528015611cad578160200160208202803683370190505b50905060005b8951811015611d8557868181518110611cce57611cce6134ba565b60200260200101518a8281518110611ce857611ce86134ba565b6020026020010151611cfa91906134d0565b838281518110611d0c57611d0c6134ba565b602002602001018181525050858181518110611d2a57611d2a6134ba565b6020026020010151898281518110611d4457611d446134ba565b6020026020010151611d5691906134d0565b828281518110611d6857611d686134ba565b602090810291909101015280611d7d816134e3565b915050611cb3565b50909b909a509098509650505050505050565b60608060606000611da7610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa158015611de4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e0c91908101906135b3565b905080516001600160401b03811115611e2757611e27612f92565b604051908082528060200260200182016040528015611e50578160200160208202803683370190505b50935080516001600160401b03811115611e6c57611e6c612f92565b604051908082528060200260200182016040528015611e95578160200160208202803683370190505b50925060008060008060005b85518110156120a3576000868281518110611ebe57611ebe6134ba565b602002602001015190506000611ed2610fef565b6001600160a01b03166335ba7989836040518263ffffffff1660e01b8152600401611eff91815260200190565b60c060405180830381865afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190613607565b905060008d8481518110611f5657611f566134ba565b60209081029190910181015160008581526000805160206136de833981519152909252604090912054611f899190613680565b905060008d8581518110611f9f57611f9f6134ba565b60209081029190910181015160008681526000805160206136fe833981519152909252604090912054611fd29190613680565b9050826040015182611fe4919061331a565b611ff690670de0b6b3a764000061331a565b612000908a6134d0565b9850826040015181612012919061331a565b61202490670de0b6b3a764000061331a565b61202e90896134d0565b9750826060015182612040919061331a565b61205290670de0b6b3a764000061331a565b61205c90886134d0565b965082606001518161206e919061331a565b61208090670de0b6b3a764000061331a565b61208a90876134d0565b955050505050808061209b906134e3565b915050611ea1565b506040805160208101869052908101849052606081018390526080810182905260a001604051602081830303815290604052955081600014806120e4575080155b156120f35750505050506122f9565b6009546000906121199085908590600160401b90046001600160401b031661183c610fef565b6009549091506000906121429087908590600160401b90046001600160401b031661183c610fef565b905060005b87518110156122f0576000888281518110612164576121646134ba565b6020026020010151905060008e8381518110612182576121826134ba565b60209081029190910181015160008481526000805160206136de8339815191529092526040909120546121b59190613680565b90506000670de0b6b3a76400006121cc878461331a565b6121d691906132db565b905081811061220357818e85815181106121f2576121f26134ba565b602002602001018181525050612223565b808e8581518110612216576122166134ba565b6020026020010181815250505b505060008d8381518110612239576122396134ba565b60209081029190910181015160008481526000805160206136fe83398151915290925260409091205461226c9190613680565b90506000670de0b6b3a7640000612283868461331a565b61228d91906132db565b90508181106122ba57818d85815181106122a9576122a96134ba565b6020026020010181815250506122da565b808d85815181106122cd576122cd6134ba565b6020026020010181815250505b50505080806122e8906134e3565b915050612147565b50505050505050505b9250925092565b612308611b16565b61232557604051630355dc2160e61b815260040160405180910390fd5b61232d6105bc565b1561234b57604051637f56dbbd60e01b815260040160405180910390fd5b60095461236a906001600160401b03600160401b8204811691166135e7565b6009805467ffffffffffffffff60801b1916600160801b6001600160401b0393841681029190911791829055604051910490911681527f6e89b8a2a3c481f57d678455f59f42429cb60be86708621a7d8a371ca5da3a049060200160405180910390a160006123d7610538565b60035460405163c4c31e8560e01b81526001600160401b0390911660048201526001600160a01b03919091169063c4c31e8590602401602060405180830381865afa15801561242a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244e9190613331565b90506000816001600160a01b0316630b4e99c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b49190613581565b60408051808201909152600881526743554c544953545360c01b60209091015290507f9720b703263248cc672c2dcf2bd34d367a3fd48b1bcd07ae36199e513e33ff108101610b1e576000826001600160a01b031663f10e38af6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561253d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125619190613331565b9050306001600160a01b0316816001600160a01b03166344e445456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cf9190613331565b6001600160a01b03160361263157806001600160a01b0316631d8557d76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561261857600080fd5b505af115801561262c573d6000803e3d6000fd5b505050505b505050565b6000612640610fef565b6001600160a01b031663ece56a1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610593573d6000803e3d6000fd5b604080516014808252818301909252600091309183918291906020820181803683370190505090506014602a60208301853c601401519392505050565b600080826001600160a01b031663c45f10006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271f9190613331565b90506040518060400160405280600881526020016743554c544953545360c01b81525080519060200120816001600160a01b0316630b4e99c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ab9190613581565b149392505050565b6000805b83518110156128fe5760006127ca610538565b6001600160a01b031663feae7dc38684815181106127ea576127ea6134ba565b60200260200101516040518263ffffffff1660e01b815260040161281091815260200190565b602060405180830381865afa15801561282d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128519190613331565b6001600160a01b03166370a08231876040518263ffffffff1660e01b815260040161287c9190612f18565b602060405180830381865afa158015612899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bd9190613581565b90508382815181106128d1576128d16134ba565b60200260200101518111156128eb57600192505050612904565b50806128f6816134e3565b9150506127b7565b50600090505b9392505050565b600080612916610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa158015612953573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261297b91908101906135b3565b90506000805b8251811015612aaa57600083828151811061299e5761299e6134ba565b602002602001015190506129b0610538565b6001600160a01b031663feae7dc3826040518263ffffffff1660e01b81526004016129dd91815260200190565b602060405180830381865afa1580156129fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1e9190613331565b6001600160a01b03166370a08231876040518263ffffffff1660e01b8152600401612a499190612f18565b602060405180830381865afa158015612a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8a9190613581565b612a9490846134d0565b9250508080612aa2906134e3565b915050612981565b509392505050565b600081612abf81856132db565b612ac9919061331a565b90505b92915050565b600080612adf8484612ab2565b9050612aeb8385613693565b15612ac957612afa83826134d0565b949350505050565b6000818310612b115781612ac9565b5090919050565b612b206105d4565b6001600160a01b0316336001600160a01b031614158015612bc457506000612b466105d4565b6001600160a01b031663ebbe8034612b5c611036565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015612b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc29190613581565b145b15612be25760405163422656d160e01b815260040160405180910390fd5b565b6000806000612bf1611be8565b9250925092506000612c01610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa158015612c3e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c6691908101906135b3565b905060005b8151811015612d40576000828281518110612c8857612c886134ba565b60200260200101519050858281518110612ca457612ca46134ba565b60209081029190910181015160008381527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b8289092526040909120558451859083908110612cf357612cf36134ba565b60209081029190910181015160009283527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d90915260409091205580612d38816134e3565b915050612c6b565b5050600a555050565b60008082612d57858861331a565b612d6191906132db565b905084612d7682670de0b6b3a764000061331a565b612d8091906132db565b9695505050505050565b600080600080600086806020019051810190612da691906136a7565b935093509350935060008060008089806020019051810190612dc891906136a7565b93509350935093506000808789670de0b6b3a7640000612de8919061331a565b612df291906132db565b9050600087612e098c670de0b6b3a764000061331a565b612e1391906132db565b9050600085118015612e255750600084115b15612e7d5784612e3d87670de0b6b3a764000061331a565b612e4791906132db565b612e5190836134d0565b915083612e6688670de0b6b3a764000061331a565b612e7091906132db565b612e7a90826134d0565b90505b80821115612e8a57600292505b80821015612e9757600192505b50909c9b505050505050505050505050565b80358015158114612eb957600080fd5b919050565b600080600080600080600060e0888a031215612ed957600080fd5b873596506020880135955060408801359450612ef760608901612ea9565b9699959850939660808101359560a0820135955060c0909101359350915050565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114612f4157600080fd5b50565b60008060408385031215612f5757600080fd5b8235612f6281612f2c565b946020939093013593505050565b60008060408385031215612f8357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612fd057612fd0612f92565b604052919050565b60006020808385031215612feb57600080fd5b82356001600160401b038082111561300257600080fd5b818501915085601f83011261301657600080fd5b81358181111561302857613028612f92565b61303a601f8201601f19168501612fa8565b9150808252868482850101111561305057600080fd5b8084840185840137600090820190930192909252509392505050565b6000806000806080858703121561308257600080fd5b61308b85612ea9565b966020860135965060408601359560600135945092505050565b6000602082840312156130b757600080fd5b8135612ac981612f2c565b600081518084526020808501945080840160005b838110156130f2578151875295820195908201906001016130d6565b509495945050505050565b8215158152604060208201526000612afa60408301846130c2565b60608152600061312b60608301866130c2565b60208382038185015261313e82876130c2565b91508382036040850152845180835260005b8181101561316b578681018301518482018401528201613150565b506000838201830152601f01601f19169091010195945050505050565b60608152600061319b60608301866130c2565b82810360208401526131ad81866130c2565b915050826040830152949350505050565b60006001600160401b038211156131d7576131d7612f92565b5060051b60200190565b600082601f8301126131f257600080fd5b81356020613207613202836131be565b612fa8565b82815260059290921b8401810191818101908684111561322657600080fd5b8286015b84811015613241578035835291830191830161322a565b509695505050505050565b6000806040838503121561325f57600080fd5b82356001600160401b038082111561327657600080fd5b613282868387016131e1565b9350602085013591508082111561329857600080fd5b506132a5858286016131e1565b9150509250929050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826132ea576132ea6132af565b500490565b6001600160401b03818116838216028082169190828114613312576133126132c5565b505092915050565b8082028115828204841417612acc57612acc6132c5565b60006020828403121561334357600080fd5b8151612ac981612f2c565b600082601f83011261335f57600080fd5b8151602061336f613202836131be565b82815260059290921b8401810191818101908684111561338e57600080fd5b8286015b848110156132415780518352918301918301613392565b600080600080608085870312156133bf57600080fd5b84516133ca81612f2c565b809450506020808601516133dd81612f2c565b60408701519094506001600160401b03808211156133fa57600080fd5b61340689838a0161334e565b9450606088015191508082111561341c57600080fd5b508601601f8101881361342e57600080fd5b805161343c613202826131be565b81815260059190911b8201830190838101908a83111561345b57600080fd5b928401925b8284101561347957835182529284019290840190613460565b979a9699509497505050505050565b80516001600160401b0381168114612eb957600080fd5b6000602082840312156134b157600080fd5b612ac982613488565b634e487b7160e01b600052603260045260246000fd5b80820180821115612acc57612acc6132c5565b6000600182016134f5576134f56132c5565b5060010190565b600080600080600060a0868803121561351457600080fd5b61351d86613488565b945061352b60208701613488565b935061353960408701613488565b925061354760608701613488565b9150608086015190509295509295909350565b6001600160401b0382811682821603908082111561357a5761357a6132c5565b5092915050565b60006020828403121561359357600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6000602082840312156135c557600080fd5b81516001600160401b038111156135db57600080fd5b612afa8482850161334e565b6001600160401b0381811683821601908082111561357a5761357a6132c5565b600060c0828403121561361957600080fd5b60405160c081018181106001600160401b038211171561363b5761363b612f92565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201528091505092915050565b81810381811115612acc57612acc6132c5565b6000826136a2576136a26132af565b500690565b600080600080608085870312156136bd57600080fd5b50508251602084015160408501516060909501519196909550909250905056feabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe0591da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7a2646970667358221220642a4f2b3ecbb6b0e921fb34579c7a06b8889226580497b5594cdb1b08bd09ce64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101595760003560e01c80637b103999116100c95780637b103999146102e65780637d884c74146102ee57806384ba89e3146102f65780638dc82a4a146102fe5780638f5803f014610329578063971e03cc1461033c5780639d4095fe14610353578063bb713ee81461035b578063bc68eb4914610372578063d1c9861814610385578063ece56a1a1461038d578063ee260fbb14610395578063f4f67fc1146103c0578063fbf06338146103e057600080fd5b8063057dc9951461015e57806309218e911461018e5780630b4e99c3146101a1578063143e55e0146101b7578063143ef9ac146101cc5780631852b5af146101f757806330b67baa1461020f578063383f9ac314610217578063385693791461026a5780634ddf47d41461029557806371b95cb1146102aa57806373511c02146102bd57806375846135146102de575b600080fd5b61017161016c366004612ebe565b6103e9565b6040516001600160401b0390911681526020015b60405180910390f35b600354610171906001600160401b031681565b6101a96104fb565b604051908152602001610185565b6101bf610538565b6040516101859190612f18565b6101a96101da366004612f44565b600560209081526000928352604080842090915290825290205481565b6101ff6105bc565b6040519015158152602001610185565b6101bf6105d4565b600954610240906001600160401b0380821691600160401b8104821691600160801b9091041683565b604080516001600160401b0394851681529284166020840152921691810191909152606001610185565b6101a9610278366004612f70565b600460209081526000928352604080842090915290825290205481565b6102a86102a3366004612fd8565b6105de565b005b6101716102b836600461306c565b610b22565b6102d06102cb3660046130a5565b610c79565b6040516101859291906130fd565b6101ff610f1c565b6101bf610fef565b6101a9611036565b6101a9611073565b6101a961030c366004612f70565b600760209081526000928352604080842090915290825290205481565b6102a8610337366004612f44565b6110b0565b6103446114ff565b60405161018593929190613118565b6101ff611b16565b610363611be8565b60405161018593929190613188565b61034461038036600461324c565b611d98565b6102a8612300565b6101bf612636565b6101a96103a3366004612f44565b600660209081526000928352604080842090915290825290205481565b6101a96103ce3660046130a5565b60086020526000908152604090205481565b6101a9600a5481565b60008315806103f6575082155b156104145760405163e12ddd0b60e01b815260040160405180910390fd5b600061042089896132db565b9050856104bc578385101580156104405750600161043e85876132db565b115b156104725784846104528360026132ef565b6001600160401b0316610465919061331a565b61046f91906132db565b90505b848411801561048a5750600161048886866132db565b115b156104bc57838561049c8360026132ef565b6001600160401b03166104af919061331a565b6104b991906132db565b90505b82158015906104d35750806001600160401b031683105b156104db5750815b86816001600160401b031610156104ef5750855b98975050505050505050565b604080516020808252818301909252600091309183918291906020820181803683370190505090506020607a60208301853c602001519392505050565b60006105426105d4565b6001600160a01b031663720a70bd610558611036565b6040518263ffffffff1660e01b815260040161057691815260200190565b602060405180830381865afa158015610593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b79190613331565b905090565b600954600160801b90046001600160401b0316151590565b60006105b761267d565b600054610100900460ff16158080156105fe5750600054600160ff909116105b806106185750303b158015610618575060005460ff166001145b61067f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156106a2576000805461ff0019166101001790555b600080600080858060200190518101906106bc91906133a9565b935093509350935060008490506000849050816001600160a01b031663418f35cc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610730919061349f565b6003805467ffffffffffffffff199081166001600160401b03938416179091556009805490911642909216919091179055600061076c866126ba565b9050806107a15761077e8686866127b3565b1561079c57604051634f55a85360e11b815260040160405180910390fd5b61089b565b6000805b86518110156108775760008782815181106107c2576107c26134ba565b6020026020010151905060008783815181106107e0576107e06134ba565b602002602001015190506001600001898481518110610801576108016134ba565b602090810291909101810151825460018101845560009384529190922001558751600290899085908110610837576108376134ba565b6020908102919091018101518254600181018455600093845291909220015561086081856134d0565b93505050808061086f906134e3565b9150506107a5565b50806000036108995760405163a7998b9760e01b815260040160405180910390fd5b505b6000826001600160a01b031663610bb6a06040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff91906134fc565b505060095491935060009250506001600160401b0390811690831611156109ca57600954610936906001600160401b03168361355a565b6001600160401b03169050610949610fef565b6001600160a01b031663d6dd04996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa9190613581565b8110156109ca5760405163f9df86ef60e01b815260040160405180910390fd5b6109e183826109d88c61290b565b6102b88c61290b565b600980546001600160401b0392909216600160401b0267ffffffffffffffff60401b19909216919091179055604051631397487f60e31b81526001600160a01b03861690639cba43f890610a3c90309060019060040161359a565b600060405180830381600087803b158015610a5657600080fd5b505af1158015610a6a573d6000803e3d6000fd5b5050604051631397487f60e31b81526001600160a01b0387169250639cba43f89150610a9d90309060029060040161359a565b600060405180830381600087803b158015610ab757600080fd5b505af1158015610acb573d6000803e3d6000fd5b505050505050505050505050508015610b1e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600080610b2d610fef565b6001600160a01b031663781e0efe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e9190613581565b90506000610b9a610fef565b6001600160a01b031663fe9135f06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb9190613581565b90506000610c07610fef565b6001600160a01b031663d6dd04996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c689190613581565b90506104ef8383838b8a8a8d6103e9565b6001600160a01b03811660009081526008602052604081205460609082610c9e610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cdb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0391908101906135b3565b9050600081516001600160401b03811115610d2057610d20612f92565b604051908082528060200260200182016040528015610d49578160200160208202803683370190505b50600a54909150831460005b8351811015610f10576000848281518110610d7257610d726134ba565b60209081029190910181015160008881526004835260408082208383528452808220546001600160a01b038e16835260058552818320848452909452902054909250811580610dbf575080155b15610dcc57505050610efe565b600082610de183670de0b6b3a764000061331a565b610deb91906132db565b90506000600760008b815260200190815260200160002060008681526020019081526020016000205490506000600660008f6001600160a01b03166001600160a01b03168152602001908152602001600020600087815260200190815260200160002054670de0b6b3a7640000610e6291906134d0565b9050600081610e71858561331a565b610e7b91906132db565b905080600003610e915750505050505050610efe565b6000610ea582670de0b6b3a7640000612ab2565b905089610ed6576000610ec083670de0b6b3a7640000612ad2565b905080871015610ed05781610ed2565b805b9150505b808b8a81518110610ee957610ee96134ba565b60200260200101818152505050505050505050505b80610f08816134e3565b915050610d55565b50969095509350505050565b600080610f276105d4565b6001600160a01b03166344d9bc5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f889190613581565b905060008115610fa157610f9c4283612b02565b610fa3565b425b600954909150600090610fc8906001600160401b03600160401b8204811691166135e7565b6009546001600160401b039182169250168210801590610fe757508082105b935050505090565b6000610ff96105d4565b6001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610593573d6000803e3d6000fd5b604080516020808252818301909252600091309183918291906020820181803683370190505090506020609a60208301853c602001519392505050565b604080516020808252818301909252600091309183918291906020820181803683370190505090506020605a60208301853c602001519392505050565b6110b8612b18565b60006110c2610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261112791908101906135b3565b90506000611134846126ba565b90506000816111435782611192565b600180546040805160208084028201810190925282815292919083018282801561118c57602002820191906000526020600020905b815481526020019060010190808311611178575b50505050505b905060005b81518110156114105760008282815181106111b4576111b46134ba565b6020026020010151905060006111c8610538565b6001600160a01b031663feae7dc3836040518263ffffffff1660e01b81526004016111f591815260200190565b602060405180830381865afa158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190613331565b6001600160a01b03166370a08231896040518263ffffffff1660e01b81526004016112619190612f18565b602060405180830381865afa15801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a29190613581565b90508085156112f35760006001800185815481106112c2576112c26134ba565b90600052602060002001549050808310156112f05760405163da4cfa9760e01b815260040160405180910390fd5b90505b604051630729dd9560e31b8152600481018490526000906001600160a01b038b169063394eeca890602401602060405180830381865afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f9190613581565b90506000670de0b6b3a764000061137683826134d0565b611380908561331a565b61138a91906132db565b60008b81526004602090815260408083208984529091528120805492935083929091906113b89084906134d0565b90915550506001600160a01b038b166000818152600560209081526040808320898452825280832094909455918152600682528281209681529590529093209290925550819050611408816134e3565b915050611197565b5060008085600114611423576001611426565b60025b60ff16905060005b85518110156114935760008281526004602052604081208751829089908590811061145b5761145b6134ba565b602002602001015181526020019081526020016000205411156114815760019250611493565b8061148b816134e3565b91505061142e565b506001600160a01b038716600090815260086020526040902086905581156114bd576114bd612be4565b7ff6a9086f0e560818b9fc087387152503d2864daffa4c3387be717f065c1e0f2287876040516114ee92919061359a565b60405180910390a150505050505050565b6060806060600061150e610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa15801561154b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261157391908101906135b3565b905080516001600160401b0381111561158e5761158e612f92565b6040519080825280602002602001820160405280156115b7578160200160208202803683370190505b50935080516001600160401b038111156115d3576115d3612f92565b6040519080825280602002602001820160405280156115fc578160200160208202803683370190505b50925060008060008060005b85518110156117e0576000868281518110611625576116256134ba565b602002602001015190506000611639610fef565b6001600160a01b03166335ba7989836040518263ffffffff1660e01b815260040161166691815260200190565b60c060405180830381865afa158015611683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a79190613607565b805160008481526000805160206136de83398151915260205260409020549192506116d19161331a565b6116e390670de0b6b3a764000061331a565b6116ed90886134d0565b815160008481526000805160206136fe83398151915260205260409020549198506117179161331a565b61172990670de0b6b3a764000061331a565b61173390876134d0565b60208083015160008581526000805160206136de8339815191529092526040909120549197506117629161331a565b61177490670de0b6b3a764000061331a565b61177e90866134d0565b60208083015160008581526000805160206136fe8339815191529092526040909120549196506117ad9161331a565b6117bf90670de0b6b3a764000061331a565b6117c990856134d0565b9350505080806117d8906134e3565b915050611608565b506040805160208101869052908101849052606081018390526080810182905260a00160408051808303601f190181529190526009549096506000906119159085908590600160401b90046001600160401b031661183c610fef565b6001600160a01b031663781e0efe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d9190613581565b6118a5610fef565b6001600160a01b031663fe9135f06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119069190613581565b61191091906132db565b612d49565b60095490915060009061193e9087908590600160401b90046001600160401b031661183c610fef565b905060005b8751811015611b09576000888281518110611960576119606134ba565b60209081029190910181015160008181526000805160206136de8339815191529092526040822054909250670de0b6b3a7640000906119a090879061331a565b6119aa91906132db565b60008381526000805160206136de8339815191526020526040902054909150811115611a115760008281526000805160206136de83398151915260205260409020548d518e9085908110611a0057611a006134ba565b602002602001018181525050611a31565b808d8481518110611a2457611a246134ba565b6020026020010181815250505b60008281526000805160206136fe8339815191526020526040812054670de0b6b3a764000090611a6290879061331a565b611a6c91906132db565b60008481526000805160206136fe8339815191526020526040902054909150811115611ad35760008381526000805160206136fe83398151915260205260409020548d518e9086908110611ac257611ac26134ba565b602002602001018181525050611af3565b808d8581518110611ae657611ae66134ba565b6020026020010181815250505b5050508080611b01906134e3565b915050611943565b5050505050505050909192565b600080611b216105d4565b6001600160a01b03166344d9bc5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b829190613581565b905060008115611b9b57611b964283612b02565b611b9d565b425b6009549091506001600160401b031615801590611be15750600954611bd4906001600160401b03600160401b8204811691166135e7565b6001600160401b03168110155b9250505090565b606080600080600080611bf96114ff565b9250925092506000806000611c0e8686611d98565b9250925092506000611c208583612d8a565b9050600087516001600160401b03811115611c3d57611c3d612f92565b604051908082528060200260200182016040528015611c66578160200160208202803683370190505b509050600087516001600160401b03811115611c8457611c84612f92565b604051908082528060200260200182016040528015611cad578160200160208202803683370190505b50905060005b8951811015611d8557868181518110611cce57611cce6134ba565b60200260200101518a8281518110611ce857611ce86134ba565b6020026020010151611cfa91906134d0565b838281518110611d0c57611d0c6134ba565b602002602001018181525050858181518110611d2a57611d2a6134ba565b6020026020010151898281518110611d4457611d446134ba565b6020026020010151611d5691906134d0565b828281518110611d6857611d686134ba565b602090810291909101015280611d7d816134e3565b915050611cb3565b50909b909a509098509650505050505050565b60608060606000611da7610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa158015611de4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e0c91908101906135b3565b905080516001600160401b03811115611e2757611e27612f92565b604051908082528060200260200182016040528015611e50578160200160208202803683370190505b50935080516001600160401b03811115611e6c57611e6c612f92565b604051908082528060200260200182016040528015611e95578160200160208202803683370190505b50925060008060008060005b85518110156120a3576000868281518110611ebe57611ebe6134ba565b602002602001015190506000611ed2610fef565b6001600160a01b03166335ba7989836040518263ffffffff1660e01b8152600401611eff91815260200190565b60c060405180830381865afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190613607565b905060008d8481518110611f5657611f566134ba565b60209081029190910181015160008581526000805160206136de833981519152909252604090912054611f899190613680565b905060008d8581518110611f9f57611f9f6134ba565b60209081029190910181015160008681526000805160206136fe833981519152909252604090912054611fd29190613680565b9050826040015182611fe4919061331a565b611ff690670de0b6b3a764000061331a565b612000908a6134d0565b9850826040015181612012919061331a565b61202490670de0b6b3a764000061331a565b61202e90896134d0565b9750826060015182612040919061331a565b61205290670de0b6b3a764000061331a565b61205c90886134d0565b965082606001518161206e919061331a565b61208090670de0b6b3a764000061331a565b61208a90876134d0565b955050505050808061209b906134e3565b915050611ea1565b506040805160208101869052908101849052606081018390526080810182905260a001604051602081830303815290604052955081600014806120e4575080155b156120f35750505050506122f9565b6009546000906121199085908590600160401b90046001600160401b031661183c610fef565b6009549091506000906121429087908590600160401b90046001600160401b031661183c610fef565b905060005b87518110156122f0576000888281518110612164576121646134ba565b6020026020010151905060008e8381518110612182576121826134ba565b60209081029190910181015160008481526000805160206136de8339815191529092526040909120546121b59190613680565b90506000670de0b6b3a76400006121cc878461331a565b6121d691906132db565b905081811061220357818e85815181106121f2576121f26134ba565b602002602001018181525050612223565b808e8581518110612216576122166134ba565b6020026020010181815250505b505060008d8381518110612239576122396134ba565b60209081029190910181015160008481526000805160206136fe83398151915290925260409091205461226c9190613680565b90506000670de0b6b3a7640000612283868461331a565b61228d91906132db565b90508181106122ba57818d85815181106122a9576122a96134ba565b6020026020010181815250506122da565b808d85815181106122cd576122cd6134ba565b6020026020010181815250505b50505080806122e8906134e3565b915050612147565b50505050505050505b9250925092565b612308611b16565b61232557604051630355dc2160e61b815260040160405180910390fd5b61232d6105bc565b1561234b57604051637f56dbbd60e01b815260040160405180910390fd5b60095461236a906001600160401b03600160401b8204811691166135e7565b6009805467ffffffffffffffff60801b1916600160801b6001600160401b0393841681029190911791829055604051910490911681527f6e89b8a2a3c481f57d678455f59f42429cb60be86708621a7d8a371ca5da3a049060200160405180910390a160006123d7610538565b60035460405163c4c31e8560e01b81526001600160401b0390911660048201526001600160a01b03919091169063c4c31e8590602401602060405180830381865afa15801561242a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244e9190613331565b90506000816001600160a01b0316630b4e99c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b49190613581565b60408051808201909152600881526743554c544953545360c01b60209091015290507f9720b703263248cc672c2dcf2bd34d367a3fd48b1bcd07ae36199e513e33ff108101610b1e576000826001600160a01b031663f10e38af6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561253d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125619190613331565b9050306001600160a01b0316816001600160a01b03166344e445456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cf9190613331565b6001600160a01b03160361263157806001600160a01b0316631d8557d76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561261857600080fd5b505af115801561262c573d6000803e3d6000fd5b505050505b505050565b6000612640610fef565b6001600160a01b031663ece56a1a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610593573d6000803e3d6000fd5b604080516014808252818301909252600091309183918291906020820181803683370190505090506014602a60208301853c601401519392505050565b600080826001600160a01b031663c45f10006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271f9190613331565b90506040518060400160405280600881526020016743554c544953545360c01b81525080519060200120816001600160a01b0316630b4e99c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ab9190613581565b149392505050565b6000805b83518110156128fe5760006127ca610538565b6001600160a01b031663feae7dc38684815181106127ea576127ea6134ba565b60200260200101516040518263ffffffff1660e01b815260040161281091815260200190565b602060405180830381865afa15801561282d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128519190613331565b6001600160a01b03166370a08231876040518263ffffffff1660e01b815260040161287c9190612f18565b602060405180830381865afa158015612899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bd9190613581565b90508382815181106128d1576128d16134ba565b60200260200101518111156128eb57600192505050612904565b50806128f6816134e3565b9150506127b7565b50600090505b9392505050565b600080612916610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa158015612953573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261297b91908101906135b3565b90506000805b8251811015612aaa57600083828151811061299e5761299e6134ba565b602002602001015190506129b0610538565b6001600160a01b031663feae7dc3826040518263ffffffff1660e01b81526004016129dd91815260200190565b602060405180830381865afa1580156129fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1e9190613331565b6001600160a01b03166370a08231876040518263ffffffff1660e01b8152600401612a499190612f18565b602060405180830381865afa158015612a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8a9190613581565b612a9490846134d0565b9250508080612aa2906134e3565b915050612981565b509392505050565b600081612abf81856132db565b612ac9919061331a565b90505b92915050565b600080612adf8484612ab2565b9050612aeb8385613693565b15612ac957612afa83826134d0565b949350505050565b6000818310612b115781612ac9565b5090919050565b612b206105d4565b6001600160a01b0316336001600160a01b031614158015612bc457506000612b466105d4565b6001600160a01b031663ebbe8034612b5c611036565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015612b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc29190613581565b145b15612be25760405163422656d160e01b815260040160405180910390fd5b565b6000806000612bf1611be8565b9250925092506000612c01610fef565b6001600160a01b0316635a28acb06040518163ffffffff1660e01b8152600401600060405180830381865afa158015612c3e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c6691908101906135b3565b905060005b8151811015612d40576000828281518110612c8857612c886134ba565b60200260200101519050858281518110612ca457612ca46134ba565b60209081029190910181015160008381527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b8289092526040909120558451859083908110612cf357612cf36134ba565b60209081029190910181015160009283527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d90915260409091205580612d38816134e3565b915050612c6b565b5050600a555050565b60008082612d57858861331a565b612d6191906132db565b905084612d7682670de0b6b3a764000061331a565b612d8091906132db565b9695505050505050565b600080600080600086806020019051810190612da691906136a7565b935093509350935060008060008089806020019051810190612dc891906136a7565b93509350935093506000808789670de0b6b3a7640000612de8919061331a565b612df291906132db565b9050600087612e098c670de0b6b3a764000061331a565b612e1391906132db565b9050600085118015612e255750600084115b15612e7d5784612e3d87670de0b6b3a764000061331a565b612e4791906132db565b612e5190836134d0565b915083612e6688670de0b6b3a764000061331a565b612e7091906132db565b612e7a90826134d0565b90505b80821115612e8a57600292505b80821015612e9757600192505b50909c9b505050505050505050505050565b80358015158114612eb957600080fd5b919050565b600080600080600080600060e0888a031215612ed957600080fd5b873596506020880135955060408801359450612ef760608901612ea9565b9699959850939660808101359560a0820135955060c0909101359350915050565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114612f4157600080fd5b50565b60008060408385031215612f5757600080fd5b8235612f6281612f2c565b946020939093013593505050565b60008060408385031215612f8357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612fd057612fd0612f92565b604052919050565b60006020808385031215612feb57600080fd5b82356001600160401b038082111561300257600080fd5b818501915085601f83011261301657600080fd5b81358181111561302857613028612f92565b61303a601f8201601f19168501612fa8565b9150808252868482850101111561305057600080fd5b8084840185840137600090820190930192909252509392505050565b6000806000806080858703121561308257600080fd5b61308b85612ea9565b966020860135965060408601359560600135945092505050565b6000602082840312156130b757600080fd5b8135612ac981612f2c565b600081518084526020808501945080840160005b838110156130f2578151875295820195908201906001016130d6565b509495945050505050565b8215158152604060208201526000612afa60408301846130c2565b60608152600061312b60608301866130c2565b60208382038185015261313e82876130c2565b91508382036040850152845180835260005b8181101561316b578681018301518482018401528201613150565b506000838201830152601f01601f19169091010195945050505050565b60608152600061319b60608301866130c2565b82810360208401526131ad81866130c2565b915050826040830152949350505050565b60006001600160401b038211156131d7576131d7612f92565b5060051b60200190565b600082601f8301126131f257600080fd5b81356020613207613202836131be565b612fa8565b82815260059290921b8401810191818101908684111561322657600080fd5b8286015b84811015613241578035835291830191830161322a565b509695505050505050565b6000806040838503121561325f57600080fd5b82356001600160401b038082111561327657600080fd5b613282868387016131e1565b9350602085013591508082111561329857600080fd5b506132a5858286016131e1565b9150509250929050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826132ea576132ea6132af565b500490565b6001600160401b03818116838216028082169190828114613312576133126132c5565b505092915050565b8082028115828204841417612acc57612acc6132c5565b60006020828403121561334357600080fd5b8151612ac981612f2c565b600082601f83011261335f57600080fd5b8151602061336f613202836131be565b82815260059290921b8401810191818101908684111561338e57600080fd5b8286015b848110156132415780518352918301918301613392565b600080600080608085870312156133bf57600080fd5b84516133ca81612f2c565b809450506020808601516133dd81612f2c565b60408701519094506001600160401b03808211156133fa57600080fd5b61340689838a0161334e565b9450606088015191508082111561341c57600080fd5b508601601f8101881361342e57600080fd5b805161343c613202826131be565b81815260059190911b8201830190838101908a83111561345b57600080fd5b928401925b8284101561347957835182529284019290840190613460565b979a9699509497505050505050565b80516001600160401b0381168114612eb957600080fd5b6000602082840312156134b157600080fd5b612ac982613488565b634e487b7160e01b600052603260045260246000fd5b80820180821115612acc57612acc6132c5565b6000600182016134f5576134f56132c5565b5060010190565b600080600080600060a0868803121561351457600080fd5b61351d86613488565b945061352b60208701613488565b935061353960408701613488565b925061354760608701613488565b9150608086015190509295509295909350565b6001600160401b0382811682821603908082111561357a5761357a6132c5565b5092915050565b60006020828403121561359357600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6000602082840312156135c557600080fd5b81516001600160401b038111156135db57600080fd5b612afa8482850161334e565b6001600160401b0381811683821601908082111561357a5761357a6132c5565b600060c0828403121561361957600080fd5b60405160c081018181106001600160401b038211171561363b5761363b612f92565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201528091505092915050565b81810381811115612acc57612acc6132c5565b6000826136a2576136a26132af565b500690565b600080600080608085870312156136bd57600080fd5b50508251602084015160408501516060909501519196909550909250905056feabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe0591da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7a2646970667358221220642a4f2b3ecbb6b0e921fb34579c7a06b8889226580497b5594cdb1b08bd09ce64736f6c63430008140033",
  "devdoc": {
    "events": {
      "ArmyJoined(address,uint256)": {
        "params": {
          "armyAddress": "Address of the joined army",
          "side": "Side to which army is joined (sideA = 1, sideB = 2)"
        }
      },
      "BattleEnded(uint256)": {
        "params": {
          "endTime": "Time at which battle is ended"
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptArmyInBattle(address,uint256)": {
        "details": "Even though function is opened, it can only be called by world asset",
        "params": {
          "armyAddress": "Army address",
          "side": "Side to which army will join"
        }
      },
      "assetGroupId()": {
        "details": "Reads data from proxy's storage",
        "returns": {
          "_0": "World asset group id"
        }
      },
      "assetTypeId()": {
        "details": "Reads data from proxy's storage",
        "returns": {
          "_0": "World asset type id"
        }
      },
      "calculateAllCasualties()": {
        "details": "Uses values from battles' sideUnitsAmount in order to calculate casualties (can be executed while battle is still not fully formed)",
        "returns": {
          "_0": "Side A casualties",
          "_1": "Side A casualties",
          "_2": "Winning side (0 - both sides lost, 1 - side A Won, 2 - side B Won"
        }
      },
      "calculateArmyCasualties(address)": {
        "details": "Provides valid results only for ended battle",
        "params": {
          "armyAddress": "Address of army presented in battle"
        },
        "returns": {
          "_0": "Is army won",
          "_1": "Amount of casualties for related unit types"
        }
      },
      "calculateBattleDuration(uint256,uint256,uint256,bool,uint256,uint256,uint256)": {
        "details": "globalMultiplier, baseBattleDuration parameters from registry",
        "params": {
          "baseBattleDuration": "Base battle duration (from registry)",
          "globalMultiplier": "Global multiplier (from registry)",
          "isCultistsAttacked": "Is cultists attacked",
          "maxBattleDuration": "Max allowed battle duration",
          "minBattleDuration": "Minimum battle duration (from registry)",
          "units1": "Amount of units from attacker army",
          "units2": "Amount of units from attacked army"
        },
        "returns": {
          "_0": "Battle duration"
        }
      },
      "calculateStage1Casualties()": {
        "details": "Uses values from battles' sideUnitsAmount in order to calculate casualties (can be executed while battle is still not fully formed)",
        "returns": {
          "_side1Casualties": "Side A casualties",
          "_side2Casualties": "Side B casualties",
          "stageParams": "Stage params (encoded abi.encode(sideAOffense, sideBOffense, sideADefence, sideBDefence))"
        }
      },
      "calculateStage2Casualties(uint256[],uint256[])": {
        "details": "Uses values from battles' sideUnitsAmount in order to calculate casualties (can be executed while battle is still not fully formed)",
        "params": {
          "stage1SideACasualties": "Stage 1 side A casualties",
          "stage1SideBCasualties": "Stage 1 side B casualties"
        },
        "returns": {
          "_side1Casualties": "Side A casualties",
          "_side2Casualties": "Side B casualties",
          "stageParams": "Stage params (encoded abi.encode(sideAOffense, sideBOffense, sideADefence, sideBDefence))"
        }
      },
      "canEndBattle()": {
        "details": "Checks if endTime is set and current block.timestamp > beginTime + duration",
        "returns": {
          "_0": "Can battle be ended"
        }
      },
      "endBattle()": {
        "details": "Sets end time"
      },
      "era()": {
        "details": "Value is dereferenced from proxy storage and world"
      },
      "eraNumber()": {
        "details": "Reads data from proxy's storage",
        "returns": {
          "_0": "Era number"
        }
      },
      "getBattleDuration(bool,uint256,uint256,uint256)": {
        "details": "Returns same value as #calculateBattlesDuration but without the need to provide all parameters",
        "params": {
          "isCultistsAttacked": "Is cultists attacked",
          "maxBattleDuration": "Max allowed battle duration",
          "sideAUnitsAmount": "Side A units amount",
          "sideBUnitsAmount": "Side B units amount"
        },
        "returns": {
          "_0": "Battle duration"
        }
      },
      "init(bytes)": {
        "details": "World asset initializer",
        "params": {
          "initParams": "Encoded init params (every world asset has own knowledge how to extract data from it)"
        }
      },
      "isEndedBattle()": {
        "details": "Checks if endTime is not zero",
        "returns": {
          "_0": "Is ended battle"
        }
      },
      "isLobbyTime()": {
        "details": "Calculates if lobby is opened",
        "returns": {
          "_0": "Is lobby is opened"
        }
      },
      "registry()": {
        "details": "Value is dereferenced from world"
      },
      "world()": {
        "details": "Value is dereferenced from proxy storage"
      },
      "worldAssetFactory()": {
        "details": "Value is dereferenced from registry"
      }
    },
    "stateVariables": {
      "armySide": {
        "details": "Updated when #acceptArmyInBattle is called",
        "params": {
          "armyAddress": "Army address"
        },
        "return": "Side of specified army (sideA = 1, sideB = 2)",
        "returns": {
          "_0": "Side of specified army (sideA = 1, sideB = 2)"
        }
      },
      "armyUnitsAdditionalMultipliers": {
        "details": "Updated when army joins battle",
        "params": {
          "armyAddress": "Army address",
          "unitTypeId": "Unit type id"
        },
        "return": "Unit amount multiplier",
        "returns": {
          "_0": "Unit amount multiplier"
        }
      },
      "armyUnitsAmount": {
        "details": "Updated when army joins battle",
        "params": {
          "armyAddress": "Army address",
          "unitTypeId": "Unit type id"
        },
        "return": "Amount of units by army address and unit type",
        "returns": {
          "_0": "Amount of units by army address and unit type"
        }
      },
      "battleTimeInfo": {
        "details": "Updated when battle initialized, first armies joined and ended (#initBattle, #acceptArmyInBattle, #endBattle)",
        "returns": {
          "beginTime": "Time when battle is began",
          "duration": "Battle duration, initialized when first two armies joined",
          "endTime": "Time when battle is ended"
        }
      },
      "battleWithCultistsInitiationInfo": {
        "details": "Specifies amount of cultists to draw into the battle if battle is initiated by attacking them"
      },
      "casualties": {
        "details": "Updated when #acceptArmyInBattle is called",
        "params": {
          "side": "Side of which query casualties amount (sideA = 1, sideB = 2)",
          "unitTypeId": "Unit type id"
        },
        "return": "Amount of casualties by side and unit type",
        "returns": {
          "_0": "Amount of casualties by side and unit type"
        }
      },
      "position": {
        "details": "Immutable, initialized on the battle creation"
      },
      "sideUnitsAmount": {
        "details": "Updated when army joins side",
        "params": {
          "side": "Side of which query units amount (sideA = 1, sideB = 2)",
          "unitTypeId": "Unit type id"
        },
        "return": "Amount of units by specified side and unit type",
        "returns": {
          "_0": "Amount of units by specified side and unit type"
        }
      },
      "winningSide": {
        "details": "Updated when #endBattle is called",
        "return": "Winning side (no winner = 0, sideA = 1, sideB = 2)",
        "returns": {
          "_0": "Winning side (no winner = 0, sideA = 1, sideB = 2)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "BattleCannotAcceptCultistsArmyWhenCultistsAmountChangedToLowerValueThanDesired()": [
        {
          "notice": "Thrown when attempting to accept cultists army to the battle but their amount got smaller than desired to attack"
        }
      ],
      "BattleCannotBeCreatedByDesiringToAttackCultistsArmyWithoutUnits()": [
        {
          "notice": "Thrown when attempting to begin battle by attacking cultists army with desire to draw zero units to the battle"
        }
      ],
      "BattleCannotBeCreatedWhenArmyUnitsExceedDesiredAmountToAttack()": [
        {
          "notice": "Thrown when attempting to begin battle by attacking army with MAX amount of units to attack, but their value increased to more than MAX"
        }
      ],
      "BattleCannotBeCreatedWhenAttackedArmyIsAlmostOnAnotherPosition()": [
        {
          "notice": "Thrown when attempting to start battle by attacking army when maneuver duration left less than minimum battle duration"
        }
      ],
      "BattleCannotBeCreatedWithArmiesHavingZeroUnits()": [
        {
          "notice": "Thrown when attempting to begin battle with armies either of which has zero units"
        }
      ],
      "BattleCannotBeFinishedAtThisTime()": [
        {
          "notice": "Thrown when attempting to finish battle while time for it has not yet come"
        }
      ],
      "BattleCannotBeFinishedMoreThanOnce()": [
        {
          "notice": "Thrown when attempting to finish battle when it is already finished"
        }
      ],
      "OnlyActiveGame()": [
        {
          "notice": "Thrown when attempting to call action which can only be called in active game (started and not finished)"
        }
      ],
      "OnlyMightyCreator()": [
        {
          "notice": "Thrown when attempting to call action which can only be called by mighty creator"
        }
      ],
      "OnlyWorldAssetFromSameEra()": [
        {
          "notice": "Thrown when attempting to call action which can only be called by world asset from same era"
        }
      ]
    },
    "events": {
      "ArmyJoined(address,uint256)": {
        "notice": "Emitted when army joined battle"
      },
      "BattleEnded(uint256)": {
        "notice": "Emitted when #endBattle is called"
      }
    },
    "kind": "user",
    "methods": {
      "acceptArmyInBattle(address,uint256)": {
        "notice": "Accepts army in battle"
      },
      "armySide(address)": {
        "notice": "Mapping that contains side at which joined army is on"
      },
      "armyUnitsAdditionalMultipliers(address,bytes32)": {
        "notice": "Mapping that contains unit multiplier by army address and unit type"
      },
      "armyUnitsAmount(address,bytes32)": {
        "notice": "Mapping that contains amount of units by army address and unit type"
      },
      "assetGroupId()": {
        "notice": "Returns world asset group id"
      },
      "assetTypeId()": {
        "notice": "Returns world asset type id"
      },
      "battleTimeInfo()": {
        "notice": "Battle time info"
      },
      "calculateAllCasualties()": {
        "notice": "Calculates casualties for all battle stages"
      },
      "calculateArmyCasualties(address)": {
        "notice": "Calculates casualties for specified army"
      },
      "calculateBattleDuration(uint256,uint256,uint256,bool,uint256,uint256,uint256)": {
        "notice": "Calculates battle duration based on specified parameters"
      },
      "calculateStage1Casualties()": {
        "notice": "Calculates casualties for first battle stage"
      },
      "calculateStage2Casualties(uint256[],uint256[])": {
        "notice": "Calculates casualties for second battle stage (based on casualties from first battle stage)"
      },
      "canEndBattle()": {
        "notice": "Calculates if battle can be ended"
      },
      "casualties(uint256,bytes32)": {
        "notice": "Mapping that contains amount of casualties"
      },
      "endBattle()": {
        "notice": "Ends battle"
      },
      "era()": {
        "notice": "Era"
      },
      "eraNumber()": {
        "notice": "Returns era number"
      },
      "getBattleDuration(bool,uint256,uint256,uint256)": {
        "notice": "Calculates battle duration"
      },
      "isEndedBattle()": {
        "notice": "Calculates if battle is ended"
      },
      "isLobbyTime()": {
        "notice": "Calculates if lobby is opened"
      },
      "position()": {
        "notice": "Position at which battle is being held"
      },
      "registry()": {
        "notice": "Registry"
      },
      "sideUnitsAmount(uint256,bytes32)": {
        "notice": "Mapping that contains units amount by side and unit type"
      },
      "winningSide()": {
        "notice": "Winning side"
      },
      "world()": {
        "notice": "World"
      },
      "worldAssetFactory()": {
        "notice": "Returns world asset factory from registry"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 119,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 122,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15136,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "battleWithCultistsInitiationInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(BattleWithCultistsInitiationInfo)15132_storage"
      },
      {
        "astId": 15140,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "position",
        "offset": 0,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 15148,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "sideUnitsAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 15156,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "armyUnitsAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 15164,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "armyUnitsAdditionalMultipliers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 15172,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "casualties",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 15178,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "armySide",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15183,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "battleTimeInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(BattleTimeInfo)17204_storage"
      },
      {
        "astId": 15187,
        "contract": "contracts/core/assets/battle/Battle.sol:Battle",
        "label": "winningSide",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_struct(BattleTimeInfo)17204_storage": {
        "encoding": "inplace",
        "label": "struct IBattle.BattleTimeInfo",
        "members": [
          {
            "astId": 17199,
            "contract": "contracts/core/assets/battle/Battle.sol:Battle",
            "label": "beginTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 17201,
            "contract": "contracts/core/assets/battle/Battle.sol:Battle",
            "label": "duration",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 17203,
            "contract": "contracts/core/assets/battle/Battle.sol:Battle",
            "label": "endTime",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(BattleWithCultistsInitiationInfo)15132_storage": {
        "encoding": "inplace",
        "label": "struct Battle.BattleWithCultistsInitiationInfo",
        "members": [
          {
            "astId": 15128,
            "contract": "contracts/core/assets/battle/Battle.sol:Battle",
            "label": "maxUnitTypeIdsToAttack",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 15131,
            "contract": "contracts/core/assets/battle/Battle.sol:Battle",
            "label": "maxUnitsToAttack",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}