/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IRewardPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "defaultTokenPrice"
      | "getCurrentPrice"
      | "getIngotsAmountIn"
      | "getTokensAmountOut"
      | "init"
      | "investIntoPrizePool"
      | "lastSyncedTokenBalance"
      | "swapIngotsForTokens"
      | "toBeRepaidTokenAmount"
      | "withdrawRepayment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EthBalanceUpdated"
      | "LastSyncedTokenBalanceUpdated"
      | "ToBeRepaidTokenAmountUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "defaultTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIngotsAmountIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "investIntoPrizePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSyncedTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapIngotsForTokens",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toBeRepaidTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRepayment",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIngotsAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investIntoPrizePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSyncedTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapIngotsForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toBeRepaidTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRepayment",
    data: BytesLike
  ): Result;
}

export namespace EthBalanceUpdatedEvent {
  export type InputTuple = [newEthBalance: BigNumberish];
  export type OutputTuple = [newEthBalance: bigint];
  export interface OutputObject {
    newEthBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LastSyncedTokenBalanceUpdatedEvent {
  export type InputTuple = [newLastSyncedTokenBalance: BigNumberish];
  export type OutputTuple = [newLastSyncedTokenBalance: bigint];
  export interface OutputObject {
    newLastSyncedTokenBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ToBeRepaidTokenAmountUpdatedEvent {
  export type InputTuple = [newToBeRepaidTokenAmount: BigNumberish];
  export type OutputTuple = [newToBeRepaidTokenAmount: bigint];
  export interface OutputObject {
    newToBeRepaidTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRewardPool extends BaseContract {
  connect(runner?: ContractRunner | null): IRewardPool;
  waitForDeployment(): Promise<this>;

  interface: IRewardPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  defaultTokenPrice: TypedContractMethod<[], [bigint], "view">;

  getCurrentPrice: TypedContractMethod<[], [bigint], "view">;

  getIngotsAmountIn: TypedContractMethod<
    [tokensAmountOut: BigNumberish],
    [bigint],
    "view"
  >;

  getTokensAmountOut: TypedContractMethod<
    [ingotsAmountIn: BigNumberish],
    [bigint],
    "view"
  >;

  init: TypedContractMethod<[worldAddress: AddressLike], [void], "nonpayable">;

  investIntoPrizePool: TypedContractMethod<
    [amountToInvest: BigNumberish],
    [void],
    "payable"
  >;

  lastSyncedTokenBalance: TypedContractMethod<[], [bigint], "view">;

  swapIngotsForTokens: TypedContractMethod<
    [
      resourcesOwner: AddressLike,
      ingotsAmount: BigNumberish,
      minTokensToReceive: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  toBeRepaidTokenAmount: TypedContractMethod<[], [bigint], "view">;

  withdrawRepayment: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "defaultTokenPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIngotsAmountIn"
  ): TypedContractMethod<[tokensAmountOut: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokensAmountOut"
  ): TypedContractMethod<[ingotsAmountIn: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[worldAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "investIntoPrizePool"
  ): TypedContractMethod<[amountToInvest: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "lastSyncedTokenBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapIngotsForTokens"
  ): TypedContractMethod<
    [
      resourcesOwner: AddressLike,
      ingotsAmount: BigNumberish,
      minTokensToReceive: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toBeRepaidTokenAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawRepayment"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EthBalanceUpdated"
  ): TypedContractEvent<
    EthBalanceUpdatedEvent.InputTuple,
    EthBalanceUpdatedEvent.OutputTuple,
    EthBalanceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LastSyncedTokenBalanceUpdated"
  ): TypedContractEvent<
    LastSyncedTokenBalanceUpdatedEvent.InputTuple,
    LastSyncedTokenBalanceUpdatedEvent.OutputTuple,
    LastSyncedTokenBalanceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ToBeRepaidTokenAmountUpdated"
  ): TypedContractEvent<
    ToBeRepaidTokenAmountUpdatedEvent.InputTuple,
    ToBeRepaidTokenAmountUpdatedEvent.OutputTuple,
    ToBeRepaidTokenAmountUpdatedEvent.OutputObject
  >;

  filters: {
    "EthBalanceUpdated(uint256)": TypedContractEvent<
      EthBalanceUpdatedEvent.InputTuple,
      EthBalanceUpdatedEvent.OutputTuple,
      EthBalanceUpdatedEvent.OutputObject
    >;
    EthBalanceUpdated: TypedContractEvent<
      EthBalanceUpdatedEvent.InputTuple,
      EthBalanceUpdatedEvent.OutputTuple,
      EthBalanceUpdatedEvent.OutputObject
    >;

    "LastSyncedTokenBalanceUpdated(uint256)": TypedContractEvent<
      LastSyncedTokenBalanceUpdatedEvent.InputTuple,
      LastSyncedTokenBalanceUpdatedEvent.OutputTuple,
      LastSyncedTokenBalanceUpdatedEvent.OutputObject
    >;
    LastSyncedTokenBalanceUpdated: TypedContractEvent<
      LastSyncedTokenBalanceUpdatedEvent.InputTuple,
      LastSyncedTokenBalanceUpdatedEvent.OutputTuple,
      LastSyncedTokenBalanceUpdatedEvent.OutputObject
    >;

    "ToBeRepaidTokenAmountUpdated(uint256)": TypedContractEvent<
      ToBeRepaidTokenAmountUpdatedEvent.InputTuple,
      ToBeRepaidTokenAmountUpdatedEvent.OutputTuple,
      ToBeRepaidTokenAmountUpdatedEvent.OutputObject
    >;
    ToBeRepaidTokenAmountUpdated: TypedContractEvent<
      ToBeRepaidTokenAmountUpdatedEvent.InputTuple,
      ToBeRepaidTokenAmountUpdatedEvent.OutputTuple,
      ToBeRepaidTokenAmountUpdatedEvent.OutputObject
    >;
  };
}
