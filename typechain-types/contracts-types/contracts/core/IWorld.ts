/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IWorldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addWorldAsset"
      | "bannerContract"
      | "crossErasMemory"
      | "currentEraNumber"
      | "destroyCurrentEra"
      | "distributions"
      | "eras"
      | "erc20ForRegionInclusion"
      | "erc20ForSettlementPurchase"
      | "gameBeginTime"
      | "gameEndTime"
      | "geography"
      | "getRegionRadius"
      | "getRegionSeed"
      | "getRegionTierSeed"
      | "getTileBonusesSeed"
      | "implementations"
      | "init"
      | "mintResources"
      | "mintUnits"
      | "mintWorkers"
      | "regionOwnershipToken"
      | "registry"
      | "rewardPool"
      | "setGameBeginTime"
      | "setGameEndTime"
      | "setImplementations"
      | "worldAssets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CurrentEraNumberUpdated"
      | "EraCreated"
      | "GameBeginTimeUpdated"
      | "GameEndTimeUpdated"
      | "WorldInitialized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addWorldAsset",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bannerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crossErasMemory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEraNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destroyCurrentEra",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eras", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "erc20ForRegionInclusion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20ForSettlementPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameBeginTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "geography", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRegionRadius",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegionSeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegionTierSeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTileBonusesSeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [BytesLike, BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintResources",
    values: [BigNumberish, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintUnits",
    values: [BigNumberish, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWorkers",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "regionOwnershipToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGameBeginTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementations",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "worldAssets",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWorldAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bannerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossErasMemory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEraNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyCurrentEra",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eras", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20ForRegionInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20ForSettlementPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameBeginTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "geography", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegionRadius",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegionSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegionTierSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTileBonusesSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintUnits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regionOwnershipToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGameBeginTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldAssets",
    data: BytesLike
  ): Result;
}

export namespace CurrentEraNumberUpdatedEvent {
  export type InputTuple = [newEraNumber: BigNumberish];
  export type OutputTuple = [newEraNumber: bigint];
  export interface OutputObject {
    newEraNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EraCreatedEvent {
  export type InputTuple = [
    newEraAddress: AddressLike,
    newEraNumber: BigNumberish
  ];
  export type OutputTuple = [newEraAddress: string, newEraNumber: bigint];
  export interface OutputObject {
    newEraAddress: string;
    newEraNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameBeginTimeUpdatedEvent {
  export type InputTuple = [newBeginTime: BigNumberish];
  export type OutputTuple = [newBeginTime: bigint];
  export interface OutputObject {
    newBeginTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndTimeUpdatedEvent {
  export type InputTuple = [newEndTime: BigNumberish];
  export type OutputTuple = [newEndTime: bigint];
  export interface OutputObject {
    newEndTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorldInitializedEvent {
  export type InputTuple = [
    registryAddress: AddressLike,
    crossErasMemoryAddress: AddressLike,
    geographyAddress: AddressLike,
    bannersAddress: AddressLike,
    erc20ForBuyingSettlementAddress: AddressLike,
    erc20ForRegionInclusionAddress: AddressLike,
    regionOwnershipTokenAddress: AddressLike,
    distributionsAddress: AddressLike,
    rewardPoolAddress: AddressLike
  ];
  export type OutputTuple = [
    registryAddress: string,
    crossErasMemoryAddress: string,
    geographyAddress: string,
    bannersAddress: string,
    erc20ForBuyingSettlementAddress: string,
    erc20ForRegionInclusionAddress: string,
    regionOwnershipTokenAddress: string,
    distributionsAddress: string,
    rewardPoolAddress: string
  ];
  export interface OutputObject {
    registryAddress: string;
    crossErasMemoryAddress: string;
    geographyAddress: string;
    bannersAddress: string;
    erc20ForBuyingSettlementAddress: string;
    erc20ForRegionInclusionAddress: string;
    regionOwnershipTokenAddress: string;
    distributionsAddress: string;
    rewardPoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWorld extends BaseContract {
  connect(runner?: ContractRunner | null): IWorld;
  waitForDeployment(): Promise<this>;

  interface: IWorldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addWorldAsset: TypedContractMethod<
    [
      eraNumber: BigNumberish,
      worldAssetAddress: AddressLike,
      assetType: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  bannerContract: TypedContractMethod<[], [string], "view">;

  crossErasMemory: TypedContractMethod<[], [string], "view">;

  currentEraNumber: TypedContractMethod<[], [bigint], "view">;

  destroyCurrentEra: TypedContractMethod<[], [void], "nonpayable">;

  distributions: TypedContractMethod<[], [string], "view">;

  eras: TypedContractMethod<[eraNumber: BigNumberish], [string], "view">;

  erc20ForRegionInclusion: TypedContractMethod<[], [string], "view">;

  erc20ForSettlementPurchase: TypedContractMethod<[], [string], "view">;

  gameBeginTime: TypedContractMethod<[], [bigint], "view">;

  gameEndTime: TypedContractMethod<[], [bigint], "view">;

  geography: TypedContractMethod<[], [string], "view">;

  getRegionRadius: TypedContractMethod<[], [bigint], "view">;

  getRegionSeed: TypedContractMethod<[], [string], "view">;

  getRegionTierSeed: TypedContractMethod<[], [string], "view">;

  getTileBonusesSeed: TypedContractMethod<[], [string], "view">;

  implementations: TypedContractMethod<[assetId: BytesLike], [string], "view">;

  init: TypedContractMethod<
    [
      packedAddresses: BytesLike,
      assetIds: BytesLike[],
      implementationAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  mintResources: TypedContractMethod<
    [
      eraNumber: BigNumberish,
      resourceTypeId: BytesLike,
      to: AddressLike,
      value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mintUnits: TypedContractMethod<
    [
      eraNumber: BigNumberish,
      unitTypeId: BytesLike,
      to: AddressLike,
      value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mintWorkers: TypedContractMethod<
    [eraNumber: BigNumberish, to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  regionOwnershipToken: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  rewardPool: TypedContractMethod<[], [string], "view">;

  setGameBeginTime: TypedContractMethod<
    [gameBeginTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGameEndTime: TypedContractMethod<
    [gameEndTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  setImplementations: TypedContractMethod<
    [assetIds: BytesLike[], implementationAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  worldAssets: TypedContractMethod<
    [eraNumber: BigNumberish, worldAsset: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addWorldAsset"
  ): TypedContractMethod<
    [
      eraNumber: BigNumberish,
      worldAssetAddress: AddressLike,
      assetType: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bannerContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "crossErasMemory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentEraNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "destroyCurrentEra"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributions"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eras"
  ): TypedContractMethod<[eraNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "erc20ForRegionInclusion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20ForSettlementPurchase"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameBeginTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "geography"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRegionRadius"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRegionSeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRegionTierSeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTileBonusesSeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "implementations"
  ): TypedContractMethod<[assetId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [
      packedAddresses: BytesLike,
      assetIds: BytesLike[],
      implementationAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintResources"
  ): TypedContractMethod<
    [
      eraNumber: BigNumberish,
      resourceTypeId: BytesLike,
      to: AddressLike,
      value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintUnits"
  ): TypedContractMethod<
    [
      eraNumber: BigNumberish,
      unitTypeId: BytesLike,
      to: AddressLike,
      value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWorkers"
  ): TypedContractMethod<
    [eraNumber: BigNumberish, to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "regionOwnershipToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setGameBeginTime"
  ): TypedContractMethod<[gameBeginTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGameEndTime"
  ): TypedContractMethod<[gameEndTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setImplementations"
  ): TypedContractMethod<
    [assetIds: BytesLike[], implementationAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "worldAssets"
  ): TypedContractMethod<
    [eraNumber: BigNumberish, worldAsset: AddressLike],
    [string],
    "view"
  >;

  getEvent(
    key: "CurrentEraNumberUpdated"
  ): TypedContractEvent<
    CurrentEraNumberUpdatedEvent.InputTuple,
    CurrentEraNumberUpdatedEvent.OutputTuple,
    CurrentEraNumberUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EraCreated"
  ): TypedContractEvent<
    EraCreatedEvent.InputTuple,
    EraCreatedEvent.OutputTuple,
    EraCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameBeginTimeUpdated"
  ): TypedContractEvent<
    GameBeginTimeUpdatedEvent.InputTuple,
    GameBeginTimeUpdatedEvent.OutputTuple,
    GameBeginTimeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GameEndTimeUpdated"
  ): TypedContractEvent<
    GameEndTimeUpdatedEvent.InputTuple,
    GameEndTimeUpdatedEvent.OutputTuple,
    GameEndTimeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WorldInitialized"
  ): TypedContractEvent<
    WorldInitializedEvent.InputTuple,
    WorldInitializedEvent.OutputTuple,
    WorldInitializedEvent.OutputObject
  >;

  filters: {
    "CurrentEraNumberUpdated(uint256)": TypedContractEvent<
      CurrentEraNumberUpdatedEvent.InputTuple,
      CurrentEraNumberUpdatedEvent.OutputTuple,
      CurrentEraNumberUpdatedEvent.OutputObject
    >;
    CurrentEraNumberUpdated: TypedContractEvent<
      CurrentEraNumberUpdatedEvent.InputTuple,
      CurrentEraNumberUpdatedEvent.OutputTuple,
      CurrentEraNumberUpdatedEvent.OutputObject
    >;

    "EraCreated(address,uint256)": TypedContractEvent<
      EraCreatedEvent.InputTuple,
      EraCreatedEvent.OutputTuple,
      EraCreatedEvent.OutputObject
    >;
    EraCreated: TypedContractEvent<
      EraCreatedEvent.InputTuple,
      EraCreatedEvent.OutputTuple,
      EraCreatedEvent.OutputObject
    >;

    "GameBeginTimeUpdated(uint256)": TypedContractEvent<
      GameBeginTimeUpdatedEvent.InputTuple,
      GameBeginTimeUpdatedEvent.OutputTuple,
      GameBeginTimeUpdatedEvent.OutputObject
    >;
    GameBeginTimeUpdated: TypedContractEvent<
      GameBeginTimeUpdatedEvent.InputTuple,
      GameBeginTimeUpdatedEvent.OutputTuple,
      GameBeginTimeUpdatedEvent.OutputObject
    >;

    "GameEndTimeUpdated(uint256)": TypedContractEvent<
      GameEndTimeUpdatedEvent.InputTuple,
      GameEndTimeUpdatedEvent.OutputTuple,
      GameEndTimeUpdatedEvent.OutputObject
    >;
    GameEndTimeUpdated: TypedContractEvent<
      GameEndTimeUpdatedEvent.InputTuple,
      GameEndTimeUpdatedEvent.OutputTuple,
      GameEndTimeUpdatedEvent.OutputObject
    >;

    "WorldInitialized(address,address,address,address,address,address,address,address,address)": TypedContractEvent<
      WorldInitializedEvent.InputTuple,
      WorldInitializedEvent.OutputTuple,
      WorldInitializedEvent.OutputObject
    >;
    WorldInitialized: TypedContractEvent<
      WorldInitializedEvent.InputTuple,
      WorldInitializedEvent.OutputTuple,
      WorldInitializedEvent.OutputObject
    >;
  };
}
