/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ArmyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "additionalUnitsBattleMultipliers"
      | "applySelfStun"
      | "assetGroupId"
      | "assetTypeId"
      | "battle"
      | "beginBattle"
      | "beginOpenManeuver"
      | "beginSecretManeuver"
      | "burnUnits"
      | "cancelSecretManeuver"
      | "currentPosition"
      | "decreaseUnitBattleMultiplier"
      | "demilitarize"
      | "era"
      | "eraNumber"
      | "getCurrentPosition"
      | "getOwner"
      | "getTotalSiegeSupport"
      | "increaseUnitBattleMultiplier"
      | "init"
      | "isAtHomePosition"
      | "isManeuvering"
      | "joinBattle"
      | "lastDemilitarizationTime"
      | "liquidateUnits"
      | "maneuverInfo"
      | "modifySiege"
      | "registry"
      | "relatedSettlement"
      | "revealSecretManeuver"
      | "stunInfo"
      | "swapRobberyPointsForResourceFromBuildingTreasury"
      | "updateState"
      | "world"
      | "worldAssetFactory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BattleCreated"
      | "ExitedFromBattle"
      | "Initialized"
      | "JoinedBattle"
      | "ManeuveringBegan"
      | "SecretManeuverCancelled"
      | "StunApplied"
      | "UnitsDemilitarized"
      | "UpdatedPosition"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "additionalUnitsBattleMultipliers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "applySelfStun",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetGroupId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetTypeId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "battle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beginBattle",
    values: [AddressLike, BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beginOpenManeuver",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beginSecretManeuver",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnUnits",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSecretManeuver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseUnitBattleMultiplier",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "demilitarize",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "era", values?: undefined): string;
  encodeFunctionData(functionFragment: "eraNumber", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentPosition",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalSiegeSupport",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseUnitBattleMultiplier",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isAtHomePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isManeuvering",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinBattle",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDemilitarizationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateUnits",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "maneuverInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifySiege",
    values: [BytesLike[], boolean[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relatedSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealSecretManeuver",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stunInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRobberyPointsForResourceFromBuildingTreasury",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "world", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "worldAssetFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "additionalUnitsBattleMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applySelfStun",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTypeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "battle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beginBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginOpenManeuver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginSecretManeuver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnUnits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSecretManeuver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseUnitBattleMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "demilitarize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "era", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eraNumber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSiegeSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseUnitBattleMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAtHomePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isManeuvering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDemilitarizationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maneuverInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifySiege",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relatedSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealSecretManeuver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stunInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapRobberyPointsForResourceFromBuildingTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "world", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "worldAssetFactory",
    data: BytesLike
  ): Result;
}

export namespace BattleCreatedEvent {
  export type InputTuple = [
    battleAddress: AddressLike,
    targetArmyAddress: AddressLike
  ];
  export type OutputTuple = [battleAddress: string, targetArmyAddress: string];
  export interface OutputObject {
    battleAddress: string;
    targetArmyAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitedFromBattleEvent {
  export type InputTuple = [battleAddress: AddressLike];
  export type OutputTuple = [battleAddress: string];
  export interface OutputObject {
    battleAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JoinedBattleEvent {
  export type InputTuple = [battleAddress: AddressLike, side: BigNumberish];
  export type OutputTuple = [battleAddress: string, side: bigint];
  export interface OutputObject {
    battleAddress: string;
    side: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManeuveringBeganEvent {
  export type InputTuple = [
    position: BigNumberish,
    secretDestinationRegionId: BigNumberish,
    secretDestinationPosition: BytesLike,
    beginTime: BigNumberish,
    endTime: BigNumberish,
    tokensToSpendOnAcceleration: BigNumberish
  ];
  export type OutputTuple = [
    position: bigint,
    secretDestinationRegionId: bigint,
    secretDestinationPosition: string,
    beginTime: bigint,
    endTime: bigint,
    tokensToSpendOnAcceleration: bigint
  ];
  export interface OutputObject {
    position: bigint;
    secretDestinationRegionId: bigint;
    secretDestinationPosition: string;
    beginTime: bigint;
    endTime: bigint;
    tokensToSpendOnAcceleration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretManeuverCancelledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StunAppliedEvent {
  export type InputTuple = [
    stunBeginTime: BigNumberish,
    stunEndTime: BigNumberish
  ];
  export type OutputTuple = [stunBeginTime: bigint, stunEndTime: bigint];
  export interface OutputObject {
    stunBeginTime: bigint;
    stunEndTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnitsDemilitarizedEvent {
  export type InputTuple = [
    unitTypeIds: BytesLike[],
    unitsAmounts: BigNumberish[]
  ];
  export type OutputTuple = [unitTypeIds: string[], unitsAmounts: bigint[]];
  export interface OutputObject {
    unitTypeIds: string[];
    unitsAmounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedPositionEvent {
  export type InputTuple = [
    settlementAddress: AddressLike,
    position: BigNumberish
  ];
  export type OutputTuple = [settlementAddress: string, position: bigint];
  export interface OutputObject {
    settlementAddress: string;
    position: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Army extends BaseContract {
  connect(runner?: ContractRunner | null): Army;
  waitForDeployment(): Promise<this>;

  interface: ArmyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  additionalUnitsBattleMultipliers: TypedContractMethod<
    [arg0: BytesLike],
    [bigint],
    "view"
  >;

  applySelfStun: TypedContractMethod<
    [stunDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  assetGroupId: TypedContractMethod<[], [string], "view">;

  assetTypeId: TypedContractMethod<[], [string], "view">;

  battle: TypedContractMethod<[], [string], "view">;

  beginBattle: TypedContractMethod<
    [
      targetArmyAddress: AddressLike,
      maxUnitTypeIdsToAttack: BytesLike[],
      maxUnitsToAttack: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  beginOpenManeuver: TypedContractMethod<
    [position: BigNumberish, foodToSpendOnAcceleration: BigNumberish],
    [void],
    "nonpayable"
  >;

  beginSecretManeuver: TypedContractMethod<
    [
      secretDestinationRegionId: BigNumberish,
      secretDestinationPosition: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  burnUnits: TypedContractMethod<
    [unitTypeIds: BytesLike[], unitsAmounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  cancelSecretManeuver: TypedContractMethod<[], [void], "nonpayable">;

  currentPosition: TypedContractMethod<[], [bigint], "view">;

  decreaseUnitBattleMultiplier: TypedContractMethod<
    [unitTypeId: BytesLike, unitBattleMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  demilitarize: TypedContractMethod<
    [unitTypeIds: BytesLike[], unitsAmounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  era: TypedContractMethod<[], [string], "view">;

  eraNumber: TypedContractMethod<[], [bigint], "view">;

  getCurrentPosition: TypedContractMethod<[], [bigint], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getTotalSiegeSupport: TypedContractMethod<[], [bigint], "view">;

  increaseUnitBattleMultiplier: TypedContractMethod<
    [unitTypeId: BytesLike, unitBattleMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  init: TypedContractMethod<[initParams: BytesLike], [void], "nonpayable">;

  isAtHomePosition: TypedContractMethod<[], [boolean], "view">;

  isManeuvering: TypedContractMethod<[], [boolean], "view">;

  joinBattle: TypedContractMethod<
    [battleAddress: AddressLike, side: BigNumberish],
    [void],
    "nonpayable"
  >;

  lastDemilitarizationTime: TypedContractMethod<[], [bigint], "view">;

  liquidateUnits: TypedContractMethod<
    [unitTypeIds: BytesLike[], unitsAmounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  maneuverInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, string] & {
        beginTime: bigint;
        endTime: bigint;
        destinationPosition: bigint;
        secretDestinationRegionId: bigint;
        secretDestinationPosition: string;
      }
    ],
    "view"
  >;

  modifySiege: TypedContractMethod<
    [
      unitTypeIds: BytesLike[],
      toAddIndication: boolean[],
      unitsAmounts: BigNumberish[],
      newRobberyMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  relatedSettlement: TypedContractMethod<[], [string], "view">;

  revealSecretManeuver: TypedContractMethod<
    [
      destinationPosition: BigNumberish,
      revealKey: BytesLike,
      woodToSpendOnAcceleration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  stunInfo: TypedContractMethod<
    [],
    [[bigint, bigint] & { beginTime: bigint; endTime: bigint }],
    "view"
  >;

  swapRobberyPointsForResourceFromBuildingTreasury: TypedContractMethod<
    [buildingAddress: AddressLike, pointsToSpend: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateState: TypedContractMethod<[], [void], "nonpayable">;

  world: TypedContractMethod<[], [string], "view">;

  worldAssetFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "additionalUnitsBattleMultipliers"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "applySelfStun"
  ): TypedContractMethod<[stunDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assetGroupId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetTypeId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "battle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "beginBattle"
  ): TypedContractMethod<
    [
      targetArmyAddress: AddressLike,
      maxUnitTypeIdsToAttack: BytesLike[],
      maxUnitsToAttack: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beginOpenManeuver"
  ): TypedContractMethod<
    [position: BigNumberish, foodToSpendOnAcceleration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beginSecretManeuver"
  ): TypedContractMethod<
    [
      secretDestinationRegionId: BigNumberish,
      secretDestinationPosition: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnUnits"
  ): TypedContractMethod<
    [unitTypeIds: BytesLike[], unitsAmounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelSecretManeuver"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentPosition"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseUnitBattleMultiplier"
  ): TypedContractMethod<
    [unitTypeId: BytesLike, unitBattleMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "demilitarize"
  ): TypedContractMethod<
    [unitTypeIds: BytesLike[], unitsAmounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "era"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eraNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentPosition"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalSiegeSupport"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseUnitBattleMultiplier"
  ): TypedContractMethod<
    [unitTypeId: BytesLike, unitBattleMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[initParams: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAtHomePosition"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isManeuvering"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinBattle"
  ): TypedContractMethod<
    [battleAddress: AddressLike, side: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastDemilitarizationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidateUnits"
  ): TypedContractMethod<
    [unitTypeIds: BytesLike[], unitsAmounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maneuverInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, string] & {
        beginTime: bigint;
        endTime: bigint;
        destinationPosition: bigint;
        secretDestinationRegionId: bigint;
        secretDestinationPosition: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "modifySiege"
  ): TypedContractMethod<
    [
      unitTypeIds: BytesLike[],
      toAddIndication: boolean[],
      unitsAmounts: BigNumberish[],
      newRobberyMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relatedSettlement"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revealSecretManeuver"
  ): TypedContractMethod<
    [
      destinationPosition: BigNumberish,
      revealKey: BytesLike,
      woodToSpendOnAcceleration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stunInfo"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { beginTime: bigint; endTime: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapRobberyPointsForResourceFromBuildingTreasury"
  ): TypedContractMethod<
    [buildingAddress: AddressLike, pointsToSpend: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateState"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "world"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "worldAssetFactory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BattleCreated"
  ): TypedContractEvent<
    BattleCreatedEvent.InputTuple,
    BattleCreatedEvent.OutputTuple,
    BattleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ExitedFromBattle"
  ): TypedContractEvent<
    ExitedFromBattleEvent.InputTuple,
    ExitedFromBattleEvent.OutputTuple,
    ExitedFromBattleEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "JoinedBattle"
  ): TypedContractEvent<
    JoinedBattleEvent.InputTuple,
    JoinedBattleEvent.OutputTuple,
    JoinedBattleEvent.OutputObject
  >;
  getEvent(
    key: "ManeuveringBegan"
  ): TypedContractEvent<
    ManeuveringBeganEvent.InputTuple,
    ManeuveringBeganEvent.OutputTuple,
    ManeuveringBeganEvent.OutputObject
  >;
  getEvent(
    key: "SecretManeuverCancelled"
  ): TypedContractEvent<
    SecretManeuverCancelledEvent.InputTuple,
    SecretManeuverCancelledEvent.OutputTuple,
    SecretManeuverCancelledEvent.OutputObject
  >;
  getEvent(
    key: "StunApplied"
  ): TypedContractEvent<
    StunAppliedEvent.InputTuple,
    StunAppliedEvent.OutputTuple,
    StunAppliedEvent.OutputObject
  >;
  getEvent(
    key: "UnitsDemilitarized"
  ): TypedContractEvent<
    UnitsDemilitarizedEvent.InputTuple,
    UnitsDemilitarizedEvent.OutputTuple,
    UnitsDemilitarizedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedPosition"
  ): TypedContractEvent<
    UpdatedPositionEvent.InputTuple,
    UpdatedPositionEvent.OutputTuple,
    UpdatedPositionEvent.OutputObject
  >;

  filters: {
    "BattleCreated(address,address)": TypedContractEvent<
      BattleCreatedEvent.InputTuple,
      BattleCreatedEvent.OutputTuple,
      BattleCreatedEvent.OutputObject
    >;
    BattleCreated: TypedContractEvent<
      BattleCreatedEvent.InputTuple,
      BattleCreatedEvent.OutputTuple,
      BattleCreatedEvent.OutputObject
    >;

    "ExitedFromBattle(address)": TypedContractEvent<
      ExitedFromBattleEvent.InputTuple,
      ExitedFromBattleEvent.OutputTuple,
      ExitedFromBattleEvent.OutputObject
    >;
    ExitedFromBattle: TypedContractEvent<
      ExitedFromBattleEvent.InputTuple,
      ExitedFromBattleEvent.OutputTuple,
      ExitedFromBattleEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "JoinedBattle(address,uint256)": TypedContractEvent<
      JoinedBattleEvent.InputTuple,
      JoinedBattleEvent.OutputTuple,
      JoinedBattleEvent.OutputObject
    >;
    JoinedBattle: TypedContractEvent<
      JoinedBattleEvent.InputTuple,
      JoinedBattleEvent.OutputTuple,
      JoinedBattleEvent.OutputObject
    >;

    "ManeuveringBegan(uint64,uint64,bytes32,uint256,uint256,uint256)": TypedContractEvent<
      ManeuveringBeganEvent.InputTuple,
      ManeuveringBeganEvent.OutputTuple,
      ManeuveringBeganEvent.OutputObject
    >;
    ManeuveringBegan: TypedContractEvent<
      ManeuveringBeganEvent.InputTuple,
      ManeuveringBeganEvent.OutputTuple,
      ManeuveringBeganEvent.OutputObject
    >;

    "SecretManeuverCancelled()": TypedContractEvent<
      SecretManeuverCancelledEvent.InputTuple,
      SecretManeuverCancelledEvent.OutputTuple,
      SecretManeuverCancelledEvent.OutputObject
    >;
    SecretManeuverCancelled: TypedContractEvent<
      SecretManeuverCancelledEvent.InputTuple,
      SecretManeuverCancelledEvent.OutputTuple,
      SecretManeuverCancelledEvent.OutputObject
    >;

    "StunApplied(uint64,uint64)": TypedContractEvent<
      StunAppliedEvent.InputTuple,
      StunAppliedEvent.OutputTuple,
      StunAppliedEvent.OutputObject
    >;
    StunApplied: TypedContractEvent<
      StunAppliedEvent.InputTuple,
      StunAppliedEvent.OutputTuple,
      StunAppliedEvent.OutputObject
    >;

    "UnitsDemilitarized(bytes32[],uint256[])": TypedContractEvent<
      UnitsDemilitarizedEvent.InputTuple,
      UnitsDemilitarizedEvent.OutputTuple,
      UnitsDemilitarizedEvent.OutputObject
    >;
    UnitsDemilitarized: TypedContractEvent<
      UnitsDemilitarizedEvent.InputTuple,
      UnitsDemilitarizedEvent.OutputTuple,
      UnitsDemilitarizedEvent.OutputObject
    >;

    "UpdatedPosition(address,uint64)": TypedContractEvent<
      UpdatedPositionEvent.InputTuple,
      UpdatedPositionEvent.OutputTuple,
      UpdatedPositionEvent.OutputObject
    >;
    UpdatedPosition: TypedContractEvent<
      UpdatedPositionEvent.InputTuple,
      UpdatedPositionEvent.OutputTuple,
      UpdatedPositionEvent.OutputObject
    >;
  };
}
