/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IRegionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyUnitsBatch"
      | "corruptionIndex"
      | "createCultistsSettlement"
      | "cultistsSettlement"
      | "decreaseCorruptionIndex"
      | "getPenaltyFromCultists"
      | "getRegionTime"
      | "handleCultistsDefeated"
      | "handleCultistsSummoned"
      | "increaseCorruptionIndex"
      | "lastCultistsSummonIntervalNumber"
      | "lastUpdateRegionTime"
      | "lastUpdateTime"
      | "regionId"
      | "settlementsMarket"
      | "unitsPools"
      | "updateRegionTime"
      | "updateState"
      | "workersPool"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CorruptionIndexDecreased"
      | "CorruptionIndexIncreased"
      | "LastCultistsSummonIntervalNumberUpdated"
      | "RegionCultistsChanged"
      | "RegionTimeChanged"
      | "SettlementsMarketCreated"
      | "UnitsPoolCreated"
      | "WorkersPoolCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyUnitsBatch",
    values: [
      AddressLike,
      AddressLike,
      BytesLike[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "corruptionIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCultistsSettlement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cultistsSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseCorruptionIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPenaltyFromCultists",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegionTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleCultistsDefeated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleCultistsSummoned",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseCorruptionIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCultistsSummonIntervalNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateRegionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "regionId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settlementsMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unitsPools",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegionTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workersPool",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "buyUnitsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "corruptionIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCultistsSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cultistsSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseCorruptionIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPenaltyFromCultists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleCultistsDefeated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleCultistsSummoned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseCorruptionIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCultistsSummonIntervalNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateRegionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "regionId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlementsMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unitsPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRegionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workersPool",
    data: BytesLike
  ): Result;
}

export namespace CorruptionIndexDecreasedEvent {
  export type InputTuple = [
    settlementAddress: AddressLike,
    reducedCorruptionIndexAmount: BigNumberish
  ];
  export type OutputTuple = [
    settlementAddress: string,
    reducedCorruptionIndexAmount: bigint
  ];
  export interface OutputObject {
    settlementAddress: string;
    reducedCorruptionIndexAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CorruptionIndexIncreasedEvent {
  export type InputTuple = [
    settlementAddress: AddressLike,
    addedCorruptionIndexAmount: BigNumberish
  ];
  export type OutputTuple = [
    settlementAddress: string,
    addedCorruptionIndexAmount: bigint
  ];
  export interface OutputObject {
    settlementAddress: string;
    addedCorruptionIndexAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LastCultistsSummonIntervalNumberUpdatedEvent {
  export type InputTuple = [newCultistsSummonIntervalNumber: BigNumberish];
  export type OutputTuple = [newCultistsSummonIntervalNumber: bigint];
  export interface OutputObject {
    newCultistsSummonIntervalNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegionCultistsChangedEvent {
  export type InputTuple = [newRegionCultistsAmount: BigNumberish];
  export type OutputTuple = [newRegionCultistsAmount: bigint];
  export interface OutputObject {
    newRegionCultistsAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegionTimeChangedEvent {
  export type InputTuple = [
    lastUpdateTime: BigNumberish,
    lastUpdateRegionTime: BigNumberish
  ];
  export type OutputTuple = [
    lastUpdateTime: bigint,
    lastUpdateRegionTime: bigint
  ];
  export interface OutputObject {
    lastUpdateTime: bigint;
    lastUpdateRegionTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementsMarketCreatedEvent {
  export type InputTuple = [settlementsMarketAddress: AddressLike];
  export type OutputTuple = [settlementsMarketAddress: string];
  export interface OutputObject {
    settlementsMarketAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnitsPoolCreatedEvent {
  export type InputTuple = [
    unitsPoolAddress: AddressLike,
    unitTypeId: BytesLike
  ];
  export type OutputTuple = [unitsPoolAddress: string, unitTypeId: string];
  export interface OutputObject {
    unitsPoolAddress: string;
    unitTypeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkersPoolCreatedEvent {
  export type InputTuple = [workersPoolAddress: AddressLike];
  export type OutputTuple = [workersPoolAddress: string];
  export interface OutputObject {
    workersPoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRegion extends BaseContract {
  connect(runner?: ContractRunner | null): IRegion;
  waitForDeployment(): Promise<this>;

  interface: IRegionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyUnitsBatch: TypedContractMethod<
    [
      tokensOwner: AddressLike,
      settlementAddress: AddressLike,
      unitTypeIds: BytesLike[],
      unitsAmounts: BigNumberish[],
      maxTokensToSell: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  corruptionIndex: TypedContractMethod<[], [bigint], "view">;

  createCultistsSettlement: TypedContractMethod<
    [cultistsPosition: BigNumberish],
    [void],
    "nonpayable"
  >;

  cultistsSettlement: TypedContractMethod<[], [string], "view">;

  decreaseCorruptionIndex: TypedContractMethod<
    [settlementAddress: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPenaltyFromCultists: TypedContractMethod<[], [bigint], "view">;

  getRegionTime: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  handleCultistsDefeated: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  handleCultistsSummoned: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseCorruptionIndex: TypedContractMethod<
    [settlementAddress: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  lastCultistsSummonIntervalNumber: TypedContractMethod<[], [bigint], "view">;

  lastUpdateRegionTime: TypedContractMethod<[], [bigint], "view">;

  lastUpdateTime: TypedContractMethod<[], [bigint], "view">;

  regionId: TypedContractMethod<[], [bigint], "view">;

  settlementsMarket: TypedContractMethod<[], [string], "view">;

  unitsPools: TypedContractMethod<[unitTypeId: BytesLike], [string], "view">;

  updateRegionTime: TypedContractMethod<
    [globalTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateState: TypedContractMethod<[], [void], "nonpayable">;

  workersPool: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyUnitsBatch"
  ): TypedContractMethod<
    [
      tokensOwner: AddressLike,
      settlementAddress: AddressLike,
      unitTypeIds: BytesLike[],
      unitsAmounts: BigNumberish[],
      maxTokensToSell: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "corruptionIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createCultistsSettlement"
  ): TypedContractMethod<
    [cultistsPosition: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cultistsSettlement"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decreaseCorruptionIndex"
  ): TypedContractMethod<
    [settlementAddress: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPenaltyFromCultists"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRegionTime"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleCultistsDefeated"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "handleCultistsSummoned"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseCorruptionIndex"
  ): TypedContractMethod<
    [settlementAddress: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastCultistsSummonIntervalNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastUpdateRegionTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastUpdateTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "regionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "settlementsMarket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unitsPools"
  ): TypedContractMethod<[unitTypeId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "updateRegionTime"
  ): TypedContractMethod<[globalTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateState"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "workersPool"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CorruptionIndexDecreased"
  ): TypedContractEvent<
    CorruptionIndexDecreasedEvent.InputTuple,
    CorruptionIndexDecreasedEvent.OutputTuple,
    CorruptionIndexDecreasedEvent.OutputObject
  >;
  getEvent(
    key: "CorruptionIndexIncreased"
  ): TypedContractEvent<
    CorruptionIndexIncreasedEvent.InputTuple,
    CorruptionIndexIncreasedEvent.OutputTuple,
    CorruptionIndexIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "LastCultistsSummonIntervalNumberUpdated"
  ): TypedContractEvent<
    LastCultistsSummonIntervalNumberUpdatedEvent.InputTuple,
    LastCultistsSummonIntervalNumberUpdatedEvent.OutputTuple,
    LastCultistsSummonIntervalNumberUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RegionCultistsChanged"
  ): TypedContractEvent<
    RegionCultistsChangedEvent.InputTuple,
    RegionCultistsChangedEvent.OutputTuple,
    RegionCultistsChangedEvent.OutputObject
  >;
  getEvent(
    key: "RegionTimeChanged"
  ): TypedContractEvent<
    RegionTimeChangedEvent.InputTuple,
    RegionTimeChangedEvent.OutputTuple,
    RegionTimeChangedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementsMarketCreated"
  ): TypedContractEvent<
    SettlementsMarketCreatedEvent.InputTuple,
    SettlementsMarketCreatedEvent.OutputTuple,
    SettlementsMarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "UnitsPoolCreated"
  ): TypedContractEvent<
    UnitsPoolCreatedEvent.InputTuple,
    UnitsPoolCreatedEvent.OutputTuple,
    UnitsPoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "WorkersPoolCreated"
  ): TypedContractEvent<
    WorkersPoolCreatedEvent.InputTuple,
    WorkersPoolCreatedEvent.OutputTuple,
    WorkersPoolCreatedEvent.OutputObject
  >;

  filters: {
    "CorruptionIndexDecreased(address,uint256)": TypedContractEvent<
      CorruptionIndexDecreasedEvent.InputTuple,
      CorruptionIndexDecreasedEvent.OutputTuple,
      CorruptionIndexDecreasedEvent.OutputObject
    >;
    CorruptionIndexDecreased: TypedContractEvent<
      CorruptionIndexDecreasedEvent.InputTuple,
      CorruptionIndexDecreasedEvent.OutputTuple,
      CorruptionIndexDecreasedEvent.OutputObject
    >;

    "CorruptionIndexIncreased(address,uint256)": TypedContractEvent<
      CorruptionIndexIncreasedEvent.InputTuple,
      CorruptionIndexIncreasedEvent.OutputTuple,
      CorruptionIndexIncreasedEvent.OutputObject
    >;
    CorruptionIndexIncreased: TypedContractEvent<
      CorruptionIndexIncreasedEvent.InputTuple,
      CorruptionIndexIncreasedEvent.OutputTuple,
      CorruptionIndexIncreasedEvent.OutputObject
    >;

    "LastCultistsSummonIntervalNumberUpdated(uint256)": TypedContractEvent<
      LastCultistsSummonIntervalNumberUpdatedEvent.InputTuple,
      LastCultistsSummonIntervalNumberUpdatedEvent.OutputTuple,
      LastCultistsSummonIntervalNumberUpdatedEvent.OutputObject
    >;
    LastCultistsSummonIntervalNumberUpdated: TypedContractEvent<
      LastCultistsSummonIntervalNumberUpdatedEvent.InputTuple,
      LastCultistsSummonIntervalNumberUpdatedEvent.OutputTuple,
      LastCultistsSummonIntervalNumberUpdatedEvent.OutputObject
    >;

    "RegionCultistsChanged(uint256)": TypedContractEvent<
      RegionCultistsChangedEvent.InputTuple,
      RegionCultistsChangedEvent.OutputTuple,
      RegionCultistsChangedEvent.OutputObject
    >;
    RegionCultistsChanged: TypedContractEvent<
      RegionCultistsChangedEvent.InputTuple,
      RegionCultistsChangedEvent.OutputTuple,
      RegionCultistsChangedEvent.OutputObject
    >;

    "RegionTimeChanged(uint256,uint256)": TypedContractEvent<
      RegionTimeChangedEvent.InputTuple,
      RegionTimeChangedEvent.OutputTuple,
      RegionTimeChangedEvent.OutputObject
    >;
    RegionTimeChanged: TypedContractEvent<
      RegionTimeChangedEvent.InputTuple,
      RegionTimeChangedEvent.OutputTuple,
      RegionTimeChangedEvent.OutputObject
    >;

    "SettlementsMarketCreated(address)": TypedContractEvent<
      SettlementsMarketCreatedEvent.InputTuple,
      SettlementsMarketCreatedEvent.OutputTuple,
      SettlementsMarketCreatedEvent.OutputObject
    >;
    SettlementsMarketCreated: TypedContractEvent<
      SettlementsMarketCreatedEvent.InputTuple,
      SettlementsMarketCreatedEvent.OutputTuple,
      SettlementsMarketCreatedEvent.OutputObject
    >;

    "UnitsPoolCreated(address,bytes32)": TypedContractEvent<
      UnitsPoolCreatedEvent.InputTuple,
      UnitsPoolCreatedEvent.OutputTuple,
      UnitsPoolCreatedEvent.OutputObject
    >;
    UnitsPoolCreated: TypedContractEvent<
      UnitsPoolCreatedEvent.InputTuple,
      UnitsPoolCreatedEvent.OutputTuple,
      UnitsPoolCreatedEvent.OutputObject
    >;

    "WorkersPoolCreated(address)": TypedContractEvent<
      WorkersPoolCreatedEvent.InputTuple,
      WorkersPoolCreatedEvent.OutputTuple,
      WorkersPoolCreatedEvent.OutputObject
    >;
    WorkersPoolCreated: TypedContractEvent<
      WorkersPoolCreatedEvent.InputTuple,
      WorkersPoolCreatedEvent.OutputTuple,
      WorkersPoolCreatedEvent.OutputObject
    >;
  };
}
