/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface SiegeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "applyDamage"
      | "armyInfo"
      | "assetGroupId"
      | "assetTypeId"
      | "besiegingArmyUnitsByType"
      | "calculateArmyTotalSiegePower"
      | "calculateArmyUnitsSiegePower"
      | "canLiquidateArmyBesiegingUnits"
      | "era"
      | "eraNumber"
      | "getArmyBesiegingUnitsAmounts"
      | "getArmyRobberyPoints"
      | "init"
      | "liquidate"
      | "modifyArmySiege"
      | "registry"
      | "relatedSettlement"
      | "robberyPointsPerOneDamage"
      | "swapRobberyPointsForResourceFromBuildingTreasury"
      | "totalSiegePower"
      | "world"
      | "worldAssetFactory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArmyLiquidated"
      | "ArmySiegeModified"
      | "BuildingRobbed"
      | "Initialized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "applyDamage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "armyInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetGroupId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetTypeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "besiegingArmyUnitsByType",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateArmyTotalSiegePower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateArmyUnitsSiegePower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canLiquidateArmyBesiegingUnits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "era", values?: undefined): string;
  encodeFunctionData(functionFragment: "eraNumber", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getArmyBesiegingUnitsAmounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getArmyRobberyPoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyArmySiege",
    values: [AddressLike, BytesLike[], boolean[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relatedSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "robberyPointsPerOneDamage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRobberyPointsForResourceFromBuildingTreasury",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSiegePower",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "world", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "worldAssetFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "applyDamage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "armyInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTypeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "besiegingArmyUnitsByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateArmyTotalSiegePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateArmyUnitsSiegePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canLiquidateArmyBesiegingUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "era", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eraNumber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getArmyBesiegingUnitsAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArmyRobberyPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyArmySiege",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relatedSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robberyPointsPerOneDamage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapRobberyPointsForResourceFromBuildingTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSiegePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "world", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "worldAssetFactory",
    data: BytesLike
  ): Result;
}

export namespace ArmyLiquidatedEvent {
  export type InputTuple = [armyAddress: AddressLike];
  export type OutputTuple = [armyAddress: string];
  export interface OutputObject {
    armyAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArmySiegeModifiedEvent {
  export type InputTuple = [
    armyAddress: AddressLike,
    unitTypeIds: BytesLike[],
    toAddIndication: boolean[],
    unitsAmounts: BigNumberish[],
    newRobberyMultiplier: BigNumberish,
    newTotalSiegePower: BigNumberish
  ];
  export type OutputTuple = [
    armyAddress: string,
    unitTypeIds: string[],
    toAddIndication: boolean[],
    unitsAmounts: bigint[],
    newRobberyMultiplier: bigint,
    newTotalSiegePower: bigint
  ];
  export interface OutputObject {
    armyAddress: string;
    unitTypeIds: string[];
    toAddIndication: boolean[];
    unitsAmounts: bigint[];
    newRobberyMultiplier: bigint;
    newTotalSiegePower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuildingRobbedEvent {
  export type InputTuple = [
    armyAddress: AddressLike,
    buildingAddress: AddressLike,
    stolenAmount: BigNumberish,
    burnedAmount: BigNumberish,
    pointsSpent: BigNumberish,
    newRobberyPointsAmount: BigNumberish
  ];
  export type OutputTuple = [
    armyAddress: string,
    buildingAddress: string,
    stolenAmount: bigint,
    burnedAmount: bigint,
    pointsSpent: bigint,
    newRobberyPointsAmount: bigint
  ];
  export interface OutputObject {
    armyAddress: string;
    buildingAddress: string;
    stolenAmount: bigint;
    burnedAmount: bigint;
    pointsSpent: bigint;
    newRobberyPointsAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Siege extends BaseContract {
  connect(runner?: ContractRunner | null): Siege;
  waitForDeployment(): Promise<this>;

  interface: SiegeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  applyDamage: TypedContractMethod<
    [damage: BigNumberish],
    [void],
    "nonpayable"
  >;

  armyInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        robberyMultiplier: bigint;
        pointsDebt: bigint;
        points: bigint;
      }
    ],
    "view"
  >;

  assetGroupId: TypedContractMethod<[], [string], "view">;

  assetTypeId: TypedContractMethod<[], [string], "view">;

  besiegingArmyUnitsByType: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  calculateArmyTotalSiegePower: TypedContractMethod<
    [armyAddress: AddressLike],
    [bigint],
    "view"
  >;

  calculateArmyUnitsSiegePower: TypedContractMethod<
    [armyAddress: AddressLike],
    [bigint],
    "view"
  >;

  canLiquidateArmyBesiegingUnits: TypedContractMethod<
    [armyAddress: AddressLike],
    [boolean],
    "view"
  >;

  era: TypedContractMethod<[], [string], "view">;

  eraNumber: TypedContractMethod<[], [bigint], "view">;

  getArmyBesiegingUnitsAmounts: TypedContractMethod<
    [armyAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  getArmyRobberyPoints: TypedContractMethod<
    [armyAddress: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  init: TypedContractMethod<[initParams: BytesLike], [void], "nonpayable">;

  liquidate: TypedContractMethod<
    [armyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  modifyArmySiege: TypedContractMethod<
    [
      armyAddress: AddressLike,
      unitTypeIds: BytesLike[],
      toAddIndication: boolean[],
      unitsAmounts: BigNumberish[],
      newRobberyMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  relatedSettlement: TypedContractMethod<[], [string], "view">;

  robberyPointsPerOneDamage: TypedContractMethod<[], [bigint], "view">;

  swapRobberyPointsForResourceFromBuildingTreasury: TypedContractMethod<
    [buildingAddress: AddressLike, maxPointsToSpend: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalSiegePower: TypedContractMethod<[], [bigint], "view">;

  world: TypedContractMethod<[], [string], "view">;

  worldAssetFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "applyDamage"
  ): TypedContractMethod<[damage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "armyInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        robberyMultiplier: bigint;
        pointsDebt: bigint;
        points: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "assetGroupId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetTypeId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "besiegingArmyUnitsByType"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateArmyTotalSiegePower"
  ): TypedContractMethod<[armyAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateArmyUnitsSiegePower"
  ): TypedContractMethod<[armyAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "canLiquidateArmyBesiegingUnits"
  ): TypedContractMethod<[armyAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "era"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eraNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getArmyBesiegingUnitsAmounts"
  ): TypedContractMethod<[armyAddress: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getArmyRobberyPoints"
  ): TypedContractMethod<
    [armyAddress: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[initParams: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<[armyAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "modifyArmySiege"
  ): TypedContractMethod<
    [
      armyAddress: AddressLike,
      unitTypeIds: BytesLike[],
      toAddIndication: boolean[],
      unitsAmounts: BigNumberish[],
      newRobberyMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relatedSettlement"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "robberyPointsPerOneDamage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapRobberyPointsForResourceFromBuildingTreasury"
  ): TypedContractMethod<
    [buildingAddress: AddressLike, maxPointsToSpend: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSiegePower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "world"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "worldAssetFactory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ArmyLiquidated"
  ): TypedContractEvent<
    ArmyLiquidatedEvent.InputTuple,
    ArmyLiquidatedEvent.OutputTuple,
    ArmyLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "ArmySiegeModified"
  ): TypedContractEvent<
    ArmySiegeModifiedEvent.InputTuple,
    ArmySiegeModifiedEvent.OutputTuple,
    ArmySiegeModifiedEvent.OutputObject
  >;
  getEvent(
    key: "BuildingRobbed"
  ): TypedContractEvent<
    BuildingRobbedEvent.InputTuple,
    BuildingRobbedEvent.OutputTuple,
    BuildingRobbedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "ArmyLiquidated(address)": TypedContractEvent<
      ArmyLiquidatedEvent.InputTuple,
      ArmyLiquidatedEvent.OutputTuple,
      ArmyLiquidatedEvent.OutputObject
    >;
    ArmyLiquidated: TypedContractEvent<
      ArmyLiquidatedEvent.InputTuple,
      ArmyLiquidatedEvent.OutputTuple,
      ArmyLiquidatedEvent.OutputObject
    >;

    "ArmySiegeModified(address,bytes32[],bool[],uint256[],uint256,uint256)": TypedContractEvent<
      ArmySiegeModifiedEvent.InputTuple,
      ArmySiegeModifiedEvent.OutputTuple,
      ArmySiegeModifiedEvent.OutputObject
    >;
    ArmySiegeModified: TypedContractEvent<
      ArmySiegeModifiedEvent.InputTuple,
      ArmySiegeModifiedEvent.OutputTuple,
      ArmySiegeModifiedEvent.OutputObject
    >;

    "BuildingRobbed(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BuildingRobbedEvent.InputTuple,
      BuildingRobbedEvent.OutputTuple,
      BuildingRobbedEvent.OutputObject
    >;
    BuildingRobbed: TypedContractEvent<
      BuildingRobbedEvent.InputTuple,
      BuildingRobbedEvent.OutputTuple,
      BuildingRobbedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
