/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface EraInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateRegion"
      | "assetGroupId"
      | "assetTypeId"
      | "createSettlementByType"
      | "createUserSettlement"
      | "creationTime"
      | "decreaseTotalCultists"
      | "era"
      | "eraNumber"
      | "increaseTotalCultists"
      | "init"
      | "prosperity"
      | "regions"
      | "registry"
      | "resources"
      | "restoreUserSettlement"
      | "settlementByBannerId"
      | "settlementByPosition"
      | "tileCapturingSystem"
      | "totalCultists"
      | "units"
      | "workers"
      | "world"
      | "worldAssetFactory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "ProsperityCreated"
      | "RegionActivated"
      | "ResourceCreated"
      | "SettlementCreated"
      | "SettlementRestored"
      | "TileCapturingSystemCreated"
      | "TotalCultistsChanged"
      | "UnitsCreated"
      | "WorkersCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activateRegion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetGroupId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetTypeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSettlementByType",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createUserSettlement",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseTotalCultists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "era", values?: undefined): string;
  encodeFunctionData(functionFragment: "eraNumber", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseTotalCultists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "prosperity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "regions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resources",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "restoreUserSettlement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementByBannerId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementByPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tileCapturingSystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCultists",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "units", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "workers", values?: undefined): string;
  encodeFunctionData(functionFragment: "world", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "worldAssetFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activateRegion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTypeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSettlementByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUserSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseTotalCultists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "era", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eraNumber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseTotalCultists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prosperity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "regions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resources", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "restoreUserSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementByBannerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementByPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tileCapturingSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCultists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "units", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "workers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "world", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "worldAssetFactory",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProsperityCreatedEvent {
  export type InputTuple = [prosperityAddress: AddressLike];
  export type OutputTuple = [prosperityAddress: string];
  export interface OutputObject {
    prosperityAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegionActivatedEvent {
  export type InputTuple = [regionAddress: AddressLike, regionId: BigNumberish];
  export type OutputTuple = [regionAddress: string, regionId: bigint];
  export interface OutputObject {
    regionAddress: string;
    regionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourceCreatedEvent {
  export type InputTuple = [
    resourceAddress: AddressLike,
    resourceTypeId: BytesLike
  ];
  export type OutputTuple = [resourceAddress: string, resourceTypeId: string];
  export interface OutputObject {
    resourceAddress: string;
    resourceTypeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementCreatedEvent {
  export type InputTuple = [
    settlementAddress: AddressLike,
    assetTypeId: BytesLike,
    regionAddress: AddressLike,
    position: BigNumberish,
    bannerId: BigNumberish
  ];
  export type OutputTuple = [
    settlementAddress: string,
    assetTypeId: string,
    regionAddress: string,
    position: bigint,
    bannerId: bigint
  ];
  export interface OutputObject {
    settlementAddress: string;
    assetTypeId: string;
    regionAddress: string;
    position: bigint;
    bannerId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementRestoredEvent {
  export type InputTuple = [
    settlementAddress: AddressLike,
    position: BigNumberish
  ];
  export type OutputTuple = [settlementAddress: string, position: bigint];
  export interface OutputObject {
    settlementAddress: string;
    position: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TileCapturingSystemCreatedEvent {
  export type InputTuple = [tileCapturingSystemAddress: AddressLike];
  export type OutputTuple = [tileCapturingSystemAddress: string];
  export interface OutputObject {
    tileCapturingSystemAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TotalCultistsChangedEvent {
  export type InputTuple = [newTotalCultists: BigNumberish];
  export type OutputTuple = [newTotalCultists: bigint];
  export interface OutputObject {
    newTotalCultists: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnitsCreatedEvent {
  export type InputTuple = [unitsAddress: AddressLike, unitTypeId: BytesLike];
  export type OutputTuple = [unitsAddress: string, unitTypeId: string];
  export interface OutputObject {
    unitsAddress: string;
    unitTypeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkersCreatedEvent {
  export type InputTuple = [workersAddress: AddressLike];
  export type OutputTuple = [workersAddress: string];
  export interface OutputObject {
    workersAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Era extends BaseContract {
  connect(runner?: ContractRunner | null): Era;
  waitForDeployment(): Promise<this>;

  interface: EraInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateRegion: TypedContractMethod<
    [regionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  assetGroupId: TypedContractMethod<[], [string], "view">;

  assetTypeId: TypedContractMethod<[], [string], "view">;

  createSettlementByType: TypedContractMethod<
    [
      bannerId: BigNumberish,
      position: BigNumberish,
      regionId: BigNumberish,
      assetTypeId: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  createUserSettlement: TypedContractMethod<
    [position: BigNumberish, regionId: BigNumberish, bannerId: BigNumberish],
    [string],
    "nonpayable"
  >;

  creationTime: TypedContractMethod<[], [bigint], "view">;

  decreaseTotalCultists: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  era: TypedContractMethod<[], [string], "view">;

  eraNumber: TypedContractMethod<[], [bigint], "view">;

  increaseTotalCultists: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  init: TypedContractMethod<[initParams: BytesLike], [void], "nonpayable">;

  prosperity: TypedContractMethod<[], [string], "view">;

  regions: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  resources: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  restoreUserSettlement: TypedContractMethod<
    [position: BigNumberish],
    [void],
    "nonpayable"
  >;

  settlementByBannerId: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  settlementByPosition: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  tileCapturingSystem: TypedContractMethod<[], [string], "view">;

  totalCultists: TypedContractMethod<[], [bigint], "view">;

  units: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  workers: TypedContractMethod<[], [string], "view">;

  world: TypedContractMethod<[], [string], "view">;

  worldAssetFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateRegion"
  ): TypedContractMethod<[regionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assetGroupId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetTypeId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createSettlementByType"
  ): TypedContractMethod<
    [
      bannerId: BigNumberish,
      position: BigNumberish,
      regionId: BigNumberish,
      assetTypeId: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createUserSettlement"
  ): TypedContractMethod<
    [position: BigNumberish, regionId: BigNumberish, bannerId: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseTotalCultists"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "era"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eraNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseTotalCultists"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[initParams: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "prosperity"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "regions"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resources"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "restoreUserSettlement"
  ): TypedContractMethod<[position: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settlementByBannerId"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "settlementByPosition"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tileCapturingSystem"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalCultists"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "units"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "workers"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "world"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "worldAssetFactory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ProsperityCreated"
  ): TypedContractEvent<
    ProsperityCreatedEvent.InputTuple,
    ProsperityCreatedEvent.OutputTuple,
    ProsperityCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RegionActivated"
  ): TypedContractEvent<
    RegionActivatedEvent.InputTuple,
    RegionActivatedEvent.OutputTuple,
    RegionActivatedEvent.OutputObject
  >;
  getEvent(
    key: "ResourceCreated"
  ): TypedContractEvent<
    ResourceCreatedEvent.InputTuple,
    ResourceCreatedEvent.OutputTuple,
    ResourceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementCreated"
  ): TypedContractEvent<
    SettlementCreatedEvent.InputTuple,
    SettlementCreatedEvent.OutputTuple,
    SettlementCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementRestored"
  ): TypedContractEvent<
    SettlementRestoredEvent.InputTuple,
    SettlementRestoredEvent.OutputTuple,
    SettlementRestoredEvent.OutputObject
  >;
  getEvent(
    key: "TileCapturingSystemCreated"
  ): TypedContractEvent<
    TileCapturingSystemCreatedEvent.InputTuple,
    TileCapturingSystemCreatedEvent.OutputTuple,
    TileCapturingSystemCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TotalCultistsChanged"
  ): TypedContractEvent<
    TotalCultistsChangedEvent.InputTuple,
    TotalCultistsChangedEvent.OutputTuple,
    TotalCultistsChangedEvent.OutputObject
  >;
  getEvent(
    key: "UnitsCreated"
  ): TypedContractEvent<
    UnitsCreatedEvent.InputTuple,
    UnitsCreatedEvent.OutputTuple,
    UnitsCreatedEvent.OutputObject
  >;
  getEvent(
    key: "WorkersCreated"
  ): TypedContractEvent<
    WorkersCreatedEvent.InputTuple,
    WorkersCreatedEvent.OutputTuple,
    WorkersCreatedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ProsperityCreated(address)": TypedContractEvent<
      ProsperityCreatedEvent.InputTuple,
      ProsperityCreatedEvent.OutputTuple,
      ProsperityCreatedEvent.OutputObject
    >;
    ProsperityCreated: TypedContractEvent<
      ProsperityCreatedEvent.InputTuple,
      ProsperityCreatedEvent.OutputTuple,
      ProsperityCreatedEvent.OutputObject
    >;

    "RegionActivated(address,uint256)": TypedContractEvent<
      RegionActivatedEvent.InputTuple,
      RegionActivatedEvent.OutputTuple,
      RegionActivatedEvent.OutputObject
    >;
    RegionActivated: TypedContractEvent<
      RegionActivatedEvent.InputTuple,
      RegionActivatedEvent.OutputTuple,
      RegionActivatedEvent.OutputObject
    >;

    "ResourceCreated(address,bytes32)": TypedContractEvent<
      ResourceCreatedEvent.InputTuple,
      ResourceCreatedEvent.OutputTuple,
      ResourceCreatedEvent.OutputObject
    >;
    ResourceCreated: TypedContractEvent<
      ResourceCreatedEvent.InputTuple,
      ResourceCreatedEvent.OutputTuple,
      ResourceCreatedEvent.OutputObject
    >;

    "SettlementCreated(address,bytes32,address,uint64,uint256)": TypedContractEvent<
      SettlementCreatedEvent.InputTuple,
      SettlementCreatedEvent.OutputTuple,
      SettlementCreatedEvent.OutputObject
    >;
    SettlementCreated: TypedContractEvent<
      SettlementCreatedEvent.InputTuple,
      SettlementCreatedEvent.OutputTuple,
      SettlementCreatedEvent.OutputObject
    >;

    "SettlementRestored(address,uint64)": TypedContractEvent<
      SettlementRestoredEvent.InputTuple,
      SettlementRestoredEvent.OutputTuple,
      SettlementRestoredEvent.OutputObject
    >;
    SettlementRestored: TypedContractEvent<
      SettlementRestoredEvent.InputTuple,
      SettlementRestoredEvent.OutputTuple,
      SettlementRestoredEvent.OutputObject
    >;

    "TileCapturingSystemCreated(address)": TypedContractEvent<
      TileCapturingSystemCreatedEvent.InputTuple,
      TileCapturingSystemCreatedEvent.OutputTuple,
      TileCapturingSystemCreatedEvent.OutputObject
    >;
    TileCapturingSystemCreated: TypedContractEvent<
      TileCapturingSystemCreatedEvent.InputTuple,
      TileCapturingSystemCreatedEvent.OutputTuple,
      TileCapturingSystemCreatedEvent.OutputObject
    >;

    "TotalCultistsChanged(uint256)": TypedContractEvent<
      TotalCultistsChangedEvent.InputTuple,
      TotalCultistsChangedEvent.OutputTuple,
      TotalCultistsChangedEvent.OutputObject
    >;
    TotalCultistsChanged: TypedContractEvent<
      TotalCultistsChangedEvent.InputTuple,
      TotalCultistsChangedEvent.OutputTuple,
      TotalCultistsChangedEvent.OutputObject
    >;

    "UnitsCreated(address,bytes32)": TypedContractEvent<
      UnitsCreatedEvent.InputTuple,
      UnitsCreatedEvent.OutputTuple,
      UnitsCreatedEvent.OutputObject
    >;
    UnitsCreated: TypedContractEvent<
      UnitsCreatedEvent.InputTuple,
      UnitsCreatedEvent.OutputTuple,
      UnitsCreatedEvent.OutputObject
    >;

    "WorkersCreated(address)": TypedContractEvent<
      WorkersCreatedEvent.InputTuple,
      WorkersCreatedEvent.OutputTuple,
      WorkersCreatedEvent.OutputObject
    >;
    WorkersCreated: TypedContractEvent<
      WorkersCreatedEvent.InputTuple,
      WorkersCreatedEvent.OutputTuple,
      WorkersCreatedEvent.OutputObject
    >;
  };
}
