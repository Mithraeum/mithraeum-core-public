/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface TileCapturingSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assetGroupId"
      | "assetTypeId"
      | "beginTileCapture"
      | "cancelTileCapture"
      | "claimTileCapture"
      | "era"
      | "eraNumber"
      | "getCapturedTilesBySettlementAddress"
      | "giveUpCapturedTile"
      | "handleSettlementCreatedOnPosition"
      | "init"
      | "registry"
      | "settlementCapturingTile"
      | "tilesInfo"
      | "world"
      | "worldAssetFactory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CapturedTileClaimed"
      | "CapturedTileGivenUp"
      | "Initialized"
      | "TileCapturingBegan"
      | "TileCapturingCancelled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assetGroupId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetTypeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beginTileCapture",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTileCapture",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTileCapture",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "era", values?: undefined): string;
  encodeFunctionData(functionFragment: "eraNumber", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCapturedTilesBySettlementAddress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "giveUpCapturedTile",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleSettlementCreatedOnPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settlementCapturingTile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tilesInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "world", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "worldAssetFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "assetGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTypeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginTileCapture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTileCapture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTileCapture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "era", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eraNumber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCapturedTilesBySettlementAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveUpCapturedTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleSettlementCreatedOnPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlementCapturingTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tilesInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "world", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "worldAssetFactory",
    data: BytesLike
  ): Result;
}

export namespace CapturedTileClaimedEvent {
  export type InputTuple = [
    previousSettlementOwnerAddress: AddressLike,
    position: BigNumberish,
    settlementAddress: AddressLike,
    prosperityStake: BigNumberish
  ];
  export type OutputTuple = [
    previousSettlementOwnerAddress: string,
    position: bigint,
    settlementAddress: string,
    prosperityStake: bigint
  ];
  export interface OutputObject {
    previousSettlementOwnerAddress: string;
    position: bigint;
    settlementAddress: string;
    prosperityStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CapturedTileGivenUpEvent {
  export type InputTuple = [
    position: BigNumberish,
    settlementAddress: AddressLike
  ];
  export type OutputTuple = [position: bigint, settlementAddress: string];
  export interface OutputObject {
    position: bigint;
    settlementAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TileCapturingBeganEvent {
  export type InputTuple = [
    previousUsurperAddress: AddressLike,
    position: BigNumberish,
    settlementAddress: AddressLike,
    prosperityStake: BigNumberish,
    captureBeginTime: BigNumberish,
    captureEndTime: BigNumberish
  ];
  export type OutputTuple = [
    previousUsurperAddress: string,
    position: bigint,
    settlementAddress: string,
    prosperityStake: bigint,
    captureBeginTime: bigint,
    captureEndTime: bigint
  ];
  export interface OutputObject {
    previousUsurperAddress: string;
    position: bigint;
    settlementAddress: string;
    prosperityStake: bigint;
    captureBeginTime: bigint;
    captureEndTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TileCapturingCancelledEvent {
  export type InputTuple = [
    position: BigNumberish,
    settlementAddress: AddressLike
  ];
  export type OutputTuple = [position: bigint, settlementAddress: string];
  export interface OutputObject {
    position: bigint;
    settlementAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TileCapturingSystem extends BaseContract {
  connect(runner?: ContractRunner | null): TileCapturingSystem;
  waitForDeployment(): Promise<this>;

  interface: TileCapturingSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assetGroupId: TypedContractMethod<[], [string], "view">;

  assetTypeId: TypedContractMethod<[], [string], "view">;

  beginTileCapture: TypedContractMethod<
    [
      settlementAddress: AddressLike,
      position: BigNumberish,
      prosperityStake: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  cancelTileCapture: TypedContractMethod<
    [settlementAddress: AddressLike, position: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimTileCapture: TypedContractMethod<
    [settlementAddress: AddressLike, position: BigNumberish],
    [void],
    "nonpayable"
  >;

  era: TypedContractMethod<[], [string], "view">;

  eraNumber: TypedContractMethod<[], [bigint], "view">;

  getCapturedTilesBySettlementAddress: TypedContractMethod<
    [settlementAddress: AddressLike, tileBonusType: BigNumberish],
    [bigint[]],
    "view"
  >;

  giveUpCapturedTile: TypedContractMethod<
    [settlementAddress: AddressLike, position: BigNumberish],
    [void],
    "nonpayable"
  >;

  handleSettlementCreatedOnPosition: TypedContractMethod<
    [position: BigNumberish],
    [void],
    "nonpayable"
  >;

  init: TypedContractMethod<[initParams: BytesLike], [void], "nonpayable">;

  registry: TypedContractMethod<[], [string], "view">;

  settlementCapturingTile: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  tilesInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        ownerSettlementAddress: string;
        usurperSettlementAddress: string;
        usurperProsperityStake: bigint;
        usurperCaptureBeginTime: bigint;
        usurperCaptureEndTime: bigint;
      }
    ],
    "view"
  >;

  world: TypedContractMethod<[], [string], "view">;

  worldAssetFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assetGroupId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetTypeId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "beginTileCapture"
  ): TypedContractMethod<
    [
      settlementAddress: AddressLike,
      position: BigNumberish,
      prosperityStake: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelTileCapture"
  ): TypedContractMethod<
    [settlementAddress: AddressLike, position: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimTileCapture"
  ): TypedContractMethod<
    [settlementAddress: AddressLike, position: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "era"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eraNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCapturedTilesBySettlementAddress"
  ): TypedContractMethod<
    [settlementAddress: AddressLike, tileBonusType: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "giveUpCapturedTile"
  ): TypedContractMethod<
    [settlementAddress: AddressLike, position: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleSettlementCreatedOnPosition"
  ): TypedContractMethod<[position: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[initParams: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "settlementCapturingTile"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tilesInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        ownerSettlementAddress: string;
        usurperSettlementAddress: string;
        usurperProsperityStake: bigint;
        usurperCaptureBeginTime: bigint;
        usurperCaptureEndTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "world"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "worldAssetFactory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CapturedTileClaimed"
  ): TypedContractEvent<
    CapturedTileClaimedEvent.InputTuple,
    CapturedTileClaimedEvent.OutputTuple,
    CapturedTileClaimedEvent.OutputObject
  >;
  getEvent(
    key: "CapturedTileGivenUp"
  ): TypedContractEvent<
    CapturedTileGivenUpEvent.InputTuple,
    CapturedTileGivenUpEvent.OutputTuple,
    CapturedTileGivenUpEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "TileCapturingBegan"
  ): TypedContractEvent<
    TileCapturingBeganEvent.InputTuple,
    TileCapturingBeganEvent.OutputTuple,
    TileCapturingBeganEvent.OutputObject
  >;
  getEvent(
    key: "TileCapturingCancelled"
  ): TypedContractEvent<
    TileCapturingCancelledEvent.InputTuple,
    TileCapturingCancelledEvent.OutputTuple,
    TileCapturingCancelledEvent.OutputObject
  >;

  filters: {
    "CapturedTileClaimed(address,uint64,address,uint256)": TypedContractEvent<
      CapturedTileClaimedEvent.InputTuple,
      CapturedTileClaimedEvent.OutputTuple,
      CapturedTileClaimedEvent.OutputObject
    >;
    CapturedTileClaimed: TypedContractEvent<
      CapturedTileClaimedEvent.InputTuple,
      CapturedTileClaimedEvent.OutputTuple,
      CapturedTileClaimedEvent.OutputObject
    >;

    "CapturedTileGivenUp(uint64,address)": TypedContractEvent<
      CapturedTileGivenUpEvent.InputTuple,
      CapturedTileGivenUpEvent.OutputTuple,
      CapturedTileGivenUpEvent.OutputObject
    >;
    CapturedTileGivenUp: TypedContractEvent<
      CapturedTileGivenUpEvent.InputTuple,
      CapturedTileGivenUpEvent.OutputTuple,
      CapturedTileGivenUpEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "TileCapturingBegan(address,uint64,address,uint256,uint64,uint64)": TypedContractEvent<
      TileCapturingBeganEvent.InputTuple,
      TileCapturingBeganEvent.OutputTuple,
      TileCapturingBeganEvent.OutputObject
    >;
    TileCapturingBegan: TypedContractEvent<
      TileCapturingBeganEvent.InputTuple,
      TileCapturingBeganEvent.OutputTuple,
      TileCapturingBeganEvent.OutputObject
    >;

    "TileCapturingCancelled(uint64,address)": TypedContractEvent<
      TileCapturingCancelledEvent.InputTuple,
      TileCapturingCancelledEvent.OutputTuple,
      TileCapturingCancelledEvent.OutputObject
    >;
    TileCapturingCancelled: TypedContractEvent<
      TileCapturingCancelledEvent.InputTuple,
      TileCapturingCancelledEvent.OutputTuple,
      TileCapturingCancelledEvent.OutputObject
    >;
  };
}
