/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace BattleView {
  export type BattleCombinedDataStruct = {
    id: AddressLike;
    battleBeginTime: BigNumberish;
    battleDuration: BigNumberish;
    battleEndDate: BigNumberish;
    battleSettlementId: AddressLike;
    battleGamePosition: BigNumberish;
    side1Casualties: BigNumberish[];
    side2Casualties: BigNumberish[];
    side1UnitsAmount: BigNumberish[];
    side2UnitsAmount: BigNumberish[];
  };

  export type BattleCombinedDataStructOutput = [
    id: string,
    battleBeginTime: bigint,
    battleDuration: bigint,
    battleEndDate: bigint,
    battleSettlementId: string,
    battleGamePosition: bigint,
    side1Casualties: bigint[],
    side2Casualties: bigint[],
    side1UnitsAmount: bigint[],
    side2UnitsAmount: bigint[]
  ] & {
    id: string;
    battleBeginTime: bigint;
    battleDuration: bigint;
    battleEndDate: bigint;
    battleSettlementId: string;
    battleGamePosition: bigint;
    side1Casualties: bigint[];
    side2Casualties: bigint[];
    side1UnitsAmount: bigint[];
    side2UnitsAmount: bigint[];
  };
}

export declare namespace IBattle {
  export type BattleTimeInfoStruct = {
    beginTime: BigNumberish;
    duration: BigNumberish;
    endTime: BigNumberish;
  };

  export type BattleTimeInfoStructOutput = [
    beginTime: bigint,
    duration: bigint,
    endTime: bigint
  ] & { beginTime: bigint; duration: bigint; endTime: bigint };
}

export interface BattleViewInterface extends Interface {
  getFunction(
    nameOrSignature: "getBattleCombinedData" | "getBattleTimeInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBattleCombinedData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattleTimeInfo",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBattleCombinedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattleTimeInfo",
    data: BytesLike
  ): Result;
}

export interface BattleView extends BaseContract {
  connect(runner?: ContractRunner | null): BattleView;
  waitForDeployment(): Promise<this>;

  interface: BattleViewInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBattleCombinedData: TypedContractMethod<
    [battleAddress: AddressLike],
    [BattleView.BattleCombinedDataStructOutput],
    "view"
  >;

  getBattleTimeInfo: TypedContractMethod<
    [battleAddress: AddressLike],
    [IBattle.BattleTimeInfoStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBattleCombinedData"
  ): TypedContractMethod<
    [battleAddress: AddressLike],
    [BattleView.BattleCombinedDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBattleTimeInfo"
  ): TypedContractMethod<
    [battleAddress: AddressLike],
    [IBattle.BattleTimeInfoStructOutput],
    "view"
  >;

  filters: {};
}
