/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  WorldAssetProxy,
  WorldAssetProxyInterface,
} from "../../../../contracts/core/assets/WorldAssetProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "worldAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "eraNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "assetGroupId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "assetTypeId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102db3803806102db83398101604081905261002f9161013a565b7f6c85b93e587873fbe6712f3b438d42c2945689b262f7bd34b8ea4e3f832a89e680546001600160a01b0319166001600160a01b0395909516949094179093557f6c85b93e587873fbe6712f3b438d42c2945689b262f7bd34b8ea4e3f832a89e79190915560408051602080820184905281830185905282518083038401815260609092019092528051908201207f6c85b93e587873fbe6712f3b438d42c2945689b262f7bd34b8ea4e3f832a89e880546001600160e01b0319169190921c1790557f6c85b93e587873fbe6712f3b438d42c2945689b262f7bd34b8ea4e3f832a89e9557f6c85b93e587873fbe6712f3b438d42c2945689b262f7bd34b8ea4e3f832a89ea55610185565b6000806000806080858703121561015057600080fd5b84516001600160a01b038116811461016757600080fd5b60208601516040870151606090970151919890975090945092505050565b610147806101946000396000f3fe608060408190527f6c85b93e587873fbe6712f3b438d42c2945689b262f7bd34b8ea4e3f832a89e680547f6c85b93e587873fbe6712f3b438d42c2945689b262f7bd34b8ea4e3f832a89e854631773274b60e31b845263ffffffff19602091821b1660845291926000926001600160a01b039092169163bb993a589160a49190602481865afa158015610096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ba91906100e1565b905060405136600082376000803683855af43d806000843e8180156100dd578184f35b8184fd5b6000602082840312156100f357600080fd5b81516001600160a01b038116811461010a57600080fd5b939250505056fea26469706673582212208e1004a34eb49861aee28d46275a34dce4816918527f3dbfc004f5d50295ff4d64736f6c634300081a0033";

type WorldAssetProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WorldAssetProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WorldAssetProxy__factory extends ContractFactory {
  constructor(...args: WorldAssetProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    worldAddress: AddressLike,
    eraNumber: BigNumberish,
    assetGroupId: BytesLike,
    assetTypeId: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      worldAddress,
      eraNumber,
      assetGroupId,
      assetTypeId,
      overrides || {}
    );
  }
  override deploy(
    worldAddress: AddressLike,
    eraNumber: BigNumberish,
    assetGroupId: BytesLike,
    assetTypeId: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      worldAddress,
      eraNumber,
      assetGroupId,
      assetTypeId,
      overrides || {}
    ) as Promise<
      WorldAssetProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): WorldAssetProxy__factory {
    return super.connect(runner) as WorldAssetProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WorldAssetProxyInterface {
    return new Interface(_abi) as WorldAssetProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): WorldAssetProxy {
    return new Contract(address, _abi, runner) as unknown as WorldAssetProxy;
  }
}
