/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IWorldAssetFactory,
  IWorldAssetFactoryInterface,
} from "../../../../contracts/core/assets/IWorldAssetFactory";

const _abi = [
  {
    inputs: [],
    name: "OnlyWorldOrWorldAsset",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "worldAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "eraNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "assetGroupId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "assetTypeId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "initParams",
        type: "bytes",
      },
    ],
    name: "create",
    outputs: [
      {
        internalType: "address",
        name: "worldAssetAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IWorldAssetFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IWorldAssetFactoryInterface {
    return new Interface(_abi) as IWorldAssetFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IWorldAssetFactory {
    return new Contract(address, _abi, runner) as unknown as IWorldAssetFactory;
  }
}
